"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4028],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return k}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=a.createContext({}),s=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(o.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),c=s(t),k=i,m=c["".concat(o,".").concat(k)]||c[k]||u[k]||r;return t?a.createElement(m,l(l({ref:n},p),{},{components:t})):a.createElement(m,l({ref:n},p))}));function k(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=c;var d={};for(var o in n)hasOwnProperty.call(n,o)&&(d[o]=n[o]);d.originalType=e,d.mdxType="string"==typeof e?e:i,l[1]=d;for(var s=2;s<r;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},7952:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return d},contentTitle:function(){return o},metadata:function(){return s},toc:function(){return p},default:function(){return c}});var a=t(7462),i=t(3366),r=(t(7294),t(3905)),l=["components"],d={id:"datatx",title:"Data Transaction",output:{html_document:{number_sections:!0}}},o="Data Transaction",s={unversionedId:"getting-started/transactions/curl/datatx",id:"getting-started/transactions/curl/datatx",isDocsHomePage:!1,title:"Data Transaction",description:"We can store, update, or delete any state (i.e., a key-value pair) on the ledger by issuing a data transaction.",source:"@site/docs/getting-started/transactions/curl/datatx.md",sourceDirName:"getting-started/transactions/curl",slug:"/getting-started/transactions/curl/datatx",permalink:"/orion-server/docs/getting-started/transactions/curl/datatx",tags:[],version:"current",frontMatter:{id:"datatx",title:"Data Transaction",output:{html_document:{number_sections:!0}}},sidebar:"Documentation",previous:{title:"User Administration Transaction",permalink:"/orion-server/docs/getting-started/transactions/curl/usertx"},next:{title:"Check the Existence of a Database",permalink:"/orion-server/docs/getting-started/queries/gosdk/db"}},p=[{value:"1) Create new states",id:"1-create-new-states",children:[{value:"1.1) Create a state with key <code>key1</code>",id:"11-create-a-state-with-key-key1",children:[],level:3},{value:"1.2) Checking the existance of <code>key1</code>",id:"12-checking-the-existance-of-key1",children:[],level:3}],level:2},{value:"2) Update an existing state",id:"2-update-an-existing-state",children:[{value:"2.1) Update the key <code>key1</code>",id:"21-update-the-key-key1",children:[],level:3},{value:"2.2) Checking the existence of the updated key <code>key1</code>",id:"22-checking-the-existence-of-the-updated-key-key1",children:[],level:3}],level:2},{value:"3) Delete an existing state",id:"3-delete-an-existing-state",children:[{value:"3.1) Delete the key <code>key1</code>",id:"31-delete-the-key-key1",children:[],level:3},{value:"3.2) Checking the non-existence of the deleted key <code>key1</code>",id:"32-checking-the-non-existence-of-the-deleted-key-key1",children:[],level:3}],level:2},{value:"4) Create, Update, Delete states within a single transaction",id:"4-create-update-delete-states-within-a-single-transaction",children:[{value:"4.1) Create <code>key1</code> and <code>key2</code>",id:"41-create-key1-and-key2",children:[],level:3},{value:"4.2) Create <code>key3</code>, update <code>key2</code>, and delete <code>key1</code>",id:"42-create-key3-update-key2-and-delete-key1",children:[],level:3},{value:"4.3) Check the non-existence of <code>key1</code>",id:"43-check-the-non-existence-of-key1",children:[],level:3},{value:"4.4) Check the updated <code>key2</code>",id:"44-check-the-updated-key2",children:[],level:3},{value:"4.5) Check the newly created <code>key3</code>",id:"45-check-the-newly-created-key3",children:[],level:3}],level:2},{value:"5) Operations on Multiple Databases in a Single Transaction",id:"5-operations-on-multiple-databases-in-a-single-transaction",children:[{value:"5.1) Update <code>alice</code>&#39;s privileges",id:"51-update-alices-privileges",children:[],level:3},{value:"5.2) Create <code>key1</code> in <code>db1</code> and <code>key1</code> in <code>db2</code>",id:"52-create-key1-in-db1-and-key1-in-db2",children:[],level:3},{value:"5.3) Check the existence of <code>key1</code> in <code>db1</code>",id:"53-check-the-existence-of-key1-in-db1",children:[],level:3},{value:"5.4) Check the existence of <code>key1</code> in <code>db2</code>",id:"54-check-the-existence-of-key1-in-db2",children:[],level:3}],level:2}],u={toc:p};function c(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"data-transaction"},"Data Transaction"),(0,r.kt)("p",null,"We can store, update, or delete any state (i.e., a key-value pair) on the ledger by issuing a data transaction.\nBy submitting a ",(0,r.kt)("inlineCode",{parentName:"p"},"POST /data/tx {txPaylod}"),", we can perform a data transaction where ",(0,r.kt)("inlineCode",{parentName:"p"},"txPayload")," contains reads, writes, and deletions of states."),(0,r.kt)("p",null,"Using a data transaction, we can do the following:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#2-create-new-states"},"Create new states")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#3-update-an-existing-state"},"Update an existing states")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#4-delete-an-existing-state"},"Delete an existing states")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#5-create-update-delete-states-within-a-single-transaction"},"Create, update, and delete states within a single transaction")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#6-operations-on-multiple-databases-in-a-single-transaction"},"Operations on multiple databases")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#7-multi-signatures-transaction"},"Multi-signatures transaction"))),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"It is recommended to start a fresh Orion server for executing these examples. Otherwise, you need to carefully change the block number specified as part of the version in the read-set of the transaction payload. Reading this document to the end will clarify this point."))),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Prerequisite")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Once a fresh Orion server is started after removing the ",(0,r.kt)("inlineCode",{parentName:"p"},"ledger")," directory,"),(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./dbtx#creation-of-databases"},"create two databases named db1 and db2"),", and"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./usertx#addition-of-users"},"create two users alice and bob"),".")))),(0,r.kt)("h2",{id:"1-create-new-states"},"1) Create new states"),(0,r.kt)("h3",{id:"11-create-a-state-with-key-key1"},"1.1) Create a state with key ",(0,r.kt)("inlineCode",{parentName:"h3"},"key1")),(0,r.kt)("p",null,"Let's store a new state with the key ",(0,r.kt)("inlineCode",{parentName:"p"},"key1")," with the value ",(0,r.kt)("inlineCode",{parentName:"p"},'{"name":"abc","age":31,"graduated":true}'),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},' curl \\\n   -H "Content-Type: application/json" \\\n   -H "TxTimeout: 2s" \\\n   -X POST http://127.0.0.1:6001/data/tx \\\n   --data \'{\n    "payload": {\n        "must_sign_user_ids": [\n            "alice"\n        ],\n        "tx_id": "1b6d6414-9b58-45d0-9723-1f31712add81",\n        "db_operations": [\n            {\n                "db_name": "db2",\n                "data_writes": [\n                    {\n                        "key": "key1",\n                        "value": "eyJuYW1lIjoiYWJjIiwiYWdlIjozMSwiZ3JhZHVhdGVkIjp0cnVlfQ==",\n                        "acl": {\n                            "read_users": {\n                                "alice": true,\n                                "bob": true\n                            },\n                            "read_write_users": {\n                                "alice": true\n                            }\n                        }\n                    }\n                ]\n            }\n        ]\n    },\n    "signatures": {\n        "alice": "MEUCIHS1BA4ZIeLcmlb/HSwhXGIuzqZOXxpirHevWx426nZgAiEAnCk3hoDXZ0Pn5jlU0igQLkHT3TU08qWH+rPgxVCYbD0="\n    }\n}\'\n')),(0,r.kt)("p",null,"The payload contains ",(0,r.kt)("inlineCode",{parentName:"p"},"must_sign_user_ids")," which is a list of user ids that must sign the transaction's payload. The\n",(0,r.kt)("inlineCode",{parentName:"p"},"db_operations")," hold the ",(0,r.kt)("inlineCode",{parentName:"p"},"data_writes")," to be applied on the specified ",(0,r.kt)("inlineCode",{parentName:"p"},"db_name"),", i.e., ",(0,r.kt)("inlineCode",{parentName:"p"},"db2"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"data_writes")," must be encoded in base64. We need to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"encoder")," utility to get the base64-encoded output as shown below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'./bin/encoder -data=\'{"name":"abc","age":31,"graduated":true}\'\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Output")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"eyJuYW1lIjoiYWJjIiwiYWdlIjozMSwiZ3JhZHVhdGVkIjp0cnVlfQ==\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"acl")," contains a list of users in the ",(0,r.kt)("inlineCode",{parentName:"p"},"read_users")," who can read-only the state and a list of users in the ",(0,r.kt)("inlineCode",{parentName:"p"},"read_write_users")," who can both read and write to the state. Here, the ",(0,r.kt)("inlineCode",{parentName:"p"},"signatures")," holds a map of\neach user in the ",(0,r.kt)("inlineCode",{parentName:"p"},"must_sign_user_ids")," to their digital signature."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Signature Computation"),(0,r.kt)("div",null,(0,r.kt)("p",null,"The signature is computed using the ",(0,r.kt)("inlineCode",{parentName:"p"},"alice")," private key as shown below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'./bin/signer -privatekey=deployment/sample/crypto/alice/alice.key \\\n    -data=\'{"must_sign_user_ids":["alice"],"tx_id":"1b6d6414-9b58-45d0-9723-1f31712add81","db_operations":[{"db_name":"db2","data_writes":[{"key":"key1","value":"eyJuYW1lIjoiYWJjIiwiYWdlIjozMSwiZ3JhZHVhdGVkIjp0cnVlfQ==","acl":{"read_users":{"alice":true,"bob":true},"read_write_users":{"alice":true}}}]}]}\'\n'))),(0,r.kt)("div",null,"Output",(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"MEUCIHS1BA4ZIeLcmlb/HSwhXGIuzqZOXxpirHevWx426nZgAiEAnCk3hoDXZ0Pn5jlU0igQLkHT3TU08qWH+rPgxVCYbD0=\n")))),(0,r.kt)("p",null,"Once the above transaction gets committed, the submitter of the transaction receives the transaction receipt."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Transaction Receipt"),(0,r.kt)("div",null,(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-webmanifest"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "receipt": {\n      "header": {\n        "base_header": {\n          "number": 5,\n          "previous_base_header_hash": "0hi2UZF5+X4xcGhobE1akVFZ/depxYCWShukzF+KrNk=",\n          "last_committed_block_hash": "t9F0hOUPIuyk8upeQhpDpTY/wLP3yoLuA7NBqNE0HUo=",\n          "last_committed_block_num": 4\n        },\n        "skipchain_hashes": [\n          "t9F0hOUPIuyk8upeQhpDpTY/wLP3yoLuA7NBqNE0HUo=",\n          "PAFz7foMQVLrK0q1bO9TYxW9ZwUMl7rb6G3DZoSD1FY=",\n          "xz3tsHvNxVNsB709SBOJ3s2fuUXo2GciBGThc70aaTM="\n        ],\n        "tx_merkel_tree_root_hash": "UTf7CV8x9/QC9luiVwe5QzHVg9hvCHNLxWAC2iD/5Zw=",\n        "state_merkel_tree_root_hash": "+kBbsknNLNuDVKxDTktcgcJMsR9gRAHHW03plIjrTg0=",\n        "validation_info": [\n          {}\n        ]\n      }\n    }\n  },\n  "signature": "MEQCIDwJOH8ZNqs2H1rD+GWTTm03Cu1X+LcILP5NnPpmZ14LAiAJHmD4/E2noofY47eyjJm5NCcAmTUytqoB8Dat3xeVaQ=="\n}\n')))),(0,r.kt)("h3",{id:"12-checking-the-existance-of-key1"},"1.2) Checking the existance of ",(0,r.kt)("inlineCode",{parentName:"h3"},"key1")),(0,r.kt)("p",null,"Let's query the node to see whether ",(0,r.kt)("inlineCode",{parentName:"p"},"key1")," exists. The query can be submitted by either ",(0,r.kt)("inlineCode",{parentName:"p"},"alice")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"bob")," as both have the read permission to this key. No one else can read ",(0,r.kt)("inlineCode",{parentName:"p"},"key1"),", including the admin user of the node. In this example, we use ",(0,r.kt)("inlineCode",{parentName:"p"},"bob")," to query the key."),(0,r.kt)("p",null,"First, compute the bob signature on the request payload."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'./bin/signer -privatekey=deployment/sample/crypto/bob/bob.key \\\n    -data=\'{"user_id":"bob","db_name":"db2","key":"key1"}\'\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Output")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"MEUCIQDm6dLmAdd0X49JygTiUkh+brZxprWSr2+hcAH+QIu3AAIgF+m7kO33YXyyqSbnXS9HR79wt/aL3JGhKvXFQaFBJms=\n")),(0,r.kt)("p",null,"Second, submit the query."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},' curl \\\n     -H "Content-Type: application/json" \\\n     -H "UserID: bob" \\\n     -H "Signature: MEUCIQDm6dLmAdd0X49JygTiUkh+brZxprWSr2+hcAH+QIu3AAIgF+m7kO33YXyyqSbnXS9HR79wt/aL3JGhKvXFQaFBJms=" \\\n     -X GET http://127.0.0.1:6001/data/db2/key1 | read json; ./base64_decoder -getresponse=$json | jq .\n')),(0,r.kt)("p",null,"The default output would contain the base64-encoded string of the value field. To print a human readable value, we\nuse the ",(0,r.kt)("inlineCode",{parentName:"p"},"base64_decoder")," utility."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Output")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-webmanifest"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "value": "{\\"name\\":\\"abc\\",\\"age\\":31,\\"graduated\\":true}",\n    "metadata": {\n      "version": {\n        "block_num": 4\n      },\n      "access_control": {\n        "read_users": {\n          "alice": true,\n          "bob": true\n        },\n        "read_write_users": {\n          "alice": true\n        }\n      }\n    }\n  },\n  "signature": "MEUCID5QuzmQukLWGFvPo0BCSmc2/E5IUHt8wOTVC1i5sxlOAiEAir2/H1AUfeJnhkJ/N4bdwn7wZN903oyenV0doIaagzw="\n}\n')),(0,r.kt)("p",null,"The result contains the base64-decoded ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," associated with the key and also the ",(0,r.kt)("inlineCode",{parentName:"p"},"access_control")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"version")," as part of the ",(0,r.kt)("inlineCode",{parentName:"p"},"metadata"),". To verify the signature, do not use the output of the ",(0,r.kt)("inlineCode",{parentName:"p"},"base64_decoder")," utility but rather the ",(0,r.kt)("inlineCode",{parentName:"p"},"cURL")," output."),(0,r.kt)("h2",{id:"2-update-an-existing-state"},"2) Update an existing state"),(0,r.kt)("h3",{id:"21-update-the-key-key1"},"2.1) Update the key ",(0,r.kt)("inlineCode",{parentName:"h3"},"key1")),(0,r.kt)("p",null,"Let's update the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"key1"),". To do that, we need to execute the following three steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Fetch ",(0,r.kt)("inlineCode",{parentName:"li"},"key1")," from the server."),(0,r.kt)("li",{parentName:"ol"},"Construct the updated value and transaction payload including the read version.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"update the ",(0,r.kt)("inlineCode",{parentName:"li"},"age")," from ",(0,r.kt)("inlineCode",{parentName:"li"},"31"),". The new value would be ",(0,r.kt)("inlineCode",{parentName:"li"},'{"name":"abc","age":32,"graduated":true}')))),(0,r.kt)("li",{parentName:"ol"},"Submit the data transaction")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"data_reads")," should contain the version of the ",(0,r.kt)("inlineCode",{parentName:"p"},"key1")," that was read before modifying the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"key1"),". In other words, the version should be the last committed version. If ",(0,r.kt)("inlineCode",{parentName:"p"},"data_reads")," is kept empty, the ",(0,r.kt)("inlineCode",{parentName:"p"},"data_writes")," would be considered as a blind write.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},' curl \\\n   -H "Content-Type: application/json" \\\n   -H "TxTimeout: 2s" \\\n   -X POST http://127.0.0.1:6001/data/tx \\\n   --data \'{\n    "payload": {\n        "must_sign_user_ids": [\n            "alice"\n        ],\n        "tx_id": "1b6d6414-9b58-45d0-9723-1f31712add83",\n        "db_operations": [\n            {\n                "db_name": "db2",\n                "data_reads": [\n                    {\n                        "key": "key1",\n                        "version": {\n                            "block_num": 4\n                        }\n                    }\n                ],\n                "data_writes": [\n                    {\n                        "key": "key1",\n                        "value": "eyJuYW1lIjoiYWJjIiwiYWdlIjozMiwiZ3JhZHVhdGVkIjp0cnVlfQ==",\n                        "acl": {\n                            "read_users": {\n                                "alice": true\n                            },\n                            "read_write_users": {\n                                "alice": true\n                            }\n                        }\n                    }\n                ]\n            }\n        ]\n    },\n    "signatures": {\n        "alice": "MEUCIQDU+vdGZny6RfjIujjJ/ZZPv43OEQ9JsxZ08gx1FDTWMgIgArbhOw+42yy0zP1YLXpVJ5BVyP/3Cqft4OWW8bsUKqU="\n    }\n}\'\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"data_reads")," holds the read key, ",(0,r.kt)("inlineCode",{parentName:"p"},"key1")," and its version ",(0,r.kt)("inlineCode",{parentName:"p"},'"block_num":4'),". Please fetch ",(0,r.kt)("inlineCode",{parentName:"p"},"key1")," to get the version number in your setup. We updated the ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"key1")," and removed the user ",(0,r.kt)("inlineCode",{parentName:"p"},"bob")," from the reader's list.\nThe required signature is computed with alice's private key using the following command"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'./bin/signer -privatekey=deployment/sample/crypto/alice/alice.key \\\n    -data=\'{"must_sign_user_ids":["alice"],"tx_id":"1b6d6414-9b58-45d0-9723-1f31712add83","db_operations":[{"db_name":"db2","data_reads":[{"key":"key1","version":{"block_num":4}}],"data_writes":[{"key":"key1","value":"eyJuYW1lIjoiYWJjIiwiYWdlIjozMiwiZ3JhZHVhdGVkIjp0cnVlfQ==","acl":{"read_users":{"alice":true},"read_write_users":{"alice":true}}}]}]}\'\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Output")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"MEUCIQDU+vdGZny6RfjIujjJ/ZZPv43OEQ9JsxZ08gx1FDTWMgIgArbhOw+42yy0zP1YLXpVJ5BVyP/3Cqft4OWW8bsUKqU=\n")),(0,r.kt)("p",null,"Once the above transaction gets committed, the submitter of the transaction would get the following transaction receipt."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-webmanifest"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "receipt": {\n      "header": {\n        "base_header": {\n          "number": 6,\n          "previous_base_header_hash": "paoW5AH3PRvYnFgsuQGl8eVxA2cYoeHakyHY+mIogf0=",\n          "last_committed_block_hash": "xrRU2Hy5curlSi/YafvCCeKaAb8bF9vUNGhr5usK4fc=",\n          "last_committed_block_num": 5\n        },\n        "skipchain_hashes": [\n          "xrRU2Hy5curlSi/YafvCCeKaAb8bF9vUNGhr5usK4fc="\n        ],\n        "tx_merkel_tree_root_hash": "bSgG1t1yZhOGVOrqT4LR+wXdtB/LTXvYy2De1ouaq+U=",\n        "state_merkel_tree_root_hash": "TueFaZX9xju1WimSV0g7wxuekIJ7nq6Bf+o+WNWSnkc=",\n        "validation_info": [\n          {}\n        ]\n      }\n    }\n  },\n  "signature": "MEQCIEaCKYOLUaa55VFdssKQfiFKnPY7gzm4sTw2loSTe1fnAiB5fzlYRg4dYjtjgWjHxiQHsDtHgDP+8ZSOdvJww3CSww=="\n}\n')),(0,r.kt)("h3",{id:"22-checking-the-existence-of-the-updated-key-key1"},"2.2) Checking the existence of the updated key ",(0,r.kt)("inlineCode",{parentName:"h3"},"key1")),(0,r.kt)("p",null,"Let's query the node to see whether ",(0,r.kt)("inlineCode",{parentName:"p"},"key1")," has been updated. The query can be submitted only by ",(0,r.kt)("inlineCode",{parentName:"p"},"alice")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"bob")," is no longer in the readers' list of ",(0,r.kt)("inlineCode",{parentName:"p"},"key1"),". No one else can read ",(0,r.kt)("inlineCode",{parentName:"p"},"key1")," including the admin user of the node.\nIn this example, we use ",(0,r.kt)("inlineCode",{parentName:"p"},"alice")," to query the key."),(0,r.kt)("p",null,"First, compute the alice signature on the request payload."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'./bin/signer -privatekey=deployment/sample/crypto/alice/alice.key \\\n    -data=\'{"user_id":"alice","db_name":"db2","key":"key1"}\'\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Output")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"MEYCIQDUVfuDVppJ2BLuiD662M4iuBYdn2E2ttyspZo6UXYmNgIhAOEvZTdRe7d9/bkVliplmpFHeypKbz7wMHPluGYipqvw\n")),(0,r.kt)("p",null,"Second, submit the query."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl \\\n    -H "Content-Type: application/json" \\\n    -H "UserID: alice" \\\n    -H "Signature: MEYCIQDUVfuDVppJ2BLuiD662M4iuBYdn2E2ttyspZo6UXYmNgIhAOEvZTdRe7d9/bkVliplmpFHeypKbz7wMHPluGYipqvw" \\\n    -X GET http://127.0.0.1:6001/data/db2/key1 | read json; ./base64_decoder -getresponse=$json | jq .\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Output")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-webmanifest"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "value": "{\\"name\\":\\"abc\\",\\"age\\":32,\\"graduated\\":true}",\n    "metadata": {\n      "version": {\n        "block_num": 5\n      },\n      "access_control": {\n        "read_users": {\n          "alice": true\n        },\n        "read_write_users": {\n          "alice": true\n        }\n      }\n    }\n  },\n  "signature": "MEUCIQCW2w0ec3AN7/y/1H5cuaRvmmBFVsmNY3LeggwNzYJhyQIgbUGQ6UqI33bAJNRKWxZ5FP278KQfCjtW10tSa7e3/XQ="\n}\n')),(0,r.kt)("p",null,"The result contains the updated ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," associated with the key and also the ",(0,r.kt)("inlineCode",{parentName:"p"},"access_control")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"version")," as part of the\n",(0,r.kt)("inlineCode",{parentName:"p"},"metadata"),". In the update state, we can find that the ",(0,r.kt)("inlineCode",{parentName:"p"},"value"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"version"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"access_control")," have changed."),(0,r.kt)("h2",{id:"3-delete-an-existing-state"},"3) Delete an existing state"),(0,r.kt)("h3",{id:"31-delete-the-key-key1"},"3.1) Delete the key ",(0,r.kt)("inlineCode",{parentName:"h3"},"key1")),(0,r.kt)("p",null,"Let's delete the key ",(0,r.kt)("inlineCode",{parentName:"p"},"key1"),". In order to do that, we need to execute the following three steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Read ",(0,r.kt)("inlineCode",{parentName:"li"},"key1")," from the server. If we want to blindly delete ",(0,r.kt)("inlineCode",{parentName:"li"},"key1"),", this step can be avoided and the read version is not needed."),(0,r.kt)("li",{parentName:"ol"},"Construct the transaction payload including the read version."),(0,r.kt)("li",{parentName:"ol"},"Submit the data transaction")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"data_reads")," should contain the version of ",(0,r.kt)("inlineCode",{parentName:"p"},"key1")," that was read before modifying the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"key1"),". If ",(0,r.kt)("inlineCode",{parentName:"p"},"data_reads")," is left out, the delete would be applied blindly.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},' curl \\\n   -H "Content-Type: application/json" \\\n   -H "TxTimeout: 2s" \\\n   -X POST http://127.0.0.1:6001/data/tx \\\n   --data \'{\n    "payload": {\n        "must_sign_user_ids": [\n            "alice"\n        ],\n        "tx_id": "1b6d6414-9b58-45d0-9723-1f31712add85",\n        "db_operations": [\n            {\n                "db_name": "db2",\n                "data_reads": [\n                    {\n                        "key": "key1",\n                        "version": {\n                            "block_num": 5\n                        }\n                    }\n                ],\n                "data_deletes": [\n                    {\n                        "key": "key1"\n                    }\n                ]\n            }\n        ]\n    },\n    "signatures": {\n        "alice": "MEUCICkMMnle29bx7MP5dPE3INwnZk1jw0ueXOlYUp2j7K90AiEA2M6GjiuzG5aDl0qKua+thfPGw5PiDICYk9XNgKZXtX0="\n    }\n}\'\n')),(0,r.kt)("p",null,"The transaction should be submitted by ",(0,r.kt)("inlineCode",{parentName:"p"},"alice")," as only she has the write permission which is required for the delete operation too.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"db_operations")," holds the ",(0,r.kt)("inlineCode",{parentName:"p"},"data_reads")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"key1")," and version ",(0,r.kt)("inlineCode",{parentName:"p"},'"block_num":5'),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"data_deletes")," list contains the key ",(0,r.kt)("inlineCode",{parentName:"p"},"key1"),".\nThe signature is computed using the following command"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'./bin/signer -privatekey=deployment/sample/crypto/alice/alice.key \\\n    -data=\'{"must_sign_user_ids":["alice"],"tx_id":"1b6d6414-9b58-45d0-9723-1f31712add85","db_operations":[{"db_name":"db2","data_reads":[{"key":"key1","version":{"block_num":5}}],"data_deletes":[{"key":"key1"}]}]}\'\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Output")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"MEUCICkMMnle29bx7MP5dPE3INwnZk1jw0ueXOlYUp2j7K90AiEA2M6GjiuzG5aDl0qKua+thfPGw5PiDICYk9XNgKZXtX0=\n")),(0,r.kt)("p",null,"Once the above transaction gets committed, the submitting user would get the following transaction receipt"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-webmanifest"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "receipt": {\n      "header": {\n        "base_header": {\n          "number": 7,\n          "previous_base_header_hash": "E1QGMExoA6Nt2MEk9GBE+NHDCzpVR4YuBBeYMZONbKU=",\n          "last_committed_block_hash": "WwuMQlvM05Kd/jh+6iD0Kt8ZxMXEdC1wEOk0wzxCBfc=",\n          "last_committed_block_num": 6\n        },\n        "skipchain_hashes": [\n          "WwuMQlvM05Kd/jh+6iD0Kt8ZxMXEdC1wEOk0wzxCBfc=",\n          "xrRU2Hy5curlSi/YafvCCeKaAb8bF9vUNGhr5usK4fc="\n        ],\n        "tx_merkel_tree_root_hash": "vobaBbri1K+lJv+rXYXRofWuQ0D+SDMGKaBwkTtXQQ0=",\n        "state_merkel_tree_root_hash": "jYpTKUQBA7dJZYlzz7gEZWqX503EqGC+z+9pOKJsDKQ=",\n        "validation_info": [\n          {}\n        ]\n      }\n    }\n  },\n  "signature": "MEYCIQDgtHEC+7gaOGsOQbFWOqeCQW5yOrwgDsZI+aZnGu+sogIhAPv+Emp+WxHjUl0ZoSw9mpF50udpTUyI+YqnRXnvn+UA"\n}\n')),(0,r.kt)("h3",{id:"32-checking-the-non-existence-of-the-deleted-key-key1"},"3.2) Checking the non-existence of the deleted key ",(0,r.kt)("inlineCode",{parentName:"h3"},"key1")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'./bin/signer -privatekey=deployment/sample/crypto/alice/alice.key \\\n    -data=\'{"user_id":"alice","db_name":"db2","key":"key1"}\'\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"MEUCIQCQWTeWyDwbj2ARFHQTH3pgsplOTrpW6XaC8mC/TODaJgIgIplpD5DB/SSNmhh42qLpITCJc66Z75mcHP3AWsS3zcw=\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl \\\n     -H "Content-Type: application/json" \\\n     -H "UserID: alice" \\\n     -H "Signature: MEUCIQCQWTeWyDwbj2ARFHQTH3pgsplOTrpW6XaC8mC/TODaJgIgIplpD5DB/SSNmhh42qLpITCJc66Z75mcHP3AWsS3zcw=" \\\n     -X GET http://127.0.0.1:6001/data/db2/key1 | jq .\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Output")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-webmanifest"},'{\n  "response": {\n    "header": {\n      "nodeID": "bdb-node-1"\n    }\n  }\n  "signature": "MEYCIQCVdcbqmwIQDLkwYiK2tmOMwHI0GbWFX6kMMPo4VBORpgIhAMBBvsjCjL8LkogH06m58KefvnMOncLy7uFobh4XNNvI"\n}\n')),(0,r.kt)("h2",{id:"4-create-update-delete-states-within-a-single-transaction"},"4) Create, Update, Delete states within a single transaction"),(0,r.kt)("p",null,"We can also use ",(0,r.kt)("inlineCode",{parentName:"p"},"data_writes")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"data_deletes")," with multiple entries, along with many ",(0,r.kt)("inlineCode",{parentName:"p"},"data_reads")," within a single transaction."),(0,r.kt)("p",null,"Let's create ",(0,r.kt)("inlineCode",{parentName:"p"},"key1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"key2")," so that in the next transaction we can do all three operations."),(0,r.kt)("h3",{id:"41-create-key1-and-key2"},"4.1) Create ",(0,r.kt)("inlineCode",{parentName:"h3"},"key1")," and ",(0,r.kt)("inlineCode",{parentName:"h3"},"key2")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},' curl \\\n   -H "Content-Type: application/json" \\\n   -H "TxTimeout: 2s" \\\n   -X POST http://127.0.0.1:6001/data/tx \\\n   --data \'{\n    "payload": {\n        "must_sign_user_ids": [\n            "alice"\n        ],\n        "tx_id": "1b6d6414-91ac-abcd-9723-1f31712add83",\n        "db_operations": [\n            {\n                "db_name": "db2",\n                "data_writes": [\n                    {\n                        "key": "key1",\n                        "value": "eyJuYW1lIjoiYWJjIiwiYWdlIjozMiwiZ3JhZHVhdGVkIjp0cnVlfQ==",\n                        "acl": {\n                            "read_users": {\n                                "alice": true\n                            },\n                            "read_write_users": {\n                                "alice": true\n                            }\n                        }\n                    },\n                    {\n                        "key": "key2",\n                        "value": "eyJkZWdyZWUiOiJQaC5EIiwieWVhciI6MjAxOH0=",\n                        "acl": {\n                            "read_users": {\n                                "alice": true\n                            },\n                            "read_write_users": {\n                                "alice": true,\n                                "bob": true\n                            }\n                        }\n                    }\n                ]\n            }\n        ]\n    },\n    "signatures": {\n        "alice": "MEUCIQDOz5CZKIlK/t4M/rnxU6Hy0saDDCl2RprtnFIkttE+RgIgGwGF6P5rbDlSTh2DREXyl1etTeHf+TYeCLpOJ3WE2jU="\n    }\n}\'\n')),(0,r.kt)("p",null,"To create ",(0,r.kt)("inlineCode",{parentName:"p"},"key1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"key2"),", we have two entries in the ",(0,r.kt)("inlineCode",{parentName:"p"},"data_writes")," section."),(0,r.kt)("p",null,"The signature is computed on the payload as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'./bin/signer -privatekey=deployment/sample/crypto/alice/alice.key \\\n    -data=\'{"must_sign_user_ids":["alice"],"tx_id":"1b6d6414-91ac-abcd-9723-1f31712add83","db_operations":[{"db_name":"db2","data_writes":[{"key":"key1","value":"eyJuYW1lIjoiYWJjIiwiYWdlIjozMiwiZ3JhZHVhdGVkIjp0cnVlfQ==","acl":{"read_users":{"alice":true},"read_write_users":{"alice":true}}},{"key":"key2","value":"eyJkZWdyZWUiOiJQaC5EIiwieWVhciI6MjAxOH0=","acl":{"read_users":{"alice":true},"read_write_users":{"alice":true,"bob":true}}}]}]}\'\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Output")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"MEUCIQDOz5CZKIlK/t4M/rnxU6Hy0saDDCl2RprtnFIkttE+RgIgGwGF6P5rbDlSTh2DREXyl1etTeHf+TYeCLpOJ3WE2jU=\n")),(0,r.kt)("h3",{id:"42-create-key3-update-key2-and-delete-key1"},"4.2) Create ",(0,r.kt)("inlineCode",{parentName:"h3"},"key3"),", update ",(0,r.kt)("inlineCode",{parentName:"h3"},"key2"),", and delete ",(0,r.kt)("inlineCode",{parentName:"h3"},"key1")),(0,r.kt)("p",null,"Now that we have the required data in the server, we can create, update, and delete within a single transaction."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},' curl \\\n   -H "Content-Type: application/json" \\\n   -H "TxTimeout: 2s" \\\n   -X POST http://127.0.0.1:6001/data/tx \\\n   --data \'{\n    "payload": {\n        "must_sign_user_ids": [\n            "alice"\n        ],\n        "tx_id": "1b6d6414-91ac-efgh-9723-1f31712add83",\n        "db_operations": [\n            {\n                "db_name": "db2",\n                 "data_reads": [\n                    {\n                        "key": "key1",\n                        "version": {\n                            "block_num": 7\n                        }\n                    },\n                    {\n                        "key": "key2",\n                        "version": {\n                            "block_num": 7\n                        }\n                    }\n                ],\n                "data_writes": [\n                    {\n                        "key": "key3",\n                        "value": "eyJuYW1lIjoiZGVmIiwiYWdlIjoxOSwiZ3JhZHVhdGVkIjpmYWxzZX0="\n                    },\n                    {\n                        "key": "key2",\n                        "value": "eyJkZWdyZWUiOiJQaC5EIiwieWVhciI6MjAxOX0=",\n                        "acl": {\n                            "read_users": {\n                                "alice": true\n                            },\n                            "read_write_users": {\n                                "alice": true,\n                                "bob": true\n                            }\n                        }\n                    }\n                ],\n                "data_deletes": [\n                    {\n                        "key": "key1"\n                    }\n                ]\n            }\n        ]\n    },\n    "signatures": {\n        "alice": "MEQCIG4+RtISyo/3ZEkwKVg1gCz9GrcUpgkuMPESz6LDcudyAiBDbiF74lNxmX1T1xK+a6iUqiyd3Z5NjeFhO6j5YxW+kg=="\n    }\n}\'\n')),(0,r.kt)("p",null,"In the above transaction's payload, it can be seen that the payload contains ",(0,r.kt)("inlineCode",{parentName:"p"},"data_reads"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"data_writes"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"data_deletes"),".\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"data_reads")," contains the version of the ",(0,r.kt)("inlineCode",{parentName:"p"},"key1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"key2"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"data_writes")," contains the new key ",(0,r.kt)("inlineCode",{parentName:"p"},"key3")," and the updated ",(0,r.kt)("inlineCode",{parentName:"p"},"key2"),".\nFinally, the ",(0,r.kt)("inlineCode",{parentName:"p"},"data_deletes")," holds the key ",(0,r.kt)("inlineCode",{parentName:"p"},"key1")," to be deleted."),(0,r.kt)("p",null,"The signature on the payload is computed as shown below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'./bin/signer -privatekey=deployment/sample/crypto/alice/alice.key \\\n    -data=\'{"must_sign_user_ids":["alice"],"tx_id":"1b6d6414-91ac-efgh-9723-1f31712add83","db_operations":[{"db_name":"db2","data_reads":[{"key":"key1","version":{"block_num":7}},{"key":"key2","version":{"block_num":7}}],"data_writes":[{"key":"key3","value":"eyJuYW1lIjoiZGVmIiwiYWdlIjoxOSwiZ3JhZHVhdGVkIjpmYWxzZX0="},{"key":"key2","value":"eyJkZWdyZWUiOiJQaC5EIiwieWVhciI6MjAxOX0=","acl":{"read_users":{"alice":true},"read_write_users":{"alice":true,"bob":true}}}],"data_deletes":[{"key":"key1"}]}]}\'\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Output")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"MEQCIG4+RtISyo/3ZEkwKVg1gCz9GrcUpgkuMPESz6LDcudyAiBDbiF74lNxmX1T1xK+a6iUqiyd3Z5NjeFhO6j5YxW+kg==\n")),(0,r.kt)("h3",{id:"43-check-the-non-existence-of-key1"},"4.3) Check the non-existence of ",(0,r.kt)("inlineCode",{parentName:"h3"},"key1")),(0,r.kt)("p",null,"Let's ensure the deletion of ",(0,r.kt)("inlineCode",{parentName:"p"},"key1"),"."),(0,r.kt)("p",null,"First, we need to compute the signature to be set in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Signature")," header field. The signature is computed on the\ndata ",(0,r.kt)("inlineCode",{parentName:"p"},'{"user_id":"alice","db_name":"db2","key":"key1"}')," as shown below by the user who submits the query, i.e., alice."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'./bin/signer -privatekey=deployment/sample/crypto/alice/alice.key \\\n    -data=\'{"user_id":"alice","db_name":"db2","key":"key1"}\'\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Output")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"MEUCIQCQWTeWyDwbj2ARFHQTH3pgsplOTrpW6XaC8mC/TODaJgIgIplpD5DB/SSNmhh42qLpITCJc66Z75mcHP3AWsS3zcw=\n")),(0,r.kt)("p",null,"Let's execute the following ",(0,r.kt)("inlineCode",{parentName:"p"},"cURL")," command to fetch ",(0,r.kt)("inlineCode",{parentName:"p"},"key1"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl \\\n     -H "Content-Type: application/json" \\\n     -H "UserID: alice" \\\n     -H "Signature: MEUCIQCQWTeWyDwbj2ARFHQTH3pgsplOTrpW6XaC8mC/TODaJgIgIplpD5DB/SSNmhh42qLpITCJc66Z75mcHP3AWsS3zcw=" \\\n     -X GET http://127.0.0.1:6001/data/db2/key1 | jq .\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Output")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-webmanifest"},'{\n  "response": {\n    "header": {\n      "nodeID": "bdb-node-1"\n    }\n  }\n  "signature": "MEYCIQCVdcbqmwIQDLkwYiK2tmOMwHI0GbWFX6kMMPo4VBORpgIhAMBBvsjCjL8LkogH06m58KefvnMOncLy7uFobh4XNNvI"\n}\n')),(0,r.kt)("p",null,"As ",(0,r.kt)("inlineCode",{parentName:"p"},"key1")," does not exist, the result is empty."),(0,r.kt)("h3",{id:"44-check-the-updated-key2"},"4.4) Check the updated ",(0,r.kt)("inlineCode",{parentName:"h3"},"key2")),(0,r.kt)("p",null,"Let's see whether ",(0,r.kt)("inlineCode",{parentName:"p"},"key2")," has been updated from ",(0,r.kt)("inlineCode",{parentName:"p"},"year: 2018")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"year: 2019"),"."),(0,r.kt)("p",null,"First, compute the signature to be set in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Signature")," header field as shown below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'./bin/signer -privatekey=deployment/sample/crypto/alice/alice.key \\\n    -data=\'{"user_id":"alice","db_name":"db2","key":"key2"}\'\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Output")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"MEUCIE4wF1nNbUCZJD2WbhwnJULRRYn9Yj+sD3Ev8zvlMRgkAiEA6vAC0RuzNJ2PiAiyhgtlzY+edbcX59ELZCi9ZfqFHCs=\n")),(0,r.kt)("p",null,"Second, execute the following ",(0,r.kt)("inlineCode",{parentName:"p"},"cURL")," command to fetch ",(0,r.kt)("inlineCode",{parentName:"p"},"key2"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl \\\n    -H "Content-Type: application/json" \\\n    -H "UserID: alice" \\\n    -H "Signature: MEUCIE4wF1nNbUCZJD2WbhwnJULRRYn9Yj+sD3Ev8zvlMRgkAiEA6vAC0RuzNJ2PiAiyhgtlzY+edbcX59ELZCi9ZfqFHCs=" \\\n    -X GET http://127.0.0.1:6001/data/db2/key2 | read json; ./base64_decoder -getresponse=$json | jq .\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Output")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-webmanifest"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "value": "{\\"degree\\":\\"Ph.D\\",\\"year\\":2019}",\n    "metadata": {\n      "version": {\n        "block_num": 8\n      },\n      "access_control": {\n        "read_users": {\n          "alice": true\n        },\n        "read_write_users": {\n          "alice": true,\n          "bob": true\n        }\n      }\n    }\n  },\n  "signature": "MEUCIBIvtHxzpA2c/W96KK50VUke+Ggu5Qs0+Ccps1L1/TY9AiEA7kbYlS9+7iTU4xWF9KHMo/ZlVpFV+cWSErn0LaZ4rPk="\n}\n')),(0,r.kt)("p",null,"From the output, we can see that the ",(0,r.kt)("inlineCode",{parentName:"p"},"year")," field in the value has changed from ",(0,r.kt)("inlineCode",{parentName:"p"},"2018")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"2019"),". After the update,\nthe version has changed."),(0,r.kt)("h3",{id:"45-check-the-newly-created-key3"},"4.5) Check the newly created ",(0,r.kt)("inlineCode",{parentName:"h3"},"key3")),(0,r.kt)("p",null,"Let's fetch ",(0,r.kt)("inlineCode",{parentName:"p"},"key3"),"."),(0,r.kt)("p",null,"First, compute the signature on the data as shown below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'./bin/signer -privatekey=deployment/sample/crypto/alice/alice.key \\\n    -data=\'{"user_id":"alice","db_name":"db2","key":"key3"}\'\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Output")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"MEQCIEyna9lmuJzyBjlvPQPxL4iRd5LyxpZWQDCqs146MYuOAiBL05QRAHOOSjIHzZhYiv7wm8Xfpviyu0EWdlC9SemHaw==\n")),(0,r.kt)("p",null,"Second, execute the following ",(0,r.kt)("inlineCode",{parentName:"p"},"cURL")," command to fetch ",(0,r.kt)("inlineCode",{parentName:"p"},"key3"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'curl \\\n    -H "Content-Type: application/json" \\\n    -H "UserID: alice" \\\n    -H "Signature: MEQCIEyna9lmuJzyBjlvPQPxL4iRd5LyxpZWQDCqs146MYuOAiBL05QRAHOOSjIHzZhYiv7wm8Xfpviyu0EWdlC9SemHaw==" \\\n    -X GET http://127.0.0.1:6001/data/db2/key3 | read json; cmd/base64_decoder/base64_decoder -getresponse=$json | jq .\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Output")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-webmanifest"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "value": "{\\"name\\":\\"def\\",\\"age\\":19,\\"graduated\\":false}",\n    "metadata": {\n      "version": {\n        "block_num": 8\n      }\n    }\n  },\n  "signature": "MEUCIFwf4I8jZZwJelStDvj0hf+sLAAM4EGKN7C/vjC8sbxzAiEA05nIOMhrSPYW49XHn1ZTM6BuS6Y4xVhZRPbnlM6BotQ="\n}\n')),(0,r.kt)("h2",{id:"5-operations-on-multiple-databases-in-a-single-transaction"},"5) Operations on Multiple Databases in a Single Transaction"),(0,r.kt)("p",null,"A data transaction can access or modify more than one user database in a transaction. In the below example,\nwe perform operations on two databases, ",(0,r.kt)("inlineCode",{parentName:"p"},"db1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"db2"),", within a single transaction."),(0,r.kt)("h3",{id:"51-update-alices-privileges"},"5.1) Update ",(0,r.kt)("inlineCode",{parentName:"h3"},"alice"),"'s privileges"),(0,r.kt)("p",null,"As both ",(0,r.kt)("inlineCode",{parentName:"p"},"alice")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"bob")," have only read permission on the database ",(0,r.kt)("inlineCode",{parentName:"p"},"db1"),", first we update the privilege of ",(0,r.kt)("inlineCode",{parentName:"p"},"alice"),"\nto have read-write permission on ",(0,r.kt)("inlineCode",{parentName:"p"},"db1")," as shown below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},' curl \\\n   -H "Content-Type: application/json" \\\n   -H "TxTimeout: 2s" \\\n   -X POST http://127.0.0.1:6001/user/tx \\\n   --data \'{\n    "payload": {\n        "user_id": "admin",\n        "tx_id": "1b6d6414-9b58-45d5-9723-1f31712add02",\n        "user_reads": [\n            {\n                "user_id": "alice",\n                "version": {\n                    "block_num": 3\n                }\n            }\n        ],\n        "user_writes": [\n            {\n                "user": {\n                    "id": "alice",\n                    "certificate": "MIIBsjCCAVigAwIBAgIRAJp7i/UhOnaawHTSdkzxR1QwCgYIKoZIzj0EAwIwHjEcMBoGA1UEAxMTQ2FyIHJlZ2lzdHJ5IFJvb3RDQTAeFw0yMTA2MTYxMTEzMjdaFw0yMjA2MTYxMTE4MjdaMCQxIjAgBgNVBAMTGUNhciByZWdpc3RyeSBDbGllbnQgYWxpY2UwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASdCmAgHdqck7uhAK5siEF/O1EIUEIYtiR3XVEjbVhNe/6GXFShtsSThXYL9/XK6p4qF4oSy9j/PURMGnWbzSnso3EwbzAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAU7nVzp7gto++BPlj5KAF1IA62TNEwDwYDVR0RBAgwBocEfwAAATAKBggqhkjOPQQDAgNIADBFAiEAsRZlR4sDyxS//BJnYpC684EWu1hO/JU8rkNW6Nn0FFQCIH/p6m6ELkLNQpx+1QJsWWtH/LdW94WinVylhuA4jggQ",\n                    "privilege": {\n                        "db_permission": {\n                            "db1": 1,\n                            "db2": 1\n                        }\n                    }\n                }\n            }\n        ]\n    },\n    "signature": "MEUCIQCEpAcCyD85v6TNooJP554XDLjyum5p0RauP3D0t8rXTwIgYq1ghLfvrulznP0tS311UrfCWXh/jgchRElRPiYZ3Ug="\n}\'\n')),(0,r.kt)("p",null,"To construct the above transaction payload, first we need to fetch the ",(0,r.kt)("inlineCode",{parentName:"p"},"alice")," user to capture the certificate and current privileges. For the sake of brevity, the fetch operation is not shown here. Next, we need to construct the above payload. In the ",(0,r.kt)("inlineCode",{parentName:"p"},"user_reads")," field,\nwe set the version that  would be used during multi-version concurrency control. The ",(0,r.kt)("inlineCode",{parentName:"p"},"user_writes")," field holds the updated privileges where the read-only permission on ",(0,r.kt)("inlineCode",{parentName:"p"},"db1")," denoted by ",(0,r.kt)("inlineCode",{parentName:"p"},'"db1":0')," has been changed to ",(0,r.kt)("inlineCode",{parentName:"p"},'"db1":1'),"."),(0,r.kt)("p",null,"The signature on the payload is computed using the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'./bin/signer -privatekey=deployment/sample/crypto/admin/admin.key \\\n    -data=\'{"user_id":"admin","tx_id":"1b6d6414-9b58-45d5-9723-1f31712add02","user_reads":[{"user_id":"alice","version":{"block_num":3}}],"user_writes":[{"user":{"id":"alice","certificate":"MIIBsjCCAVigAwIBAgIRAJp7i/UhOnaawHTSdkzxR1QwCgYIKoZIzj0EAwIwHjEcMBoGA1UEAxMTQ2FyIHJlZ2lzdHJ5IFJvb3RDQTAeFw0yMTA2MTYxMTEzMjdaFw0yMjA2MTYxMTE4MjdaMCQxIjAgBgNVBAMTGUNhciByZWdpc3RyeSBDbGllbnQgYWxpY2UwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASdCmAgHdqck7uhAK5siEF/O1EIUEIYtiR3XVEjbVhNe/6GXFShtsSThXYL9/XK6p4qF4oSy9j/PURMGnWbzSnso3EwbzAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAU7nVzp7gto++BPlj5KAF1IA62TNEwDwYDVR0RBAgwBocEfwAAATAKBggqhkjOPQQDAgNIADBFAiEAsRZlR4sDyxS//BJnYpC684EWu1hO/JU8rkNW6Nn0FFQCIH/p6m6ELkLNQpx+1QJsWWtH/LdW94WinVylhuA4jggQ","privilege":{"db_permission":{"db1":1,"db2":1}}}}]}\'\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Output")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"MEUCIQCEpAcCyD85v6TNooJP554XDLjyum5p0RauP3D0t8rXTwIgYq1ghLfvrulznP0tS311UrfCWXh/jgchRElRPiYZ3Ug=\n")),(0,r.kt)("p",null,"Now that ",(0,r.kt)("inlineCode",{parentName:"p"},"alice")," has read-write permission on both ",(0,r.kt)("inlineCode",{parentName:"p"},"db1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"db2"),", we can perform the multi-database operation."),(0,r.kt)("h3",{id:"52-create-key1-in-db1-and-key1-in-db2"},"5.2) Create ",(0,r.kt)("inlineCode",{parentName:"h3"},"key1")," in ",(0,r.kt)("inlineCode",{parentName:"h3"},"db1")," and ",(0,r.kt)("inlineCode",{parentName:"h3"},"key1")," in ",(0,r.kt)("inlineCode",{parentName:"h3"},"db2")),(0,r.kt)("p",null,"Let's create"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"key1")," with value ",(0,r.kt)("inlineCode",{parentName:"li"},"v")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"db1")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"key1")," with value ",(0,r.kt)("inlineCode",{parentName:"li"},"v")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"db2"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},' curl \\\n   -H "Content-Type: application/json" \\\n   -H "TxTimeout: 2s" \\\n   -X POST http://127.0.0.1:6001/data/tx \\\n   --data \'{\n    "payload": {\n        "must_sign_user_ids": [\n            "alice"\n        ],\n        "tx_id": "1b6d6414-91af-abcd-efgh-1f31712add83",\n        "db_operations": [\n            {\n                "db_name": "db1",\n                "data_reads": [\n                    {\n                        "key": "key1"\n                    }\n                ],\n                "data_writes": [\n                    {\n                        "key": "key1",\n                        "value": "eyJuYW1lIjoiYWJjIiwiYWdlIjozMiwiZ3JhZHVhdGVkIjp0cnVlfQ==",\n                        "acl": {\n                            "read_users": {\n                                "alice": true\n                            }\n                        }\n                    }\n                ]\n            },\n            {\n                "db_name": "db2",\n                "data_reads": [\n                    {\n                        "key": "key1"\n                    }\n                ],\n                "data_writes": [\n                    {\n                        "key": "key1",\n                        "value": "eyJkZWdyZWUiOiJQaC5EIiwieWVhciI6MjAxOH0=",\n                        "acl": {\n                            "read_users": {\n                                "alice": true\n                            },\n                            "read_write_users": {\n                                "alice": true,\n                                "bob": true\n                            }\n                        }\n                    }\n                ]\n            }\n        ]\n    },\n    "signatures": {\n        "alice": "MEQCIHYKWmSmsfrnyUKpKSH89K8BNAIO1/IW/uprJeHDu6mGAiBQTzVCiwm/t63pJtyUQ34AnOSk3apZFwFMz0GYXzNAaA=="\n    }\n}\'\n')),(0,r.kt)("p",null,"To perform operations on multiple databases, we can put one entry per database in the ",(0,r.kt)("inlineCode",{parentName:"p"},"db_operations")," field.\nIn the above command, we have one entry per ",(0,r.kt)("inlineCode",{parentName:"p"},"db1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"db2"),". Both entries hold ",(0,r.kt)("inlineCode",{parentName:"p"},"data_reads")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"data_writes"),"\nfields with ",(0,r.kt)("inlineCode",{parentName:"p"},"key1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"key1"),", respectively."),(0,r.kt)("p",null,"The signature on the payload is computed using the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'./bin/signer -privatekey=deployment/sample/crypto/alice/alice.key \\\n    -data=\'{"must_sign_user_ids":["alice"],"tx_id":"1b6d6414-91af-abcd-efgh-1f31712add83","db_operations":[{"db_name":"db1","data_reads":[{"key":"key1"}],"data_writes":[{"key":"key1","value":"eyJuYW1lIjoiYWJjIiwiYWdlIjozMiwiZ3JhZHVhdGVkIjp0cnVlfQ==","acl":{"read_users":{"alice":true}}}]},{"db_name":"db2","data_reads":[{"key":"key1"}],"data_writes":[{"key":"key1","value":"eyJkZWdyZWUiOiJQaC5EIiwieWVhciI6MjAxOH0=","acl":{"read_users":{"alice":true},"read_write_users":{"alice":true,"bob":true}}}]}]}\'\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Output")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"MEQCIHYKWmSmsfrnyUKpKSH89K8BNAIO1/IW/uprJeHDu6mGAiBQTzVCiwm/t63pJtyUQ34AnOSk3apZFwFMz0GYXzNAaA==\n")),(0,r.kt)("h3",{id:"53-check-the-existence-of-key1-in-db1"},"5.3) Check the existence of ",(0,r.kt)("inlineCode",{parentName:"h3"},"key1")," in ",(0,r.kt)("inlineCode",{parentName:"h3"},"db1")),(0,r.kt)("p",null,"Let's fetch ",(0,r.kt)("inlineCode",{parentName:"p"},"key1")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"db1")," to ensure that the key has been created successfully."),(0,r.kt)("p",null,"First, the signature to be set in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Signature")," header field needs to be computed as shown below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'./bin/signer -privatekey=deployment/sample/crypto/alice/alice.key \\\n    -data=\'{"user_id":"alice","db_name":"db1","key":"key1"}\'\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Output")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"MEUCIQCujK1egalHITJ378hf60/RZaUFOkGzGkFaBWjO2fQilgIgX2htCyuGJsB8NHynIdH0T5SRjNMeWrzK6AwcSoFsiLY=\n")),(0,r.kt)("p",null,"Next, execute the following command by setting the ",(0,r.kt)("inlineCode",{parentName:"p"},"UserID")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Signature")," header to fetch ",(0,r.kt)("inlineCode",{parentName:"p"},"key1")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"db1"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},' curl \\\n      -H "Content-Type: application/json" \\\n      -H "UserID: alice" \\\n      -H "Signature: MEUCIQCujK1egalHITJ378hf60/RZaUFOkGzGkFaBWjO2fQilgIgX2htCyuGJsB8NHynIdH0T5SRjNMeWrzK6AwcSoFsiLY=" \\\n      -X GET http://127.0.0.1:6001/data/db1/key1 | read json; ./base64_decoder -getresponse=$json | jq .\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Output")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-webmanifest"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "value": "{\\"name\\":\\"abc\\",\\"age\\":32,\\"graduated\\":true}",\n    "metadata": {\n      "version": {\n        "block_num": 11\n      },\n      "access_control": {\n        "read_users": {\n          "alice": true\n        }\n      }\n    }\n  },\n  "signature": "MEUCIECyz3V8GyJvsupm5IXdPLcAOeCjQJimo+I4e8VlHyUJAiEAzl3gILPF++H6AXZTO3hlRBDVYCVd1zwIdsvC3McYTgU="\n}\n')),(0,r.kt)("h3",{id:"54-check-the-existence-of-key1-in-db2"},"5.4) Check the existence of ",(0,r.kt)("inlineCode",{parentName:"h3"},"key1")," in ",(0,r.kt)("inlineCode",{parentName:"h3"},"db2")),(0,r.kt)("p",null,"Let's fetch ",(0,r.kt)("inlineCode",{parentName:"p"},"key1")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"db2")," to ensure that the key has been created successfully."),(0,r.kt)("p",null,"First, the signature to be set in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Signature")," header field needs to be computed as shown below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'./bin/signer -privatekey=deployment/sample/crypto/bob/bob.key \\\n    -data=\'{"user_id":"bob","db_name":"db2","key":"key1"}\'\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Output")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"MEUCIA2i15BxJAYcwl7jeGgrqqr6C2xc3hbBNKJwdC8mmNgvAiEA+AzQiMi6VbCKSn/N011jrNTmz4JiZ/u1+QLryYaDuBg=\n")),(0,r.kt)("p",null,"Second, submit the query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},' curl \\\n    -H "Content-Type: application/json" \\\n    -H "UserID: bob" \\\n    -H "Signature: MEUCIA2i15BxJAYcwl7jeGgrqqr6C2xc3hbBNKJwdC8mmNgvAiEA+AzQiMi6VbCKSn/N011jrNTmz4JiZ/u1+QLryYaDuBg=" \\\n    -X GET http://127.0.0.1:6001/data/db2/key1 | read json; ./base64_decoder -getresponse=$json | jq .\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Output")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-webmanifest"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "value": "{\\"degree\\":\\"Ph.D\\",\\"year\\":2018}",\n    "metadata": {\n      "version": {\n        "block_num": 11\n      },\n      "access_control": {\n        "read_users": {\n          "alice": true\n        },\n        "read_write_users": {\n          "alice": true,\n          "bob": true\n        }\n      }\n    }\n  },\n  "signature": "MEUCIQCxVaLsp0gHWqzsuat7XdUY4OehLy2tN89viOzIpTajDgIgawoH+dBtI3tidwROYHGtkZmDE3RCgVtG24s7aFyTX1Q="\n}\n')))}c.isMDXComponent=!0}}]);