// Copyright IBM Corp. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
syntax = "proto3";

option go_package = "github.com/hyperledger-labs/orion-server/pkg/types";

package types;

import "configuration.proto";

// Block holds the chain information and transactions
message Block {
  BlockHeader header = 1;
  oneof Payload {
    DataTxEnvelopes data_tx_envelopes = 2;
    ConfigTxEnvelope config_tx_envelope = 3;
    DBAdministrationTxEnvelope db_administration_tx_envelope = 4;
    UserAdministrationTxEnvelope user_administration_tx_envelope = 5;
  }
  // Consensus protocol metadata
  ConsensusMetadata consensus_metadata = 6;
}

// BlockHeaderBase holds the block metadata and the chain information
// that computed before transaction validation
message BlockHeaderBase {
  uint64 number = 1;
  // Hash of (number - 1) BlockHeaderBase
  bytes previous_base_header_hash = 2;
  // Hash of BlockHeader of last block already committed to ledger
  bytes last_committed_block_hash = 3;
  // Number of last block already committed to ledger
  uint64 last_committed_block_num = 4;
}

// BlockHeader holds, in addition to base header, additional chain integrity information that is computed after transactions validation,
// including the state and transaction Merkle trees roots, skip-chain hashes, and transaction validation information.
message BlockHeader {
  BlockHeaderBase base_header = 1;
  // Skip chain hashed, based of BlockHeader hashed of blocks connected in blocks skip list
  repeated bytes skipchain_hashes = 2;
  // Root of Merkle tree that contains all transactions, including validation data
  bytes tx_merkle_tree_root_hash = 3;
  // Root hash of system wide state merkle-particia tree
  bytes state_merkle_tree_root_hash = 4;
  // Validation info for transactions in block.
  repeated ValidationInfo validation_info = 5;
}

message DataTxEnvelopes {
  repeated DataTxEnvelope envelopes = 1;
}

message DataTxEnvelope {
  DataTx payload = 1;
  map<string, bytes> signatures = 2;
}

message ConfigTxEnvelope {
  ConfigTx payload = 1;
  bytes signature = 2;
}

message DBAdministrationTxEnvelope {
  DBAdministrationTx payload = 1;
  bytes signature = 2;
}

message UserAdministrationTxEnvelope {
  UserAdministrationTx payload = 1;
  bytes signature = 2;
}


message DataTx {
  repeated string must_sign_user_ids = 1;
  string tx_id = 2;
  repeated DBOperation db_operations = 3;
}

message DBOperation {
  string db_name = 3;
  repeated DataRead data_reads = 4;
  repeated DataWrite data_writes = 5;
  repeated DataDelete data_deletes = 6;
}


// DataRead hold a read key and its version
message DataRead {
  string key = 1;
  Version version = 2;
}

// DataWrite hold a write including a delete
message DataWrite {
  string key = 1;
  bytes value = 2;
  AccessControl acl = 3;
}

message DataDelete {
  string key = 1;
}

message ConfigTx {
  string user_id = 1;
  string tx_id = 2;
  Version read_old_config_version = 3;
  ClusterConfig new_config = 4;
}

message DBAdministrationTx {
    string user_id = 1;
    string tx_id = 2;
    repeated string create_dbs = 3;
    repeated string delete_dbs = 4;
    map<string, DBIndex> dbs_index = 5;
}

message DBIndex {
    map<string, IndexAttributeType> attribute_and_type = 1;
}

message UserAdministrationTx {
  string user_id = 1;
  string tx_id = 2;
  repeated UserRead user_reads = 3;
  repeated UserWrite user_writes = 4;
  repeated UserDelete user_deletes = 5;
}

message UserRead {
  string user_id = 1;
  Version version = 2;
}

message UserWrite {
  User user = 1;
  AccessControl acl = 2;
}

message UserDelete {
  string user_id = 1;
}

message Metadata {
  Version version = 1;
  AccessControl access_control = 2;
}

message Version {
  uint64 block_num = 1;
  uint64 tx_num = 2;
}

message AccessControl {
  map<string, bool> read_users = 1;
  map<string, bool> read_write_users = 2;
  enum write_policy {
    ANY = 0;
    ALL = 1;
  }
  write_policy sign_policy_for_write = 3;
}

message KVWithMetadata{
  string key = 1;
  bytes value = 2;
  Metadata metadata = 3;
}

message ValueWithMetadata{
  bytes value = 1;
  Metadata metadata = 2;
}

message Digest {
  // Ledger merkle tree root
  bytes root_hash = 1;
  // Ledger height
  uint64 height = 2;
}

message ValidationInfo {
  Flag flag = 1;
  string reason_if_invalid = 2;
}

message TxProof {
  BlockHeader header = 1;
  repeated bytes path = 2;
}

message BlockProof {
  uint64 block_number = 1;
  repeated BlockHeader path = 2;
}

message TxReceipt {
  BlockHeader header = 1;
  uint64 tx_index = 2;
}

enum Flag {
  VALID = 0;
  INVALID_MVCC_CONFLICT_WITHIN_BLOCK = 1;
  INVALID_MVCC_CONFLICT_WITH_COMMITTED_STATE = 2;
  INVALID_DATABASE_DOES_NOT_EXIST = 3;
  INVALID_NO_PERMISSION = 4;
  INVALID_INCORRECT_ENTRIES = 5;
  INVALID_UNAUTHORISED = 6;
  INVALID_MISSING_SIGNATURE = 7;
}

enum IndexAttributeType {
  NUMBER = 0;
  STRING = 1;
  BOOLEAN = 2;
}

// ConsensusMetadata holds data specific to the consensus protocol ordering the block.
// The field prefix indicated the protocil used, e.g. "raft_*".
message ConsensusMetadata {
  // The Raft term associated with the block
  uint64 raft_term = 1;
  // The Raft index associated with the block
  uint64 raft_index = 2;
}

// AugmentedBlockHeader contains in addition to the block header, an array of transaction IDs (TxID). This array
// corresponds to the validation info array in the block header and is keyed by the transaction index.
message AugmentedBlockHeader {
  // The block header.
  BlockHeader header = 1;
  // An array of transaction IDs (TxID).
  repeated string tx_ids = 2;
}