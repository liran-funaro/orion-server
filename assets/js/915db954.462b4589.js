"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8520],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return k}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(r),k=a,m=d["".concat(s,".").concat(k)]||d[k]||u[k]||o;return r?n.createElement(m,i(i({ref:t},p),{},{components:r})):n.createElement(m,i({ref:t},p))}));function k(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2281:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),i=["components"],l={id:"tx-merkle-tree",title:"Transaction Merkle Tree"},s=void 0,c={unversionedId:"architecture-and-design/tx-merkle-tree",id:"architecture-and-design/tx-merkle-tree",isDocsHomePage:!1,title:"Transaction Merkle Tree",description:"Merkle tree",source:"@site/docs/architecture-and-design/tx-merkle-tree.md",sourceDirName:"architecture-and-design",slug:"/architecture-and-design/tx-merkle-tree",permalink:"/orion-server/docs/architecture-and-design/tx-merkle-tree",tags:[],version:"current",frontMatter:{id:"tx-merkle-tree",title:"Transaction Merkle Tree"},sidebar:"Documentation",previous:{title:"State Merkle Patricia Tree",permalink:"/orion-server/docs/architecture-and-design/state-merkle-patricia-tree"},next:{title:"Block Skip Chain",permalink:"/orion-server/docs/architecture-and-design/block-skip-chain"}},p=[{value:"Merkle tree",id:"merkle-tree",children:[{value:"Merkle tree proof example",id:"merkle-tree-proof-example",children:[],level:3},{value:"Orion Merkle tree API",id:"orion-merkle-tree-api",children:[],level:3}],level:2}],u={toc:p};function d(e){var t=e.components,l=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"merkle-tree"},"Merkle tree"),(0,o.kt)("p",null,"From Wikipedia: \u201cA Merkle tree is a tree in which every leaf node is labeled with the cryptographic hash of a data block, and every non-leaf node is labeled with the cryptographic hash of the labels of its child nodes.\u201d\n",(0,o.kt)("img",{alt:"Merkle tree",src:r(4327).Z})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In the blockchain world, Merkle trees are usually used to verify the existence and validity of transactions in a block."),(0,o.kt)("li",{parentName:"ul"},"Thanks to the tree properties, to prove a specific transaction existence in a block, there's no need to expose the rest of the block transactions, just the content of the transaction itself and the list of ",(0,o.kt)("em",{parentName:"li"},"log(N)")," hashes."),(0,o.kt)("li",{parentName:"ul"},"Usually, only the Merkle tree root hash is exposed to end-user.")),(0,o.kt)("h3",{id:"merkle-tree-proof-example"},"Merkle tree proof example"),(0,o.kt)("p",null,"Here is an example of proof generation and verification, based on an example tree",(0,o.kt)("img",{alt:"tree",src:r(5878).Z})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To prove that ",(0,o.kt)("inlineCode",{parentName:"p"},"Tx3")," is part of the block Merkle tree with root ",(0,o.kt)("strong",{parentName:"p"},"B3..")," , we need ",(0,o.kt)("inlineCode",{parentName:"p"},"Tx3"),", its hash \u2013 ",(0,o.kt)("strong",{parentName:"p"},"15..")," and ",(0,o.kt)("strong",{parentName:"p"},"78..")," (hash of sibling transaction),  ",(0,o.kt)("strong",{parentName:"p"},"A2..")," (sibling in Merkle tree), and ",(0,o.kt)("strong",{parentName:"p"},"F5..")," (sibling in Merkle tree).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"So, the final proof is {",(0,o.kt)("strong",{parentName:"p"},"15.."),", ",(0,o.kt)("strong",{parentName:"p"},"78.."),", ",(0,o.kt)("strong",{parentName:"p"},"A2.."),", ",(0,o.kt)("strong",{parentName:"p"},"F5.."),", ",(0,o.kt)("strong",{parentName:"p"},"B3.."),"}")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Proof validation: ",(0,o.kt)("em",{parentName:"p"},"hash(hash(hash(",(0,o.kt)("strong",{parentName:"em"},"15..")," || ",(0,o.kt)("strong",{parentName:"em"},"78.."),") || ",(0,o.kt)("strong",{parentName:"em"},"A2.."),") || ",(0,o.kt)("strong",{parentName:"em"},"F5.."),") == ",(0,o.kt)("strong",{parentName:"em"},"B3..")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This is the exact structure we used to prove a specific transaction's existence in a block.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We store only the Merkle tree root hash as part of the block header and recalculate the tree on demand."))),(0,o.kt)("h3",{id:"orion-merkle-tree-api"},"Orion Merkle tree API"),(0,o.kt)("p",null,"Server side - Merkle tree implementation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"// Node struct keep data for Merkle tree node. For now, it is binary Merkle tree\ntype Node struct {\n... \n}\n\n// BuildTreeForBlockTx builds Merkle tree from block transactions.\n// Each data leaf addressed by its index inside block \nfunc BuildTreeForBlockTx(block *types.Block) (*Node, error)\n\n// Proof calculate intermediate hashes between leaf with given index and root (caller node)\nfunc (n *Node) Proof(leafIndex int) ([][]byte, error) {\n    path, err := n.findPath(leafIndex)\n    if err != nil {\n        return nil, err\n}\n")),(0,o.kt)("p",null,"Protobuf's transaction proof message:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},"message GetTxProofQuery {\n  string user_id = 1;\n  uint64 block_number = 2;\n  uint64 tx_index = 3;\n}\n\nmessage GetTxProofResponse {\n  ResponseHeader header = 1;\n  repeated bytes hashes = 2;\n}\n")),(0,o.kt)("p",null,"SDK side - Transaction proof validation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type TxProof struct {\n    intermediateHashes [][]byte\n}\n\nfunc (p *TxProof) Verify(receipt *types.TxReceipt, tx proto.Message) (bool, error)\n")))}d.isMDXComponent=!0},5878:function(e,t,r){t.Z=r.p+"assets/images/BlockMerkleTree-c9e947f370cb33d8321a6df9271be503.png"},4327:function(e,t,r){t.Z=r.p+"assets/images/MerkleTree1-0ef468ab69695d4a0769af6b1066a9b6.png"}}]);