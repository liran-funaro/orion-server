"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8820],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return p}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=u(t),p=i,f=d["".concat(c,".").concat(p)]||d[p]||g[p]||o;return t?r.createElement(f,a(a({ref:n},l),{},{components:t})):r.createElement(f,a({ref:n},l))}));function p(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var u=2;u<o;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8985:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return l},default:function(){return d}});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),a=["components"],s={id:"cluster-config",title:"Query the Cluster Configuration"},c=void 0,u={unversionedId:"getting-started/queries/curl/cluster-config",id:"getting-started/queries/curl/cluster-config",isDocsHomePage:!1,title:"Query the Cluster Configuration",description:"The cluster configuration includes the node, admin, and consensus configuration (used for replication).",source:"@site/docs/getting-started/queries/curl/cluster-config.md",sourceDirName:"getting-started/queries/curl",slug:"/getting-started/queries/curl/cluster-config",permalink:"/orion-server/docs/getting-started/queries/curl/cluster-config",tags:[],version:"current",frontMatter:{id:"cluster-config",title:"Query the Cluster Configuration"}},l=[],g={toc:l};function d(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The cluster configuration includes the node, admin, and consensus configuration (used for replication).\nWhen the ",(0,o.kt)("inlineCode",{parentName:"p"},"bdb")," server boots up for the first time, it reads nodes, admins, and the consensus configuration\npresent in the configuration file ",(0,o.kt)("inlineCode",{parentName:"p"},"config.yml")," and creates a genesis block. The user can query\nthe current cluster configuration by issuing a ",(0,o.kt)("inlineCode",{parentName:"p"},"GET")," request on the ",(0,o.kt)("inlineCode",{parentName:"p"},"/config/tx")," endpoint."),(0,o.kt)("p",null,"The REST endpoint for querying the configuration is ",(0,o.kt)("inlineCode",{parentName:"p"},"/config/tx")," and it does not require any\ninputs or additional parameters from the user. Hence, the user need only to sign with their user id and\nset the signature in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Signature")," header."),(0,o.kt)("p",null,"Specifically, the user needs to sign the following JSON data ",(0,o.kt)("inlineCode",{parentName:"p"},'{"user_id":"<userID>"}'),", where ",(0,o.kt)("inlineCode",{parentName:"p"},"<userID>"),"\nis the ID of the submitting user who is registered in the blockchain database node. In our example, the ",(0,o.kt)("inlineCode",{parentName:"p"},"admin")," user is the one who submits the request to the server. Hence, we need to use the admin's private\nkey to sign the ",(0,o.kt)("inlineCode",{parentName:"p"},'{"user_id":"admin"}')," as shown below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'./bin/signer -privatekey=deployment/sample/crypto/admin/admin.key -data=\'{"user_id":"admin"}\'\n')),(0,o.kt)("p",null,"The above command produces a digital signature and prints it as a base64-encoded string as shown below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"MEUCIQCMEdLgfFEOF+vgXLwbeOdUUWnGB5HH2ULkoz15jlk5DgIgbWXuoyqD4szob78hZYiau9LPdJLLqP3bAu7iV98BcW0=\n")),(0,o.kt)("p",null,"Once the signature is computed, we can issue a ",(0,o.kt)("inlineCode",{parentName:"p"},"GET")," request using the following ",(0,o.kt)("inlineCode",{parentName:"p"},"cURL")," command\nby setting the above signature string in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Signature")," header."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'curl \\\n   -H "Content-Type: application/json" \\\n   -H "UserID: admin" \\\n   -H "Signature: MEUCIQCMEdLgfFEOF+vgXLwbeOdUUWnGB5HH2ULkoz15jlk5DgIgbWXuoyqD4szob78hZYiau9LPdJLLqP3bAu7iV98BcW0=" \\\n   -X GET http://127.0.0.1:6001/config/tx | jq .\n')),(0,o.kt)("p",null,"A sample output of the above command is shown below. The actual content might change depending on the configuration specified in ",(0,o.kt)("inlineCode",{parentName:"p"},"config.yml"),".\nFor now, all users in the cluster can query the cluster configuration to identity the set of nodes, the IP address of each node, along with the listening port number, certificate of the node, etc..."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-webmanifest"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "config": {\n      "nodes": [\n        {\n          "id": "bdb-node-1",\n          "address": "127.0.0.1",\n          "port": 6001,\n          "certificate": "MIIBsjCCAVigAwIBAgIQYy4vf2+6qRtczxIkNb9fxjAKBggqhkjOPQQDAjAeMRwwGgYDVQQDExNDYXIgcmVnaXN0cnkgUm9vdENBMB4XDTIxMDYxNjExMTMyN1oXDTIyMDYxNjExMTgyN1owJTEjMCEGA1UEAxMaQ2FyIHJlZ2lzdHJ5IENsaWVudCBzZXJ2ZXIwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAARWWd8GA/dbkxTiNP7x/LoyAc85sfsIxcmiX+4nzzB3s4SXA+N8YMSiKpsi6gSOVkxKLu43lla2ajyL0Z4WqWvYo3EwbzAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAU7nVzp7gto++BPlj5KAF1IA62TNEwDwYDVR0RBAgwBocEfwAAATAKBggqhkjOPQQDAgNIADBFAiEAuyIC0jlV/KcyB8Cz2p3W4aojh+fDCeeRenMwvyP+EcACIDOjDiObMnb/2q2ceAKROr/rzJmakdjkNmw8A0bYL6Pb"\n        }\n      ],\n      "admins": [\n        {\n          "id": "admin",\n          "certificate": "MIIBsTCCAVigAwIBAgIRANDg6u+E+sdowdPBGXyoD9swCgYIKoZIzj0EAwIwHjEcMBoGA1UEAxMTQ2FyIHJlZ2lzdHJ5IFJvb3RDQTAeFw0yMTA2MTYxMTEzMjdaFw0yMjA2MTYxMTE4MjdaMCQxIjAgBgNVBAMTGUNhciByZWdpc3RyeSBDbGllbnQgYWRtaW4wWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAT9GYTj7ka7se8bEqclDdulRJnpay+EU/b4QUMiLl/9cB1iBgKegVXztZCcQs3S+XR1Y2b/1xSqMbPwHOV5kuUDo3EwbzAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAU7nVzp7gto++BPlj5KAF1IA62TNEwDwYDVR0RBAgwBocEfwAAATAKBggqhkjOPQQDAgNHADBEAiB09qz5bAyguEEI4HMUPIBqRTF3RBMjfTKrpIjBh1ai9gIgWLL0SNsD/5a4xjp+fol42npUY13mIpByYg56IW0TsBI="\n        }\n      ],\n      "cert_auth_config": {\n        "roots": [\n          "MIIBrDCCAVKgAwIBAgIQR6JzR6pbStB4cjbEtVAQrzAKBggqhkjOPQQDAjAeMRwwGgYDVQQDExNDYXIgcmVnaXN0cnkgUm9vdENBMB4XDTIxMDYxNjExMTMyN1oXDTIyMDYxNjExMTgyN1owHjEcMBoGA1UEAxMTQ2FyIHJlZ2lzdHJ5IFJvb3RDQTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABNttDXwc6IkY7tS+jmTl1z7i6Aq+zhVnTrbhVpKPHReZDSgIyLOzRMvRMVkmyNq+K0Tqi83R/0gNRpVQVOVgUIejcjBwMA4GA1UdDwEB/wQEAwICpDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQU7nVzp7gto++BPlj5KAF1IA62TNEwDwYDVR0RBAgwBocEfwAAATAKBggqhkjOPQQDAgNIADBFAiEA/faZ857y9K/pCRHId67fC4ZBZJ+vs7vUkbLJrTPC+L4CIEVGUVou5T7Lnc+J3pHU15yDgr42/APzhRrBiRAa9FMC"\n        ]\n      },\n      "consensus_config": {\n        "algorithm": "raft",\n        "members": [\n          {\n            "node_id": "bdb-node-1",\n            "raft_id": 1,\n            "peer_host": "127.0.0.1",\n            "peer_port": 7050\n          }\n        ],\n        "raft_config": {\n          "tick_interval": "100ms",\n          "election_ticks": 50,\n          "heartbeat_ticks": 5,\n          "max_inflight_blocks": 50,\n          "snapshot_interval_size": 1000000000000\n        }\n      }\n    },\n    "metadata": {\n      "version": {\n        "block_num": 1\n      }\n    }\n  },\n  "signature": "MEUCIGaeLwhfXBb/s1k8sIzqCPy+OqkiNJS9EgeSZGlHqoHaAiEAwzyj0h4QHfwmuwBbjY21+huvbE3ltp8apGr6uP921kQ="\n}\n')))}d.isMDXComponent=!0}}]);