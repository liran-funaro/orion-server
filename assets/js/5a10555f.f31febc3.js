"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9028],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(n),m=a,k=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return n?r.createElement(k,i(i({ref:t},c),{},{components:n})):r.createElement(k,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var d=2;d<o;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1137:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return c},default:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={id:"simple-data-query",title:"Query Data Using Keys"},l=void 0,d={unversionedId:"getting-started/queries/gosdk/simple-data-query",id:"getting-started/queries/gosdk/simple-data-query",isDocsHomePage:!1,title:"Query Data Using Keys",description:"To query data using the key, we need to use a database context. The Get() method in the DataTxContext",source:"@site/docs/getting-started/queries/gosdk/simple-data-query.md",sourceDirName:"getting-started/queries/gosdk",slug:"/getting-started/queries/gosdk/simple-data-query",permalink:"/orion-server/docs/getting-started/queries/gosdk/simple-data-query",tags:[],version:"current",frontMatter:{id:"simple-data-query",title:"Query Data Using Keys"},sidebar:"Documentation",previous:{title:"Query User Information",permalink:"/orion-server/docs/getting-started/queries/gosdk/user"},next:{title:"Query Data Using Fields in a JSON object",permalink:"/orion-server/docs/getting-started/queries/gosdk/complex-data-query"}},c=[{value:"Source Code",id:"source-code",children:[],level:2},{value:"Source Code Commentary",id:"source-code-commentary",children:[],level:2}],p={toc:c};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"To query data using the key, we need to use a database context. The ",(0,o.kt)("inlineCode",{parentName:"p"},"Get()")," method in the ",(0,o.kt)("inlineCode",{parentName:"p"},"DataTxContext"),"\nretrieves a given key from a given database."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type DataTxContext interface {\n    .\n    ...\n    // Get existing key value\n    Get(dbName, key string) ([]byte, *types.Metadata, error)\n    ...\n    .\n}\n")),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"prerequisite")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"For the example shown here to work, we need to have"),(0,o.kt)("ul",{parentName:"div"},(0,o.kt)("li",{parentName:"ul"},"Two databases named ",(0,o.kt)("inlineCode",{parentName:"li"},"db1")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"db2")," in the Orion server. If you have not created these two databases,\nrefer to ",(0,o.kt)("a",{parentName:"li",href:"../../transactions/gosdk/dbtx#1-creation-of-databases"},"creates databases using SDK")," to create ",(0,o.kt)("inlineCode",{parentName:"li"},"db1")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"db2"),"."),(0,o.kt)("li",{parentName:"ul"},"Two users named ",(0,o.kt)("inlineCode",{parentName:"li"},"alice")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"bob"),". If you have not created these users already, refer to ",(0,o.kt)("a",{parentName:"li",href:"../../transactions/gosdk/usertx#1-addition-of-users"},"create users using SDK"),"."),(0,o.kt)("li",{parentName:"ul"},"The key ",(0,o.kt)("inlineCode",{parentName:"li"},"key2")," in database ",(0,o.kt)("inlineCode",{parentName:"li"},"db2"),". If you have not stored ",(0,o.kt)("inlineCode",{parentName:"li"},"key2")," in ",(0,o.kt)("inlineCode",{parentName:"li"},"db2")," already, refer to ",(0,o.kt)("a",{parentName:"li",href:"../../transactions/gosdk/datatx#1-creation-of-new-states-in-database"},"create states"))),(0,o.kt)("p",{parentName:"div"},"Finally, ",(0,o.kt)("a",{parentName:"p",href:"../../pre-requisite/gosdk#creating-a-connection-to-the-orion-cluster"},"Create a connection")," and\n",(0,o.kt)("a",{parentName:"p",href:"../../pre-requisite/gosdk#opening-a-database-session"},"Open a database session"),"."))),(0,o.kt)("h2",{id:"source-code"},"Source Code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n)\n\nfunc main() {\n    db, err := createConnection()\n    // if err is not nil, print and return\n\n    session, err := openSession(db, "bob")\n    // if err is not nil, print and return\n\n    tx, err := session.DataTx()\n    // if err is not nil, print and return\n\n    v, m, err := tx.Get("db2", "key1")\n    // if err is not nil, print and return\n\n    if v == nil {\n        fmt.Println("the database db2 does not have key1")\n        return\n    }\n\n    fmt.Println("value         :", string(v))\n    fmt.Println("version       :", m.Version)\n    fmt.Println("access control:", m.AccessControl)\n\n    err = tx.Abort()\n    // if err is not nil, print and return\n}\n')),(0,o.kt)("h2",{id:"source-code-commentary"},"Source Code Commentary"),(0,o.kt)("p",null,"For the sake of simplicity, not all ",(0,o.kt)("inlineCode",{parentName:"p"},"errors")," are handled in this code. Furthermore, the implementation of ",(0,o.kt)("inlineCode",{parentName:"p"},"createConnection()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"openSession()"),"\ncan be found ",(0,o.kt)("a",{parentName:"p",href:"../../pre-requisite/gosdk"},"here"),"."),(0,o.kt)("p",null,"Calling ",(0,o.kt)("inlineCode",{parentName:"p"},"session.DataTx()")," starts a new data transaction and returns the data transaction context. Note that we use this context only for query purposes and not for performing any operations on the data."),(0,o.kt)("p",null,"To fetch the key ",(0,o.kt)("inlineCode",{parentName:"p"},"key1")," in database ",(0,o.kt)("inlineCode",{parentName:"p"},"db2"),", we call ",(0,o.kt)("inlineCode",{parentName:"p"},'tx.Get("db2", "key1")'),". It returns"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"value"),(0,o.kt)("li",{parentName:"ol"},"metadata"),(0,o.kt)("li",{parentName:"ol"},"error")),(0,o.kt)("p",null,"The value is ",(0,o.kt)("inlineCode",{parentName:"p"},"[]byte"),". The metadata holds the version and access control as shown below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type Metadata struct {\n    Version              *Version\n    AccessControl        *AccessControl\n}\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Version")," denotes the version of the key fetched. It is denoted by a block number and a transaction number that last modified the key."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type Version struct {\n    BlockNum             uint64\n    TxNum                uint64\n}\n")),(0,o.kt)("p",null,"The ACL holds"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"ReadUsers"),": a list of users who can only read the key"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"ReadWriteUsers"),": a list of users who can read and write the key."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"SignPolicyForWrite"),": denotes whether signature of all users in the ReadWriteUsers is needed to perform writes to the key.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type AccessControl struct {\n    ReadUsers            map[string]bool\n    ReadWriteUsers       map[string]bool\n    SignPolicyForWrite   AccessControlWritePolicy\n}\n\ntype AccessControlWritePolicy int32\n\nconst (\n    AccessControl_ANY AccessControlWritePolicy = 0\n    AccessControl_ALL AccessControlWritePolicy = 1\n)\n")),(0,o.kt)("p",null,"Finally, we can abort the transaction by calling ",(0,o.kt)("inlineCode",{parentName:"p"},"tx.Abort()"),"."))}u.isMDXComponent=!0}}]);