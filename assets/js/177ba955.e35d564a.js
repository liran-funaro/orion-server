"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1077],{3905:function(e,r,t){t.d(r,{Zo:function(){return d},kt:function(){return p}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=n.createContext({}),s=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},d=function(e){var r=s(e.components);return n.createElement(l.Provider,{value:r},e.children)},f={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=s(t),p=o,g=u["".concat(l,".").concat(p)]||u[p]||f[p]||i;return t?n.createElement(g,a(a({ref:r},d),{},{components:t})):n.createElement(g,a({ref:r},d))}));function p(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=u;var c={};for(var l in r)hasOwnProperty.call(r,l)&&(c[l]=r[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var s=2;s<i;s++)a[s]=t[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1078:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return d},default:function(){return u}});var n=t(7462),o=t(3366),i=(t(7294),t(3905)),a=["components"],c={id:"ledger",title:"Ledger and Proof queries"},l=void 0,s={unversionedId:"getting-started/proofs-and-verification/gosdk/ledger",id:"getting-started/proofs-and-verification/gosdk/ledger",isDocsHomePage:!1,title:"Ledger and Proof queries",description:"Ledger API",source:"@site/docs/getting-started/proofs-and-verification/gosdk/ledger.md",sourceDirName:"getting-started/proofs-and-verification/gosdk",slug:"/getting-started/proofs-and-verification/gosdk/ledger",permalink:"/orion-server/docs/getting-started/proofs-and-verification/gosdk/ledger",tags:[],version:"current",frontMatter:{id:"ledger",title:"Ledger and Proof queries"}},d=[{value:"Ledger API",id:"ledger-api",children:[],level:3}],f={toc:d};function u(e){var r=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},f,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"ledger-api"},"Ledger API"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"type Ledger interface {\n    // GetBlockHeader returns block header from ledger\n    GetBlockHeader(blockNum uint64) (*types.BlockHeader, error)\n    // GetLedgerPath returns cryptographically verifiable path between any block pairs in ledger skip list\n    GetLedgerPath(startBlock, endBlock uint64) ([]*types.BlockHeader, error)\n    // GetTransactionProof returns intermediate hashes from hash(tx, validating info) to root of\n    // tx merkle tree stored in block header\n    GetTransactionProof(blockNum uint64, txIndex int) (*TxProof, error)\n    // GetTransactionReceipt return block header where tx is stored and tx index inside block\n    GetTransactionReceipt(txId string) (*types.TxReceipt, error)\n    // GetDataProof returns proof of existence of value associated with key in block Merkle-Patricia Trie\n    // Proof itself is a path from node that contains value to root node in MPTrie\n    GetDataProof(blockNum uint64, dbName, key string, isDeleted bool) (*state.Proof, error)\n    // NewBlockHeaderDeliveryService creates a delivery service to deliver block header\n    // from a given starting block number present in the config to all the future block\n    // till the service is stopped\n    NewBlockHeaderDeliveryService(conf *BlockHeaderDeliveryConfig) BlockHeaderDelivererService\n}\n")))}u.isMDXComponent=!0}}]);