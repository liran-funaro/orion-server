"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9926],{3905:function(n,e,r){r.d(e,{Zo:function(){return l},kt:function(){return p}});var t=r(7294);function a(n,e,r){return e in n?Object.defineProperty(n,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[e]=r,n}function i(n,e){var r=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.push.apply(r,t)}return r}function o(n){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?i(Object(r),!0).forEach((function(e){a(n,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))}))}return n}function s(n,e){if(null==n)return{};var r,t,a=function(n,e){if(null==n)return{};var r,t,a={},i=Object.keys(n);for(t=0;t<i.length;t++)r=i[t],e.indexOf(r)>=0||(a[r]=n[r]);return a}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(t=0;t<i.length;t++)r=i[t],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(n,r)&&(a[r]=n[r])}return a}var u=t.createContext({}),d=function(n){var e=t.useContext(u),r=e;return n&&(r="function"==typeof n?n(e):o(o({},e),n)),r},l=function(n){var e=d(n.components);return t.createElement(u.Provider,{value:e},n.children)},g={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},c=t.forwardRef((function(n,e){var r=n.components,a=n.mdxType,i=n.originalType,u=n.parentName,l=s(n,["components","mdxType","originalType","parentName"]),c=d(r),p=a,m=c["".concat(u,".").concat(p)]||c[p]||g[p]||i;return r?t.createElement(m,o(o({ref:e},l),{},{components:r})):t.createElement(m,o({ref:e},l))}));function p(n,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var i=r.length,o=new Array(i);o[0]=c;var s={};for(var u in e)hasOwnProperty.call(e,u)&&(s[u]=e[u]);s.originalType=n,s.mdxType="string"==typeof n?n:a,o[1]=s;for(var d=2;d<i;d++)o[d]=r[d];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}c.displayName="MDXCreateElement"},2985:function(n,e,r){r.r(e),r.d(e,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return d},toc:function(){return l},default:function(){return c}});var t=r(7462),a=r(3366),i=(r(7294),r(3905)),o=["components"],s={id:"complex-data-query",title:"Query Data Using Fields in a JSON object"},u=void 0,d={unversionedId:"getting-started/queries/gosdk/complex-data-query",id:"getting-started/queries/gosdk/complex-data-query",isDocsHomePage:!1,title:"Query Data Using Fields in a JSON object",description:"Once a database session is created, we can call session.JSONQuery() to get a JSONQuery object.",source:"@site/docs/getting-started/queries/gosdk/complex-data-query.md",sourceDirName:"getting-started/queries/gosdk",slug:"/getting-started/queries/gosdk/complex-data-query",permalink:"/orion-server/docs/getting-started/queries/gosdk/complex-data-query",tags:[],version:"current",frontMatter:{id:"complex-data-query",title:"Query Data Using Fields in a JSON object"},sidebar:"Documentation",previous:{title:"Query Data Using Keys",permalink:"/orion-server/docs/getting-started/queries/gosdk/simple-data-query"},next:{title:"Provenance Queries on Historical Data",permalink:"/orion-server/docs/getting-started/queries/gosdk/provenance"}},l=[{value:"1) Equal operator (<code>$eq</code>)",id:"1-equal-operator-eq",children:[],level:2},{value:"2) Not equal operator (<code>$neq</code>)",id:"2-not-equal-operator-neq",children:[],level:2},{value:"3) Greater than (<code>$gt</code>) operator",id:"3-greater-than-gt-operator",children:[],level:2},{value:"4) Lesser than (<code>$lt</code>) operator",id:"4-lesser-than-lt-operator",children:[],level:2},{value:"5) Greater than or equal (<code>$gte</code>) operator",id:"5-greater-than-or-equal-gte-operator",children:[],level:2},{value:"6) Lesser than or equal (<code>$gte</code>) operator",id:"6-lesser-than-or-equal-gte-operator",children:[],level:2},{value:"7) Multiple logical operators (<code>$gt</code>, <code>$lt</code>, <code>$gte</code>, <code>$lte</code>,<code>$neq</code>)",id:"7-multiple-logical-operators-gt-lt-gte-lteneq",children:[],level:2},{value:"8) Combinational operators - <code>$and</code> and <code>$or</code>",id:"8-combinational-operators---and-and-or",children:[],level:2}],g={toc:l};function c(n){var e=n.components,r=(0,a.Z)(n,o);return(0,i.kt)("wrapper",(0,t.Z)({},g,r,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Once a database session is created, we can call ",(0,i.kt)("inlineCode",{parentName:"p"},"session.JSONQuery()")," to get a ",(0,i.kt)("inlineCode",{parentName:"p"},"JSONQuery")," object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'// JSONQuery provides method to execute json query on a given user database\n// The query is a json string which must contain predicates under the field\n// selector. The first field in the selector can be a combinational operator\n// such as "$and" or "$or" followed by a list of attributes and a list of\n// conditions per attributes. A query example is shown below\n//\n// {\n//   "selector": {\n//      "$and": {            -- top level combinational operator\n//          "attr1": {          -- a field in the json document\n//              "$gte": "a",    -- value criteria for the field\n//              "$lt": "b"      -- value criteria for the field\n//          },\n//          "attr2": {          -- a field in the json document\n//              "$eq": true     -- value criteria for the field\n//          },\n//          "attr3": {          -- a field in the json document\n//              "$lt": "a2"     -- a field in the json document\n//          }\n//      }\n//   }\n// }\ntype JSONQuery interface {\n    Execute(dbName, query string) ([]*types.KVWithMetadata, error)\n}\n')),(0,i.kt)("p",null,"To query data, we need to call the ",(0,i.kt)("inlineCode",{parentName:"p"},"Execute()")," method of the object from above."),(0,i.kt)("details",null,(0,i.kt)("summary",null," Pre-requisite: Create db3 with index, provide read-write permission on db3 to Alice, write sample data for queries"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "encoding/pem"\n    "fmt"\n    "io/ioutil"\n    "strconv"\n\n    "github.com/hyperledger-labs/orion-sdk-go/pkg/bcdb"\n    "github.com/hyperledger-labs/orion-server/pkg/types"\n)\n\nfunc main() {\n    db, err := createConnection()\n    // if err is not nil, print and return\n\n    session, err := openSession(db, "admin")\n    // if err is not nil, print and return\n\n    err = createDBWithIndex(session)\n    // if err is not nil, print and return\n\n    err = createAlice(session)\n    // if err is not nil, print and return\n\n    session, err = openSession(db, "alice")\n    // if err is not nil, print and return\n\n    tx, err := session.DataTx()\n    // if err is not nil, print and return\n\n    tx.Put("db3", "person1", []byte(`{"name":"a","age":18,"graduated":false,"rating":-234`), nil)\n    tx.Put("db3", "person2", []byte(`{"name":"b","age":48,"graduated":true,"rating":-100,"degree":"bachelor"}`), nil)\n    tx.Put("db3", "person3", []byte(`{"name":"c","age":20,"graduated":false,"rating":-4}`), nil)\n    tx.Put("db3", "person4", []byte(`{"name":"d","age":19,"graduated":false,"rating":-1}`), nil)\n    tx.Put("db3", "person5", []byte(`{"name":"e","age":31,"graduated":true,"rating":0,"degree":"master"}`), nil)\n    tx.Put("db3", "person6", []byte(`{"name":"f","age":24,"graduated":true,"rating":12,"degree":"bachelor"}`), nil)\n    tx.Put("db3", "person7", []byte(`{"name":"g","age":28,"graduated":false,"rating":100}`), nil)\n    tx.Put("db3", "person8", []byte(`{"name":"h","age":38,"graduated":true,"rating":1230,"degree":"master"}`), nil)\n\n    txID, receipt, err := tx.Commit(true)\n    // if err is not nil, print and return\n\n    fmt.Println("transaction with txID " + txID + " got committed in the block " + strconv.Itoa(int(receipt.GetHeader().GetBaseHeader().GetNumber())))\n}\n\nfunc createDBWithIndex(s bcdb.DBSession) error {\n    tx, err := s.DBsTx()\n    // if err is not nil, print and return\n\n    index := map[string]types.IndexAttributeType{\n        "name":      types.IndexAttributeType_STRING,\n        "age":       types.IndexAttributeType_NUMBER,\n        "graduated": types.IndexAttributeType_BOOLEAN,\n        "rating":    types.IndexAttributeType_NUMBER,\n    }\n\n    err = tx.CreateDB("db3", index)\n    // if err is not nil, print and return\n\n    txID, receipt, err := tx.Commit(true)\n    // if err is not nil, print and return\n\n    fmt.Println("transaction with txID " + txID + " got committed in the block " + strconv.Itoa(int(receipt.GetHeader().GetBaseHeader().GetNumber())))\n    return nil\n}\n\nfunc createAlice(s bcdb.DBSession) error {\n    alicePemUserCert, err := ioutil.ReadFile("./crypto/alice/alice.pem")\n    // if err is not nil, print and return\n\n    aliceCertBlock, _ := pem.Decode(alicePemUserCert)\n\n    alice := &types.User{\n        Id:          "alice",\n        Certificate: aliceCertBlock.Bytes,\n        Privilege: &types.Privilege{\n            DbPermission: map[string]types.Privilege_Access{\n                "db3": types.Privilege_ReadWrite,\n            },\n        },\n    }\n\n    tx, err := s.UsersTx()\n    // if err is not nil, print and return\n\n    err = tx.PutUser(alice, nil)\n    // if err is not nil, print and return\n\n    txID, receipt, err := tx.Commit(true)\n    // if err is not nil, print and return\n\n    fmt.Println("transaction with txID " + txID + " got committed in the block " + strconv.Itoa(int(receipt.GetHeader().GetBaseHeader().GetNumber())))\n    return nil\n}\n'))),(0,i.kt)("h2",{id:"1-equal-operator-eq"},"1) Equal operator (",(0,i.kt)("inlineCode",{parentName:"h2"},"$eq"),")"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n\n    "github.com/hyperledger-labs/orion-sdk-go/pkg/bcdb"\n)\n\nfunc main() {\n    db, err := createConnection()\n    // if err is not nil, print and return\n\n    session, err := openSession(db, "alice")\n    // if err is not nil, print and return\n\n    q, err := session.JSONQuery()\n    // if err is not nil, print and return\n\n    queryStr := `\n    {\n        "selector": {\n            "graduated": {\n                "$eq":false\n            }\n        }\n\n    }\n    `\n    err = executeAndPrint(q, queryStr)\n    // if err is not nil, print and return\n\n    queryStr = `\n    {\n        "selector": {\n            "name": {\n                "$eq":"c"\n            }\n        }\n\n    }\n    `\n    err = executeAndPrint(q, queryStr)\n    // if err is not nil, print and return\n\n    queryStr = `\n    {\n        "selector": {\n            "rating": {\n                "$eq":-1\n            }\n        }\n\n    }\n    `\n    err = executeAndPrint(q, queryStr)\n    // if err is not nil, print and return\n}\n\nfunc executeAndPrint(q bcdb.JSONQuery, queryStr string) error {\n    kvs, err := q.Execute("db3", queryStr)\n    if err != nil {\n        return err\n    }\n\n    fmt.Println("============================")\n    fmt.Println("results for " + queryStr)\n    for _, kv := range kvs {\n        fmt.Println(kv.Key + ": " + string(kv.Value))\n    }\n\n    return nil\n}\n')),(0,i.kt)("details",null,(0,i.kt)("summary",null," Output "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-webmanifest"},'============================\nresults for\n        {\n                "selector": {\n                        "graduated": {\n                                "$eq":false\n                        }\n                }\n\n        }\n\nperson3: {"name":"c","age":20,"graduated":false,"rating":-4}\nperson4: {"name":"d","age":19,"graduated":false,"rating":-1}\nperson7: {"name":"g","age":28,"graduated":false,"rating":100}\n============================\nresults for\n        {\n                "selector": {\n                        "name": {\n                                "$eq":"c"\n                        }\n                }\n\n        }\n\nperson3: {"name":"c","age":20,"graduated":false,"rating":-4}\n============================\nresults for\n        {\n                "selector": {\n                        "rating": {\n                                "$eq":-1\n                        }\n                }\n\n        }\n\nperson4: {"name":"d","age":19,"graduated":false,"rating":-1}\n'))),(0,i.kt)("h2",{id:"2-not-equal-operator-neq"},"2) Not equal operator (",(0,i.kt)("inlineCode",{parentName:"h2"},"$neq"),")"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n\n    "github.com/hyperledger-labs/orion-sdk-go/pkg/bcdb"\n)\n\nfunc main() {\n    db, err := createConnection()\n    // if err is not nil, print and return\n\n    session, err := openSession(db, "alice")\n    // if err is not nil, print and return\n\n    q, err := session.JSONQuery()\n    // if err is not nil, print and return\n\n    queryStr := `\n    {\n        "selector": {\n            "graduated": {\n                "$neq": [false]\n            }\n        }\n\n    }\n    `\n    err = executeAndPrint(q, queryStr)\n    // if err is not nil, print and return\n\n    queryStr = `\n    {\n        "selector": {\n            "name": {\n                "$neq":["a", "b", "c", "d"]\n            }\n        }\n\n    }\n    `\n    err = executeAndPrint(q, queryStr)\n    // if err is not nil, print and return\n\n    queryStr = `\n    {\n        "selector": {\n            "rating": {\n                "$neq":[-1, 100, -100]\n            }\n        }\n\n    }\n    `\n    err = executeAndPrint(q, queryStr)\n    // if err is not nil, print and return\n}\n\nfunc executeAndPrint(q bcdb.JSONQuery, queryStr string) error {\n    kvs, err := q.Execute("db3", queryStr)\n    if err != nil {\n        return err\n    }\n\n    fmt.Println("============================")\n    fmt.Println("results for " + queryStr)\n    for _, kv := range kvs {\n        fmt.Println(kv.Key + ": " + string(kv.Value))\n    }\n\n    return nil\n}\n')),(0,i.kt)("details",null,(0,i.kt)("summary",null," Output "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-webmanifest"},'============================\nresults for\n        {\n                "selector": {\n                        "graduated": {\n                                "$neq": [false]\n                        }\n                }\n\n        }\n\nperson2: {"name":"b","age":48,"graduated":true,"rating":-100,"degree":"bachelor"}\nperson5: {"name":"e","age":31,"graduated":true,"rating":0,"degree":"master"}\nperson6: {"name":"f","age":24,"graduated":true,"rating":12,"degree":"bachelor"}\nperson8: {"name":"h","age":38,"graduated":true,"rating":1230,"degree":"master"}\n============================\nresults for\n        {\n                "selector": {\n                        "name": {\n                                "$neq":["a", "b", "c", "d"]\n                        }\n                }\n\n        }\n\nperson8: {"name":"h","age":38,"graduated":true,"rating":1230,"degree":"master"}\nperson5: {"name":"e","age":31,"graduated":true,"rating":0,"degree":"master"}\nperson6: {"name":"f","age":24,"graduated":true,"rating":12,"degree":"bachelor"}\nperson7: {"name":"g","age":28,"graduated":false,"rating":100}\n============================\nresults for\n        {\n                "selector": {\n                        "rating": {\n                                "$neq":[-1, 100, -100]\n                        }\n                }\n\n        }\n\nperson5: {"name":"e","age":31,"graduated":true,"rating":0,"degree":"master"}\nperson6: {"name":"f","age":24,"graduated":true,"rating":12,"degree":"bachelor"}\nperson8: {"name":"h","age":38,"graduated":true,"rating":1230,"degree":"master"}\nperson3: {"name":"c","age":20,"graduated":false,"rating":-4}\n'))),(0,i.kt)("h2",{id:"3-greater-than-gt-operator"},"3) Greater than (",(0,i.kt)("inlineCode",{parentName:"h2"},"$gt"),") operator"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n\n    "github.com/hyperledger-labs/orion-sdk-go/pkg/bcdb"\n)\n\nfunc main() {\n    db, err := createConnection()\n    // if err is not nil, print and return\n\n    session, err := openSession(db, "alice")\n    // if err is not nil, print and return\n\n    q, err := session.JSONQuery()\n    // if err is not nil, print and return\n\n    queryStr := `\n    {\n        "selector": {\n            "graduated": {\n                "$gt": false\n            }\n        }\n\n    }\n    `\n    err = executeAndPrint(q, queryStr)\n    // if err is not nil, print and return\n\n    queryStr = `\n    {\n        "selector": {\n            "name": {\n                "$gt":"e"\n            }\n        }\n\n    }\n    `\n    err = executeAndPrint(q, queryStr)\n    // if err is not nil, print and return\n\n    queryStr = `\n    {\n        "selector": {\n            "rating": {\n                "$gt":-4\n            }\n        }\n\n    }\n    `\n    err = executeAndPrint(q, queryStr)\n    // if err is not nil, print and return\n}\n\nfunc executeAndPrint(q bcdb.JSONQuery, queryStr string) error {\n    kvs, err := q.Execute("db3", queryStr)\n    if err != nil {\n        return err\n    }\n\n    fmt.Println("============================")\n    fmt.Println("results for " + queryStr)\n    for _, kv := range kvs {\n        fmt.Println(kv.Key + ": " + string(kv.Value))\n    }\n\n    return nil\n}\n')),(0,i.kt)("details",null,(0,i.kt)("summary",null," Output "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-webmanifest"},'============================\nresults for\n        {\n                "selector": {\n                        "graduated": {\n                                "$gt": false\n                        }\n                }\n\n        }\n\nperson2: {"name":"b","age":48,"graduated":true,"rating":-100,"degree":"bachelor"}\nperson5: {"name":"e","age":31,"graduated":true,"rating":0,"degree":"master"}\nperson6: {"name":"f","age":24,"graduated":true,"rating":12,"degree":"bachelor"}\nperson8: {"name":"h","age":38,"graduated":true,"rating":1230,"degree":"master"}\n============================\nresults for\n        {\n                "selector": {\n                        "name": {\n                                "$gt":"e"\n                        }\n                }\n\n        }\n\nperson6: {"name":"f","age":24,"graduated":true,"rating":12,"degree":"bachelor"}\nperson7: {"name":"g","age":28,"graduated":false,"rating":100}\nperson8: {"name":"h","age":38,"graduated":true,"rating":1230,"degree":"master"}\n============================\nresults for\n        {\n                "selector": {\n                        "rating": {\n                                "$gt":-4\n                        }\n                }\n\n        }\n\nperson7: {"name":"g","age":28,"graduated":false,"rating":100}\nperson8: {"name":"h","age":38,"graduated":true,"rating":1230,"degree":"master"}\nperson4: {"name":"d","age":19,"graduated":false,"rating":-1}\nperson5: {"name":"e","age":31,"graduated":true,"rating":0,"degree":"master"}\nperson6: {"name":"f","age":24,"graduated":true,"rating":12,"degree":"bachelor"}\n'))),(0,i.kt)("h2",{id:"4-lesser-than-lt-operator"},"4) Lesser than (",(0,i.kt)("inlineCode",{parentName:"h2"},"$lt"),") operator"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n\n    "github.com/hyperledger-labs/orion-sdk-go/pkg/bcdb"\n)\n\nfunc main() {\n    db, err := createConnection()\n    // if err is not nil, print and return\n\n    session, err := openSession(db, "alice")\n    // if err is not nil, print and return\n\n    q, err := session.JSONQuery()\n    // if err is not nil, print and return\n\n    queryStr := `\n    {\n        "selector": {\n            "graduated": {\n                "$lt": true\n            }\n        }\n\n    }\n    `\n    err = executeAndPrint(q, queryStr)\n    // if err is not nil, print and return\n\n    queryStr = `\n    {\n        "selector": {\n            "name": {\n                "$lt":"e"\n            }\n        }\n\n    }\n    `\n    err = executeAndPrint(q, queryStr)\n    // if err is not nil, print and return\n\n    queryStr = `\n    {\n        "selector": {\n            "rating": {\n                "$lt":-4\n            }\n        }\n\n    }\n    `\n    err = executeAndPrint(q, queryStr)\n    // if err is not nil, print and return\n}\n\nfunc executeAndPrint(q bcdb.JSONQuery, queryStr string) error {\n    kvs, err := q.Execute("db3", queryStr)\n    if err != nil {\n        return err\n    }\n\n    fmt.Println("============================")\n    fmt.Println("results for " + queryStr)\n    for _, kv := range kvs {\n        fmt.Println(kv.Key + ": " + string(kv.Value))\n    }\n\n    return nil\n}\n')),(0,i.kt)("details",null,(0,i.kt)("summary",null," Output "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-webmanifest"},'============================\nresults for\n        {\n                "selector": {\n                        "graduated": {\n                                "$lt": true\n                        }\n                }\n\n        }\n\nperson4: {"name":"d","age":19,"graduated":false,"rating":-1}\nperson7: {"name":"g","age":28,"graduated":false,"rating":100}\nperson3: {"name":"c","age":20,"graduated":false,"rating":-4}\n============================\nresults for\n        {\n                "selector": {\n                        "name": {\n                                "$lt":"e"\n                        }\n                }\n\n        }\n\nperson2: {"name":"b","age":48,"graduated":true,"rating":-100,"degree":"bachelor"}\nperson3: {"name":"c","age":20,"graduated":false,"rating":-4}\nperson4: {"name":"d","age":19,"graduated":false,"rating":-1}\n============================\nresults for\n        {\n                "selector": {\n                        "rating": {\n                                "$lt":-4\n                        }\n                }\n\n        }\n\nperson2: {"name":"b","age":48,"graduated":true,"rating":-100,"degree":"bachelor"}\n'))),(0,i.kt)("h2",{id:"5-greater-than-or-equal-gte-operator"},"5) Greater than or equal (",(0,i.kt)("inlineCode",{parentName:"h2"},"$gte"),") operator"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n\n    "github.com/hyperledger-labs/orion-sdk-go/pkg/bcdb"\n)\n\nfunc main() {\n    db, err := createConnection()\n    // if err is not nil, print and return\n\n    session, err := openSession(db, "alice")\n    // if err is not nil, print and return\n\n    q, err := session.JSONQuery()\n    // if err is not nil, print and return\n\n    queryStr := `\n    {\n        "selector": {\n            "graduated": {\n                "$gte": false\n            }\n        }\n\n    }\n    `\n    err = executeAndPrint(q, queryStr)\n    // if err is not nil, print and return\n\n    queryStr = `\n    {\n        "selector": {\n            "name": {\n                "$gte":"e"\n            }\n        }\n\n    }\n    `\n    err = executeAndPrint(q, queryStr)\n    // if err is not nil, print and return\n\n    queryStr = `\n    {\n        "selector": {\n            "rating": {\n                "$gte":-4\n            }\n        }\n\n    }\n    `\n    err = executeAndPrint(q, queryStr)\n    // if err is not nil, print and return\n}\n\nfunc executeAndPrint(q bcdb.JSONQuery, queryStr string) error {\n    kvs, err := q.Execute("db3", queryStr)\n    if err != nil {\n        return err\n    }\n\n    fmt.Println("============================")\n    fmt.Println("results for " + queryStr)\n    for _, kv := range kvs {\n        fmt.Println(kv.Key + ": " + string(kv.Value))\n    }\n\n    return nil\n}\n')),(0,i.kt)("details",null,(0,i.kt)("summary",null," Output "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-webmanifest"},'results for\n        {\n                "selector": {\n                        "graduated": {\n                                "$gte": false\n                        }\n                }\n\n        }\n\nperson2: {"name":"b","age":48,"graduated":true,"rating":-100,"degree":"bachelor"}\nperson5: {"name":"e","age":31,"graduated":true,"rating":0,"degree":"master"}\nperson6: {"name":"f","age":24,"graduated":true,"rating":12,"degree":"bachelor"}\nperson8: {"name":"h","age":38,"graduated":true,"rating":1230,"degree":"master"}\nperson3: {"name":"c","age":20,"graduated":false,"rating":-4}\nperson4: {"name":"d","age":19,"graduated":false,"rating":-1}\nperson7: {"name":"g","age":28,"graduated":false,"rating":100}\n============================\nresults for\n        {\n                "selector": {\n                        "name": {\n                                "$gte":"e"\n                        }\n                }\n\n        }\n\nperson6: {"name":"f","age":24,"graduated":true,"rating":12,"degree":"bachelor"}\nperson7: {"name":"g","age":28,"graduated":false,"rating":100}\nperson8: {"name":"h","age":38,"graduated":true,"rating":1230,"degree":"master"}\nperson5: {"name":"e","age":31,"graduated":true,"rating":0,"degree":"master"}\n============================\nresults for\n        {\n                "selector": {\n                        "rating": {\n                                "$gte":-4\n                        }\n                }\n\n        }\n\nperson4: {"name":"d","age":19,"graduated":false,"rating":-1}\nperson5: {"name":"e","age":31,"graduated":true,"rating":0,"degree":"master"}\nperson6: {"name":"f","age":24,"graduated":true,"rating":12,"degree":"bachelor"}\nperson7: {"name":"g","age":28,"graduated":false,"rating":100}\nperson8: {"name":"h","age":38,"graduated":true,"rating":1230,"degree":"master"}\nperson3: {"name":"c","age":20,"graduated":false,"rating":-4}\n'))),(0,i.kt)("h2",{id:"6-lesser-than-or-equal-gte-operator"},"6) Lesser than or equal (",(0,i.kt)("inlineCode",{parentName:"h2"},"$gte"),") operator"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n\n    "github.com/hyperledger-labs/orion-sdk-go/pkg/bcdb"\n)\n\nfunc main() {\n    db, err := createConnection()\n    // if err is not nil, print and return\n\n    session, err := openSession(db, "alice")\n    // if err is not nil, print and return\n\n    q, err := session.JSONQuery()\n    // if err is not nil, print and return\n\n    queryStr := `\n    {\n        "selector": {\n            "graduated": {\n                "$lte": true\n            }\n        }\n\n    }\n    `\n    err = executeAndPrint(q, queryStr)\n    // if err is not nil, print and return\n\n    queryStr = `\n    {\n        "selector": {\n            "name": {\n                "$lte":"e"\n            }\n        }\n\n    }\n    `\n    err = executeAndPrint(q, queryStr)\n    // if err is not nil, print and return\n\n    queryStr = `\n    {\n        "selector": {\n            "rating": {\n                "$lte":-4\n            }\n        }\n\n    }\n    `\n    err = executeAndPrint(q, queryStr)\n    // if err is not nil, print and return\n}\n\nfunc executeAndPrint(q bcdb.JSONQuery, queryStr string) error {\n    kvs, err := q.Execute("db3", queryStr)\n    if err != nil {\n        return err\n    }\n\n    fmt.Println("============================")\n    fmt.Println("results for " + queryStr)\n    for _, kv := range kvs {\n        fmt.Println(kv.Key + ": " + string(kv.Value))\n    }\n\n    return nil\n}\n')),(0,i.kt)("details",null,(0,i.kt)("summary",null," Output "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-webmanifest"},'============================\nresults for\n        {\n                "selector": {\n                        "graduated": {\n                                "$lte": true\n                        }\n                }\n\n        }\n\nperson3: {"name":"c","age":20,"graduated":false,"rating":-4}\nperson4: {"name":"d","age":19,"graduated":false,"rating":-1}\nperson7: {"name":"g","age":28,"graduated":false,"rating":100}\nperson2: {"name":"b","age":48,"graduated":true,"rating":-100,"degree":"bachelor"}\nperson5: {"name":"e","age":31,"graduated":true,"rating":0,"degree":"master"}\nperson6: {"name":"f","age":24,"graduated":true,"rating":12,"degree":"bachelor"}\nperson8: {"name":"h","age":38,"graduated":true,"rating":1230,"degree":"master"}\n============================\nresults for\n        {\n                "selector": {\n                        "name": {\n                                "$lte":"e"\n                        }\n                }\n\n        }\n\nperson2: {"name":"b","age":48,"graduated":true,"rating":-100,"degree":"bachelor"}\nperson3: {"name":"c","age":20,"graduated":false,"rating":-4}\nperson4: {"name":"d","age":19,"graduated":false,"rating":-1}\nperson5: {"name":"e","age":31,"graduated":true,"rating":0,"degree":"master"}\n============================\nresults for\n        {\n                "selector": {\n                        "rating": {\n                                "$lte":-4\n                        }\n                }\n\n        }\n\nperson2: {"name":"b","age":48,"graduated":true,"rating":-100,"degree":"bachelor"}\nperson3: {"name":"c","age":20,"graduated":false,"rating":-4}\n'))),(0,i.kt)("h2",{id:"7-multiple-logical-operators-gt-lt-gte-lteneq"},"7) Multiple logical operators (",(0,i.kt)("inlineCode",{parentName:"h2"},"$gt"),", ",(0,i.kt)("inlineCode",{parentName:"h2"},"$lt"),", ",(0,i.kt)("inlineCode",{parentName:"h2"},"$gte"),", ",(0,i.kt)("inlineCode",{parentName:"h2"},"$lte"),",",(0,i.kt)("inlineCode",{parentName:"h2"},"$neq"),")"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n\n    "github.com/hyperledger-labs/orion-sdk-go/pkg/bcdb"\n)\n\nfunc main() {\n    db, err := createConnection()\n    // if err is not nil, print and return\n\n    session, err := openSession(db, "alice")\n    // if err is not nil, print and return\n\n    q, err := session.JSONQuery()\n    // if err is not nil, print and return\n\n    queryStr := `\n    {\n        "selector": {\n            "name": {\n                "$gt": "e",\n                "$lte":"h"\n            }\n        }\n\n    }\n    `\n    err = executeAndPrint(q, queryStr)\n    // if err is not nil, print and return\n\n    queryStr = `\n    {\n        "selector": {\n            "rating": {\n                "$gt":-100,\n                "$lt":100\n            }\n        }\n\n    }\n    `\n    err = executeAndPrint(q, queryStr)\n    // if err is not nil, print and return\n\n    queryStr = `\n    {\n        "selector": {\n            "rating": {\n                "$gte":-100,\n                "$lte":100,\n                "$neq": [-1, 0, 12]\n            }\n        }\n\n    }\n    `\n    err = executeAndPrint(q, queryStr)\n    // if err is not nil, print and return\n}\n\nfunc executeAndPrint(q bcdb.JSONQuery, queryStr string) error {\n    kvs, err := q.Execute("db3", queryStr)\n    if err != nil {\n        return err\n    }\n\n    fmt.Println("============================")\n    fmt.Println("results for " + queryStr)\n    for _, kv := range kvs {\n        fmt.Println(kv.Key + ": " + string(kv.Value))\n    }\n\n    return nil\n}\n')),(0,i.kt)("details",null,(0,i.kt)("summary",null," Output "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-webmanifest"},'============================\nresults for\n        {\n                "selector": {\n                        "name": {\n                                "$gt": "e",\n                                "$lte":"h"\n                        }\n                }\n\n        }\n\nperson6: {"name":"f","age":24,"graduated":true,"rating":12,"degree":"bachelor"}\nperson7: {"name":"g","age":28,"graduated":false,"rating":100}\nperson8: {"name":"h","age":38,"graduated":true,"rating":1230,"degree":"master"}\n============================\nresults for\n        {\n                "selector": {\n                        "rating": {\n                                "$gt":-100,\n                                "$lt":100\n                        }\n                }\n\n        }\n\nperson3: {"name":"c","age":20,"graduated":false,"rating":-4}\nperson4: {"name":"d","age":19,"graduated":false,"rating":-1}\nperson5: {"name":"e","age":31,"graduated":true,"rating":0,"degree":"master"}\nperson6: {"name":"f","age":24,"graduated":true,"rating":12,"degree":"bachelor"}\n============================\nresults for\n        {\n                "selector": {\n                        "rating": {\n                                "$gte":-100,\n                                "$lte":100,\n                                "$neq": [-1, 0, 12]\n                        }\n                }\n\n        }\n\nperson2: {"name":"b","age":48,"graduated":true,"rating":-100,"degree":"bachelor"}\nperson3: {"name":"c","age":20,"graduated":false,"rating":-4}\nperson7: {"name":"g","age":28,"graduated":false,"rating":100}\n'))),(0,i.kt)("h2",{id:"8-combinational-operators---and-and-or"},"8) Combinational operators - ",(0,i.kt)("inlineCode",{parentName:"h2"},"$and")," and ",(0,i.kt)("inlineCode",{parentName:"h2"},"$or")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n\n    "github.com/hyperledger-labs/orion-sdk-go/pkg/bcdb"\n)\n\nfunc main() {\n    db, err := createConnection()\n    if err != nil {\n        fmt.Errorf(err.Error())\n        return\n    }\n\n    session, err := openSession(db, "alice")\n    if err != nil {\n        fmt.Errorf(err.Error())\n        return\n    }\n\n    q, err := session.JSONQuery()\n    if err != nil {\n        fmt.Println(err.Error())\n        return\n    }\n\n    queryStr := `\n    {\n        "selector": {\n            "$and": {\n                "name": {\n                    "$gt": "e",\n                    "$lte":"h"\n                },\n                "graduated": {\n                    "$eq": false\n                },\n                "rating": {\n                    "$gt": -100,\n                    "$neq": [0]\n                }\n            }\n        }\n\n    }\n    `\n    err = executeAndPrint(q, queryStr)\n    if err != nil {\n        fmt.Println(err.Error())\n        return\n    }\n\n    queryStr = `\n    {\n        "selector": {\n            "$and": {\n                "name": {\n                    "$gte": "a",\n                    "$neq": ["d", "e"],\n                    "$lte":"h"\n                },\n                "graduated": {\n                    "$eq": true\n                },\n                "rating": {\n                    "$gte": -1000,\n                    "$neq": [0],\n                    "$lte": 1000\n                }\n            }\n        }\n\n    }\n    `\n    err = executeAndPrint(q, queryStr)\n    if err != nil {\n        fmt.Println(err.Error())\n        return\n    }\n\n    queryStr = `\n    {\n        "selector": {\n            "$or": {\n                "name": {\n                    "$gt": "e",\n                    "$lte":"h"\n                },\n                "graduated": {\n                    "$eq": false\n                },\n                "rating": {\n                    "$gt": -100,\n                    "$neq": [0]\n                }\n            }\n        }\n\n    }\n    `\n    err = executeAndPrint(q, queryStr)\n    if err != nil {\n        fmt.Println(err.Error())\n        return\n    }\n\n    queryStr = `\n    {\n        "selector": {\n            "$or": {\n                "name": {\n                    "$gte": "a",\n                    "$neq": ["d", "e"],\n                    "$lte":"h"\n                },\n                "graduated": {\n                    "$eq": true\n                },\n                "rating": {\n                    "$gte": -1000,\n                    "$neq": [0],\n                    "$lte": 1000\n                }\n            }\n        }\n\n    }\n    `\n    err = executeAndPrint(q, queryStr)\n    if err != nil {\n        fmt.Println(err.Error())\n        return\n    }\n}\n\nfunc executeAndPrint(q bcdb.JSONQuery, queryStr string) error {\n    kvs, err := q.Execute("db3", queryStr)\n    if err != nil {\n        return err\n    }\n\n    fmt.Println("============================")\n    fmt.Println("results for " + queryStr)\n    for _, kv := range kvs {\n        fmt.Println(kv.Key + ": " + string(kv.Value))\n    }\n\n    return nil\n}\n')),(0,i.kt)("details",null,(0,i.kt)("summary",null," Output "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-webmanifest"},'============================\nresults for\n        {\n                "selector": {\n                        "$and": {\n                                "name": {\n                                        "$gt": "e",\n                                        "$lte":"h"\n                                },\n                                "graduated": {\n                                        "$eq": false\n                                },\n                                "rating": {\n                                        "$gt": -100,\n                                        "$neq": [0]\n                                }\n                        }\n                }\n\n        }\n\nperson7: {"name":"g","age":28,"graduated":false,"rating":100}\n============================\nresults for\n        {\n                "selector": {\n                        "$and": {\n                                "name": {\n                                        "$gte": "a",\n                                        "$neq": ["d", "e"],\n                                        "$lte":"h"\n                                },\n                                "graduated": {\n                                        "$eq": true\n                                },\n                                "rating": {\n                                        "$gte": -1000,\n                                        "$neq": [0],\n                                        "$lte": 1000\n                                }\n                        }\n                }\n\n        }\n\nperson2: {"name":"b","age":48,"graduated":true,"rating":-100,"degree":"bachelor"}\nperson6: {"name":"f","age":24,"graduated":true,"rating":12,"degree":"bachelor"}\n============================\nresults for\n        {\n                "selector": {\n                        "$or": {\n                                "name": {\n                                        "$gt": "e",\n                                        "$lte":"h"\n                                },\n                                "graduated": {\n                                        "$eq": false\n                                },\n                                "rating": {\n                                        "$gt": -100,\n                                        "$neq": [0]\n                                }\n                        }\n                }\n\n        }\n\nperson8: {"name":"h","age":38,"graduated":true,"rating":1230,"degree":"master"}\nperson3: {"name":"c","age":20,"graduated":false,"rating":-4}\nperson4: {"name":"d","age":19,"graduated":false,"rating":-1}\nperson6: {"name":"f","age":24,"graduated":true,"rating":12,"degree":"bachelor"}\nperson7: {"name":"g","age":28,"graduated":false,"rating":100}\n============================\nresults for\n        {\n                "selector": {\n                        "$or": {\n                                "name": {\n                                        "$gte": "a",\n                                        "$neq": ["d", "e"],\n                                        "$lte":"h"\n                                },\n                                "graduated": {\n                                        "$eq": true\n                                },\n                                "rating": {\n                                        "$gte": -1000,\n                                        "$neq": [0],\n                                        "$lte": 1000\n                                }\n                        }\n                }\n\n        }\n\nperson7: {"name":"g","age":28,"graduated":false,"rating":100}\nperson2: {"name":"b","age":48,"graduated":true,"rating":-100,"degree":"bachelor"}\nperson3: {"name":"c","age":20,"graduated":false,"rating":-4}\nperson4: {"name":"d","age":19,"graduated":false,"rating":-1}\nperson6: {"name":"f","age":24,"graduated":true,"rating":12,"degree":"bachelor"}\nperson8: {"name":"h","age":38,"graduated":true,"rating":1230,"degree":"master"}\nperson5: {"name":"e","age":31,"graduated":true,"rating":0,"degree":"master"}\n'))))}c.isMDXComponent=!0}}]);