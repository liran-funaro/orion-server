"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[566],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=d(t),m=r,g=c["".concat(s,".").concat(m)]||c[m]||p[m]||i;return t?a.createElement(g,o(o({ref:n},u),{},{components:t})):a.createElement(g,o({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=t[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},9936:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return u},default:function(){return c}});var a=t(7462),r=t(3366),i=(t(7294),t(3905)),o=["components"],l={id:"curl",title:"Setting Up Command Line Utilities"},s=void 0,d={unversionedId:"getting-started/pre-requisite/curl",id:"getting-started/pre-requisite/curl",isDocsHomePage:!1,title:"Setting Up Command Line Utilities",description:"\x3c!--",source:"@site/docs/getting-started/pre-requisite/curl.md",sourceDirName:"getting-started/pre-requisite",slug:"/getting-started/pre-requisite/curl",permalink:"/orion-server/docs/getting-started/pre-requisite/curl",tags:[],version:"current",frontMatter:{id:"curl",title:"Setting Up Command Line Utilities"},sidebar:"Documentation",previous:{title:"Creating a Connection and Opening a Session with SDK",permalink:"/orion-server/docs/getting-started/pre-requisite/gosdk"},next:{title:"Database Administration Transaction",permalink:"/orion-server/docs/getting-started/transactions/gosdk/dbtx"}},u=[{value:"1) Installing cURL",id:"1-installing-curl",children:[],level:2},{value:"2) Installing jq",id:"2-installing-jq",children:[],level:2},{value:"3) Building signer, encoder, and decoder",id:"3-building-signer-encoder-and-decoder",children:[{value:"3.1) Using signer",id:"31-using-signer",children:[],level:3},{value:"3.2) Using encoder",id:"32-using-encoder",children:[],level:3},{value:"3.2) Using decoder",id:"32-using-decoder",children:[],level:3}],level:2}],p={toc:u};function c(e){var n=e.components,t=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"We need the following five utilities to successfully execute all example ",(0,i.kt)("inlineCode",{parentName:"p"},"cURL")," commands:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"cURL")," command line tool to issue http requests and receive http responses."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"jq")," command line tool to pretty print JSON output from ",(0,i.kt)("inlineCode",{parentName:"li"},"cURL"),"."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"signer")," utility to compute the required digital signature for each query and transaction."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"encoder")," utility to encode data to base64 encoding."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"decoder")," utility to decode the base64-encoded data present in the server responses.")),(0,i.kt)("h2",{id:"1-installing-curl"},"1) Installing cURL"),(0,i.kt)("p",null,"You need to install the ",(0,i.kt)("inlineCode",{parentName:"p"},"cURL")," utility on the server, laptop or PC from which you are planning to issue transactions and queries. Search the web to find out how to install the ",(0,i.kt)("inlineCode",{parentName:"p"},"cURL")," utility on your operating system."),(0,i.kt)("h2",{id:"2-installing-jq"},"2) Installing jq"),(0,i.kt)("p",null,"Instructions for installing the ",(0,i.kt)("inlineCode",{parentName:"p"},"jq")," command line tool can be found ",(0,i.kt)("a",{parentName:"p",href:"https://stedolan.github.io/jq/download/"},"here"),"."),(0,i.kt)("h2",{id:"3-building-signer-encoder-and-decoder"},"3) Building signer, encoder, and decoder"),(0,i.kt)("p",null,"Refer to these ",(0,i.kt)("a",{parentName:"p",href:"../launching-one-node/binary#build"},"six steps")," to build the ",(0,i.kt)("inlineCode",{parentName:"p"},"signer"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"encoder"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"decoder")," utilities. Once you execute these steps, all three\nutilities can be found in ",(0,i.kt)("inlineCode",{parentName:"p"},"./bin")),(0,i.kt)("h3",{id:"31-using-signer"},"3.1) Using signer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"./bin/signer\n")),(0,i.kt)("p",null,"prints the following"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'all the following two flags must be set. An example command is shown below:\n\n  signer -data=\'{"userID":"admin"}" -privatekey=admin.key\n\n  -data string\n        JSON data to be signed. Surround that data with single quotes. An example of JSON data is \'{"userID":"admin"}\'\n  -privatekey string\n        path to the private key to be used for adding a digital signature\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"signer")," utility expects two arguments: (1) data and (2) privatekey, as shown above. The ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," argument must be JSON data\non which the digital signature is put using the private key assigned to ",(0,i.kt)("inlineCode",{parentName:"p"},"privatekey")," argument."),(0,i.kt)("p",null,"For example, in the following command, ",(0,i.kt)("inlineCode",{parentName:"p"},"admin")," puts the digital signature on the JSON data ",(0,i.kt)("inlineCode",{parentName:"p"},'\'{"user_id":"admin"}\'')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'./bin/signer -privatekey=deployment/sample/crypto/admin/admin.key -data=\'{"user_id":"admin"}\'\n')),(0,i.kt)("p",null,"The above command produces a digital signature and prints it as base64-encoded string as shown below"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"MEUCIQCMEdLgfFEOF+vgXLwbeOdUUWnGB5HH2ULkoz15jlk5DgIgbWXuoyqD4szob78hZYiau9LPdJLLqP3bAu7iV98BcW0=\n")),(0,i.kt)("h3",{id:"32-using-encoder"},"3.2) Using encoder"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"./bin/encoder\n")),(0,i.kt)("p",null,"prints the following"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'The data field accepts a JSON or string value. THE data flag must be set. Two example commands are shown below:\n\n  encoder -data=\'{"userID":"admin"}\'\n  encoder -data=\'value\'\n\n  -data string\n        JSON or string data to be encoded. Surround the JSON data with single quotes. An example of JSON data is \'{"userID":"admin"}\'\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"encoder")," utility expects only one argument, i.e., data, as shown above. The ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," argument can be a JSON or any other string that needs to be encoded using base64 encoding."),(0,i.kt)("p",null,"For example, in the following command, ",(0,i.kt)("inlineCode",{parentName:"p"},"encoder")," outputs the base64-encoded string of ",(0,i.kt)("inlineCode",{parentName:"p"},'{"userID":"admin"}')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'./bin/encoder -data=\'{"user_id":"admin"}\'\n')),(0,i.kt)("p",null,"The above command produces the base64-encoded string"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"eyJ1c2VyX2lkIjoiYWRtaW4ifQ==\n")),(0,i.kt)("h3",{id:"32-using-decoder"},"3.2) Using decoder"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"./bin/decoder\n")),(0,i.kt)("p",null,"prints the following"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"The decoder decodes the base64-encoded value field in the GetDataResponseEnvelope. Pass the JSON output of GetDataResponseEnvelope to the `-getresponse` flag\n  -getresponse string\n        JSON output of GetDataResponseEnvelope. The value field in the JSON output will be decoded. Surround the JSON data with single quotes.\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"decoder")," utility expects only one argument, i.e., GetDataResponseEnvelope, as shown above. The ",(0,i.kt)("inlineCode",{parentName:"p"},"getresponse")," argument must be a JSON representation of\nGetDataResponseEnvelope."),(0,i.kt)("p",null,"For example, in the following command, ",(0,i.kt)("inlineCode",{parentName:"p"},"decoder")," decodes the base64-encoded value filed in "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-webmanifest"},'{\n  "response": {\n    "header": {\n      "node_id": "orion-server1"\n    },\n    "value": "eyJuYW1lIjoiYWJjIiwiYWdlIjozMSwiZ3JhZHVhdGVkIjp0cnVlfQ==",\n    "metadata": {\n      "version": {\n        "block_num": 4\n      },\n      "access_control": {\n        "read_users": {\n          "alice": true,\n          "bob": true\n        },\n        "read_write_users": {\n          "alice": true\n        }\n      }\n    }\n  },\n  "signature": "MEQCIFK/bLBAu2mzH0DmRt9SPyTDfxG5qwPHTe05C4uKjGr1AiALnlwpVQ0spTzUMxgJOEHO8Li+P/7uACGXMIQK32O6WQ=="\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'./bin/decoder -getresponse=\'{"response":{"header":{"node_id":"orion-server1"},"value":"eyJuYW1lIjoiYWJjIiwiYWdlIjozMSwiZ3JhZHVhdGVkIjp0cnVlfQ==","metadata":{"version":{"block_num":4},"access_control":{"read_users":{"alice":true,"bob":true},"read_write_users":{"alice":true}}}},"signature":"MEUCIHMs2zPzybWNY52JqiD+mYPNgof6/Kg/cj4KsoJPu5IXAiEAtRprbynYqFCUyU+hOzsXaQVg/iBM2CZatLr1Fo+XJcA="}\' | jq .\n')),(0,i.kt)("p",null,"The above command produces the base64-encoded string"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-webmanifest"},'{\n  "response": {\n    "header": {\n      "node_id": "orion-server1"\n    },\n    "value": "{\\"name\\":\\"abc\\",\\"age\\":31,\\"graduated\\":true}",\n    "metadata": {\n      "version": {\n        "block_num": 4\n      },\n      "access_control": {\n        "read_users": {\n          "alice": true,\n          "bob": true\n        },\n        "read_write_users": {\n          "alice": true\n        }\n      }\n    }\n  },\n  "signature": "MEUCIHMs2zPzybWNY52JqiD+mYPNgof6/Kg/cj4KsoJPu5IXAiEAtRprbynYqFCUyU+hOzsXaQVg/iBM2CZatLr1Fo+XJcA="\n}\n\n')),(0,i.kt)("p",null,"It can be seen that the ",(0,i.kt)("inlineCode",{parentName:"p"},'"value":"eyJuYW1lIjoiYWJjIiwiYWdlIjozMSwiZ3JhZHVhdGVkIjp0cnVlfQ=="')," has been decoded to ",(0,i.kt)("inlineCode",{parentName:"p"},'"value": "{\\"name\\":\\"abc\\",\\"age\\":31,\\"graduated\\":true}"'),"."))}c.isMDXComponent=!0}}]);