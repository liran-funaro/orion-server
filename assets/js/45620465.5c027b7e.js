"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6745],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return u}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),c=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return a.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=c(n),u=i,h=m["".concat(d,".").concat(u)]||m[u]||p[u]||r;return n?a.createElement(h,o(o({ref:t},l),{},{components:n})):a.createElement(h,o({ref:t},l))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1312:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return d},metadata:function(){return c},toc:function(){return l},default:function(){return m}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],s={id:"dbtx",title:"Database Administration Transaction"},d="Database Administration Transaction",c={unversionedId:"getting-started/transactions/gosdk/dbtx",id:"getting-started/transactions/gosdk/dbtx",isDocsHomePage:!1,title:"Database Administration Transaction",description:"The database administration transaction can be used for",source:"@site/docs/getting-started/transactions/gosdk/dbtx.md",sourceDirName:"getting-started/transactions/gosdk",slug:"/getting-started/transactions/gosdk/dbtx",permalink:"/orion-server/docs/getting-started/transactions/gosdk/dbtx",tags:[],version:"current",frontMatter:{id:"dbtx",title:"Database Administration Transaction"},sidebar:"Documentation",previous:{title:"Setting Up Command Line Utilities",permalink:"/orion-server/docs/getting-started/pre-requisite/curl"},next:{title:"User Administration Transaction",permalink:"/orion-server/docs/getting-started/transactions/gosdk/usertx"}},l=[{value:"1) Creation of Databases",id:"1-creation-of-databases",children:[{value:"1.1) Source Code",id:"11-source-code",children:[],level:3},{value:"1.2) Source Code Commentary",id:"12-source-code-commentary",children:[],level:3}],level:2},{value:"2) Creation of Database with Index Definition",id:"2-creation-of-database-with-index-definition",children:[{value:"2.1) Source Code",id:"21-source-code",children:[],level:3},{value:"2.2) Source Code Commentary",id:"22-source-code-commentary",children:[],level:3}],level:2},{value:"3) Deletion of Existing Databases",id:"3-deletion-of-existing-databases",children:[{value:"3.1) Source Code",id:"31-source-code",children:[],level:3},{value:"3.2) Source Code Commentary",id:"32-source-code-commentary",children:[],level:3}],level:2}],p={toc:l};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"database-administration-transaction"},"Database Administration Transaction"),(0,r.kt)("p",null,"The database administration transaction can be used for"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#1-creation-of-databases"},"Creation of new databases without index")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#3-creation-of-database-with-index-definition"},"Creation of a new database with index definition")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#4-deletion-of-existing-databases"},"Deletion of existing databases"))),(0,r.kt)("p",null,"Note that all database administration transactions must be submitted by the admin."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Prerequisite")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},(0,r.kt)("a",{parentName:"p",href:"../../pre-requisite/gosdk#creating-a-connection-to-the-orion-cluster"},"Create a connection")," and ",(0,r.kt)("a",{parentName:"p",href:"../../pre-requisite/gosdk#opening-a-database-session"},"Open a database session"),"."))),(0,r.kt)("p",null,"Once a ",(0,r.kt)("a",{parentName:"p",href:"../../pre-requisite/gosdk#opening-a-database-session"},"database session")," is created, we can call ",(0,r.kt)("inlineCode",{parentName:"p"},"session.DBsTx()")," to start the database administration transaction context. On this transaction context, we have the support for following method calls:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// DBsTxContext abstraction for database management transaction context\ntype DBsTxContext interface {\n    // CreateDB creates new database along with index definition for the query.\n    // The index is a map of attributes/fields in json document, i.e., value associated\n    // with the key, to its value type. For example, map["name"]types.IndexAttributeType_STRING\n    // denotes that "name" attribute in all json documents to be stored in the given\n    // database to be indexed for queries. Note that only indexed attributes can be\n    // used as predicates in the query string. Currently, we support the following three\n    // value types: STRING, BOOLEAN, and INT64\n    CreateDB(dbName string, index map[string]types.IndexAttributeType) error\n    // DeleteDB deletes database\n    DeleteDB(dbName string) error\n    // Exists checks whenever database is already created\n    Exists(dbName string) (bool, error)\n    // Commit submits transaction to the server, can be sync or async.\n    // Sync option returns tx id and tx receipt and\n    // in case of error, commitTimeout error is one of possible errors to return.\n    // Async returns tx id, always nil as tx receipt or error\n    Commit(sync bool) (string, *types.TxReceipt, error)\n    // Abort cancel submission and abandon all changes\n    // within given transaction context\n    Abort() error\n    // CommittedTxEnvelope returns transaction envelope, can be called only after Commit(), otherwise will return nil\n    CommittedTxEnvelope() (proto.Message, error)\n}\n')),(0,r.kt)("h2",{id:"1-creation-of-databases"},"1) Creation of Databases"),(0,r.kt)("h3",{id:"11-source-code"},"1.1) Source Code"),(0,r.kt)("p",null,"The following is the source code to create two new databases named ",(0,r.kt)("inlineCode",{parentName:"p"},"db1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"db2"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "strconv"\n)\n\nfunc main() {\n    db, err := createConnection()\n    // if err is not nil, print and return\n\n    session, err := openSession(db, "admin")\n    // if err is not nil, print and return\n\n    dbtx, err := session.DBsTx()\n    // if err is not nil, print and return\n\n    err = dbtx.CreateDB("db1", nil)\n    // if err is not nil, print and return\n\n    err = dbtx.CreateDB("db2", nil)\n    // if err is not nil, print and return\n\n    txID, receipt, err := dbtx.Commit(true)\n    // if err is not nil, print and return\n\n    fmt.Println("transaction with txID " + txID + " got committed in the block " + strconv.Itoa(int(receipt.GetHeader().GetBaseHeader().GetNumber())))\n}\n')),(0,r.kt)("h3",{id:"12-source-code-commentary"},"1.2) Source Code Commentary"),(0,r.kt)("p",null,"For the sake of simplicity, not all ",(0,r.kt)("inlineCode",{parentName:"p"},"errors")," are handled in this code. Further, the implementation of ",(0,r.kt)("inlineCode",{parentName:"p"},"createConnection()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"openSession()")," can be found ",(0,r.kt)("a",{parentName:"p",href:"../../pre-requisite/gosdk"},"here"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"session.DBsTx()")," starts a new database administration transaction and returns the database administration transaction context. We can then perform\nall administrative activities using the transaction context. The ",(0,r.kt)("inlineCode",{parentName:"p"},'dbtx.CreateDB("db1", nil)')," creates the database named ",(0,r.kt)("inlineCode",{parentName:"p"},"db1"),", while ",(0,r.kt)("inlineCode",{parentName:"p"},'dbtx.CreateDB("db2", "nil")'),"\ncreates the database named ",(0,r.kt)("inlineCode",{parentName:"p"},"db2"),". Then, the transaction is committed by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"dbtx.Commit(true)"),". The argument ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," denotes that this is a synchronous\nsubmission. As a result, the ",(0,r.kt)("inlineCode",{parentName:"p"},"Commit()")," returns the transaction receipt if this transaction gets committed before the ",(0,r.kt)("inlineCode",{parentName:"p"},"TxTimeout")," configured in the ",(0,r.kt)("inlineCode",{parentName:"p"},"openSession()"),"."),(0,r.kt)("p",null,"The structure of ",(0,r.kt)("inlineCode",{parentName:"p"},"txReceipt")," can be seen ","[here]",". The user can store this ",(0,r.kt)("inlineCode",{parentName:"p"},"txReceipt")," as it is a commitment used to verify the proof generated by the server."),(0,r.kt)("p",null,"Refer to ",(0,r.kt)("a",{parentName:"p",href:"../../queries/gosdk/db"},"Check Existence of a Database")," in queries."),(0,r.kt)("h2",{id:"2-creation-of-database-with-index-definition"},"2) Creation of Database with Index Definition"),(0,r.kt)("h3",{id:"21-source-code"},"2.1) Source Code"),(0,r.kt)("p",null,"The following is the source code to create a new database named ",(0,r.kt)("inlineCode",{parentName:"p"},"db8")," with index definition."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "strconv"\n\n    "github.com/hyperledger-labs/orion-server/pkg/types"\n)\n\nfunc main() {\n    db, err := createConnection()\n    // if err is not nil, print and return\n\n    session, err := openSession(db, "admin")\n    // if err is not nil, print and return\n\n    dbtx, err := session.DBsTx()\n    // if err is not nil, print and return\n\n    index := map[string]types.IndexAttributeType{\n        "attr1": types.IndexAttributeType_BOOLEAN,\n        "attr2": types.IndexAttributeType_NUMBER,\n        "attr3": types.IndexAttributeType_STRING,\n    }\n    err = dbtx.CreateDB("db8", index)\n    // if err is not nil, print and return\n\n    txID, receipt, err := dbtx.Commit(true)\n    // if err is not nil, print and return\n\n    fmt.Println("transaction with txID " + txID + " got committed in the block " + strconv.Itoa(int(receipt.GetHeader().GetBaseHeader().GetNumber())))\n}\n')),(0,r.kt)("h3",{id:"22-source-code-commentary"},"2.2) Source Code Commentary"),(0,r.kt)("p",null,"For the sake of simplicity, not all errors are handled in this code. Further, the implementation of ",(0,r.kt)("inlineCode",{parentName:"p"},"createConnection()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"openSession()")," can be found ",(0,r.kt)("a",{parentName:"p",href:"../../pre-requisite/gosdk"},"here"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"session.DBsTx()")," starts a new database administration transaction and returns the database administration transaction context. We can then perform all\nadministrative activities using the transaction context. To define an index for a database to be created, first we need to create the index definition.\nThe above code creates the following index:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'    index := map[string]types.IndexAttributeType{\n        "attr1": types.IndexAttributeType_BOOLEAN,\n        "attr2": types.IndexAttributeType_NUMBER,\n        "attr3": types.IndexAttributeType_STRING,\n    }\n')),(0,r.kt)("p",null,"This index dictates to the Orion server to create an index for three attributes in the JSON document stored in the database to be created. These attributes\nare ",(0,r.kt)("inlineCode",{parentName:"p"},"attr1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"attr2"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"attr3"),". The type of each of these attributes are also provided in the index defintion. "),(0,r.kt)("p",null,"Once the index is defined, the database with this index is created by calling ",(0,r.kt)("inlineCode",{parentName:"p"},'dbtx.CreateDB("db8", index)'),". "),(0,r.kt)("p",null,"Finally, the transaction is committed by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"dbtx.Commit(true)"),". The argument ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," denotes that this is a synchronous submission. As a result, the ",(0,r.kt)("inlineCode",{parentName:"p"},"Commit()")," returns the transaction receipt if this transaction gets committed before the ",(0,r.kt)("inlineCode",{parentName:"p"},"TxTimeout")," configured in\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"openSession()"),"."),(0,r.kt)("p",null,"The structure of ",(0,r.kt)("inlineCode",{parentName:"p"},"txReceipt")," can be seen ","[here]",". The user can store this ",(0,r.kt)("inlineCode",{parentName:"p"},"txReceipt")," as it is a commitment used to verify the proof generated by the server."),(0,r.kt)("h2",{id:"3-deletion-of-existing-databases"},"3) Deletion of Existing Databases"),(0,r.kt)("h3",{id:"31-source-code"},"3.1) Source Code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "strconv"\n)\n\nfunc main() {\n    db, err := createConnection()\n    // if err is not nil, print and return\n\n    session, err := openSession(db, "admin")\n    // if err is not nil, print and return\n\n    dbtx, err := session.DBsTx()\n    // if err is not nil, print and return\n\n    err = dbtx.DeleteDB("db1")\n    // if err is not nil, print and return\n\n    err = dbtx.DeleteDB("db2")\n    // if err is not nil, print and return\n\n    txID, receipt, err := dbtx.Commit(true)\n    // if err is not nil, print and return\n\n    fmt.Println("transaction with txID " + txID + " got committed in the block " + strconv.Itoa(int(receipt.GetHeader().GetBaseHeader().GetNumber())))\n}\n')),(0,r.kt)("h3",{id:"32-source-code-commentary"},"3.2) Source Code Commentary"),(0,r.kt)("p",null,"For the sake of simplicity, not all errors are handled in this code. Further, the implementation of ",(0,r.kt)("inlineCode",{parentName:"p"},"createConnection()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"openSession()")," can be found ",(0,r.kt)("a",{parentName:"p",href:"../../pre-requisite/gosdk"},"here"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"session.DBsTx()")," starts a new database administration transaction and returns the database administration transaction context. We can then perform all\nadministrative activities using the transaction context."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},'dbtx.DeleteDB("db1")')," and ",(0,r.kt)("inlineCode",{parentName:"p"},'dbtx.DeleteDB("db2")')," delete the databases ",(0,r.kt)("inlineCode",{parentName:"p"},"db1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"db2"),", respectively."),(0,r.kt)("p",null,"Then, the transaction is committed by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"dbtx.Commit(true)"),". The argument ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," denotes that this is a synchronous submission. As a result, the ",(0,r.kt)("inlineCode",{parentName:"p"},"Commit()"),"  returns the transaction receipt if this transaction gets committed before the ",(0,r.kt)("inlineCode",{parentName:"p"},"TxTimeout")," configured in\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"openSession()"),"."),(0,r.kt)("p",null,"The structure of ",(0,r.kt)("inlineCode",{parentName:"p"},"txReceipt")," can be seen ","[here]",". The user can store this ",(0,r.kt)("inlineCode",{parentName:"p"},"txReceipt")," as it is a commitment used to verify the proof generated by the server."),(0,r.kt)("p",null,"Refer to ",(0,r.kt)("a",{parentName:"p",href:"../../queries/gosdk/db"},"Check Existence of a Database")," in queries."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Additional Examples")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"In addition to these examples, you can use the database administration transaction examples from the go-sdk examples folder: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/hyperledger-labs/orion-sdk-go/blob/main/examples/api/db_tx/db_tx.go"},"orion-sdk-go/examples/api/db_tx/db_tx.go")))))}m.isMDXComponent=!0}}]);