"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5513],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=d(n),u=i,h=m["".concat(l,".").concat(u)]||m[u]||p[u]||a;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var d=2;d<a;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4858:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return c},default:function(){return m}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],s={id:"usertx",title:"User Administration Transaction"},l="User Administration Transaction",d={unversionedId:"getting-started/transactions/gosdk/usertx",id:"getting-started/transactions/gosdk/usertx",isDocsHomePage:!1,title:"User Administration Transaction",description:"We can create, update, and delete users of the Orion cluster using the user administration transaction.",source:"@site/docs/getting-started/transactions/gosdk/usertx.md",sourceDirName:"getting-started/transactions/gosdk",slug:"/getting-started/transactions/gosdk/usertx",permalink:"/orion-server/docs/getting-started/transactions/gosdk/usertx",tags:[],version:"current",frontMatter:{id:"usertx",title:"User Administration Transaction"},sidebar:"Documentation",previous:{title:"Database Administration Transaction",permalink:"/orion-server/docs/getting-started/transactions/gosdk/dbtx"},next:{title:"Data Transaction",permalink:"/orion-server/docs/getting-started/transactions/gosdk/datatx"}},c=[{value:"1) Addition of Users",id:"1-addition-of-users",children:[{value:"1.1) Source Code",id:"11-source-code",children:[],level:3},{value:"1.2) Source Code Commentary",id:"12-source-code-commentary",children:[],level:3}],level:2},{value:"2) Update users",id:"2-update-users",children:[{value:"2.1) Source Code",id:"21-source-code",children:[],level:3},{value:"2.2) Source Code Commentary",id:"22-source-code-commentary",children:[],level:3}],level:2},{value:"3) Deletion of a User",id:"3-deletion-of-a-user",children:[{value:"3.1) Source Code",id:"31-source-code",children:[],level:3},{value:"3.2) Source Code Commentary",id:"32-source-code-commentary",children:[],level:3}],level:2}],p={toc:c};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"user-administration-transaction"},"User Administration Transaction"),(0,a.kt)("p",null,"We can create, update, and delete users of the Orion cluster using the user administration transaction."),(0,a.kt)("p",null,"In this document, we present examples for"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#2-adding-users"},"Adding users")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#3-updating-users"},"Updating users")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#4-deleting-a-user"},"Deleting users"))),(0,a.kt)("p",null,"Note that all user administration transactions must be submitted by the admin."),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"prerequisite")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"For all examples shown here to work, we need to have two databases named ",(0,a.kt)("inlineCode",{parentName:"p"},"db1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"db2")," in the Orion server. If you have not created these two databases,\nrefer to ",(0,a.kt)("a",{parentName:"p",href:"./dbtx#creation-of-databases"},"creates databases using SDK")," to create ",(0,a.kt)("inlineCode",{parentName:"p"},"db1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"db2"),"."),(0,a.kt)("p",{parentName:"div"},(0,a.kt)("a",{parentName:"p",href:"../../pre-requisite/gosdk#creating-a-connection-to-the-orion-cluster"},"Create a connection")," and ",(0,a.kt)("a",{parentName:"p",href:"../../pre-requisite/gosdk#opening-a-database-session"},"Open a database session"),"."))),(0,a.kt)("p",null,"Once a ",(0,a.kt)("a",{parentName:"p",href:"./../../pre-requisite/gosdk#opening-a-database-session"},"database session")," is created, we can call ",(0,a.kt)("inlineCode",{parentName:"p"},"session.UsersTx()")," to start the users\nadministration transaction context. On this transaction context, we have the support for following method calls:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type UsersTxContext interface {\n    // PutUser introduce new user into database\n    PutUser(user *types.User, acl *types.AccessControl) error\n    // GetUser obtain user's record from database\n    GetUser(userID string) (*types.User, error)\n    // RemoveUser delete existing user from the database\n    RemoveUser(userID string) error\n    // Commit submits transaction to the server, can be sync or async.\n    // Sync option returns tx id and tx receipt and\n    // in case of error, commitTimeout error is one of possible errors to return.\n    // Async returns tx id, always nil as tx receipt or error\n    Commit(sync bool) (string, *types.TxReceipt, error)\n    // Abort cancel submission and abandon all changes\n    // within given transaction context\n    Abort() error\n    // CommittedTxEnvelope returns transaction envelope, can be called only after Commit(), otherwise will return nil\n    CommittedTxEnvelope() (proto.Message, error)\n}\n")),(0,a.kt)("h2",{id:"1-addition-of-users"},"1) Addition of Users"),(0,a.kt)("p",null,"When the cluster is started for the first time, it will contain only the admin user specified in the ",(0,a.kt)("inlineCode",{parentName:"p"},"config.yml"),". This admin user can add any other user to the cluster."),(0,a.kt)("h3",{id:"11-source-code"},"1.1) Source Code"),(0,a.kt)("p",null,"The following code adds two the new users ",(0,a.kt)("inlineCode",{parentName:"p"},"alice")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"bob")," to the Orion cluster."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "encoding/pem"\n    "fmt"\n    "io/ioutil"\n    "strconv"\n\n    "github.com/hyperledger-labs/orion-server/pkg/types"\n)\n\nfunc main() {\n    bcdb, err := createConnection()\n    // if err is not nil, print and return\n\n    session, err := openSession(bcdb, "admin")\n    // if err is not nil, print and return\n\n    tx, err := session.UsersTx()\n    // if err is not nil, print and return\n\n    alice, err := createAliceUser()\n    // if err is not nil, print and return\n\n    bob, err := createBobUser()\n    // if err is not nil, print and return\n\n    err = tx.PutUser(alice, nil)\n    // if err is not nil, print and return\n\n\n    bobACL := &types.AccessControl{\n        ReadUsers: map[string]bool{\n            "admin": true,\n        },\n    }\n\n    err = tx.PutUser(bob, bobACL)\n    // if err is not nil, print and return\n\n    txID, receipt, err := tx.Commit(true)\n    // if err is not nil, print and return\n\n    fmt.Println("transaction with txID " + txID + " got committed in the block " + strconv.Itoa(int(receipt.GetHeader().GetBaseHeader().GetNumber())))\n}\n\nfunc createAliceUser() (*types.User, error) {\n    alicePemUserCert, err := ioutil.ReadFile("./crypto/alice/alice.pem")\n    // if err is not nil, print and return\n\n    aliceCertBlock, _ := pem.Decode(alicePemUserCert)\n\n    alice := &types.User{\n        Id:          "alice",\n        Certificate: aliceCertBlock.Bytes,\n        Privilege: &types.Privilege{\n            DbPermission: map[string]types.Privilege_Access{\n                "db1": types.Privilege_Read,\n                "db2": types.Privilege_ReadWrite,\n            },\n        },\n    }\n\n    return alice, nil\n}\n\nfunc createBobUser() (*types.User, error) {\n    bobPemUserCert, err := ioutil.ReadFile("./crypto/bob/bob.pem")\n    // if err is not nil, print and return\n\n    bobCertBlock, _ := pem.Decode(bobPemUserCert)\n\n    bob := &types.User{\n        Id:          "bob",\n        Certificate: bobCertBlock.Bytes,\n        Privilege: &types.Privilege{\n            DbPermission: map[string]types.Privilege_Access{\n                "db1": types.Privilege_Read,\n                "db2": types.Privilege_Read,\n            },\n        },\n    }\n\n    return bob, nil\n}\n')),(0,a.kt)("h3",{id:"12-source-code-commentary"},"1.2) Source Code Commentary"),(0,a.kt)("p",null,"For the sake of simplicity, not all errors are handled in this code. Further, the implementation of ",(0,a.kt)("inlineCode",{parentName:"p"},"createConnection()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"openSession()")," can be found ",(0,a.kt)("a",{parentName:"p",href:"../../pre-requisite/gosdk"},"here"),"."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"session.UsersTx()")," starts a new user administration transaction and returns the user administration transaction context. We can then perform all\nuser administrative activities using this transaction context."),(0,a.kt)("p",null,"The first setup is to create the users ",(0,a.kt)("inlineCode",{parentName:"p"},"alice")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"bob"),". The structure of a user is shown below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type User struct {\n    Id                   string\n    Certificate          []byte\n    Privilege            *Privilege\n}\n\ntype Privilege struct {\n    DbPermission map[string]Privilege_Access\n    // admin has privileges to submit a user administration transaction,\n    // cluster configuration transaction, and database administration\n    // transaction. Further, admin has permission to read-write states\n    // from any database provided that the state has no ACL defined. If\n    // a state has a read and write ACL, the admin can read or write to\n    // the state only if the admin is listed in the read or write ACL list.\n    Admin                bool\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Id")," field holds a unique identifier or username. The ",(0,a.kt)("inlineCode",{parentName:"p"},"Certificate")," field holds the pem-decoded certificate of the user. The ",(0,a.kt)("inlineCode",{parentName:"p"},"Privilege")," field holds\nthe access privileges of this user, such as read and write permissions to various databases."),(0,a.kt)("p",null,"In the above code, we created the user ",(0,a.kt)("inlineCode",{parentName:"p"},"alice")," with read permission to the database ",(0,a.kt)("inlineCode",{parentName:"p"},"db1")," and read-write permission to the database ",(0,a.kt)("inlineCode",{parentName:"p"},"db2"),". We also created the user ",(0,a.kt)("inlineCode",{parentName:"p"},"bob")," with only read permission to both ",(0,a.kt)("inlineCode",{parentName:"p"},"db1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"db2"),"."),(0,a.kt)("p",null,"Once the users are created, ",(0,a.kt)("inlineCode",{parentName:"p"},'tx.PutUser("alice", nil)')," stores the user ",(0,a.kt)("inlineCode",{parentName:"p"},"alice")," to the database while ",(0,a.kt)("inlineCode",{parentName:"p"},'tx.PutUser("bob", bobACL)')," stores the user ",(0,a.kt)("inlineCode",{parentName:"p"},"bob"),"\nto the database with read-write ACL on the user ",(0,a.kt)("inlineCode",{parentName:"p"},"bob"),"."),(0,a.kt)("p",null,"For the Access Control List (ACL), we have passed ",(0,a.kt)("inlineCode",{parentName:"p"},"nil")," for ",(0,a.kt)("inlineCode",{parentName:"p"},"alice"),". This means no access control on the user ",(0,a.kt)("inlineCode",{parentName:"p"},"alice"),". Hence, any user can read and update ",(0,a.kt)("inlineCode",{parentName:"p"},"alice"),". However, for\n",(0,a.kt)("inlineCode",{parentName:"p"},"bob"),", we have set the ACL."),(0,a.kt)("p",null,"The structure of Access Control List is shown below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type AccessControl struct {\n    ReadUsers            map[string]bool\n    ReadWriteUsers       map[string]bool\n}\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ReadUsers")," can be used to define which users have read access on this user. In the above code, only the ",(0,a.kt)("inlineCode",{parentName:"p"},"admin")," user has the read access on the user ",(0,a.kt)("inlineCode",{parentName:"p"},"bob"),".\nAs there are no users in ",(0,a.kt)("inlineCode",{parentName:"p"},"ReadWriteUsers"),", no one can update the user ",(0,a.kt)("inlineCode",{parentName:"p"},"bob"),". In other words, the user ",(0,a.kt)("inlineCode",{parentName:"p"},"bob")," can be read by ",(0,a.kt)("inlineCode",{parentName:"p"},"admin")," and never be updated by anyone."),(0,a.kt)("p",null,"Finally, the transaction is committed by calling ",(0,a.kt)("inlineCode",{parentName:"p"},"dbtx.Commit(true)"),'. The argument "true" denotes that this is a synchronous submission. As a result, the ',(0,a.kt)("inlineCode",{parentName:"p"},"Commit()"),"\nreturns the transaction receipt if this transaction gets committed before the ",(0,a.kt)("inlineCode",{parentName:"p"},"TxTimeout")," configured in the ",(0,a.kt)("inlineCode",{parentName:"p"},"openSession()"),"."),(0,a.kt)("p",null,"The structure of txReceipt can be seen ","[here]",". The user can store this txReceipt as it is a commitment used to verify the proof generated by the server."),(0,a.kt)("h2",{id:"2-update-users"},"2) Update users"),(0,a.kt)("p",null,"Let's update the user ",(0,a.kt)("inlineCode",{parentName:"p"},"alice")," to have no privileges. This can be done by"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Fetching the ",(0,a.kt)("inlineCode",{parentName:"li"},"alice")," record from the database"),(0,a.kt)("li",{parentName:"ol"},"Setting the ",(0,a.kt)("inlineCode",{parentName:"li"},"Privilege")," field to ",(0,a.kt)("inlineCode",{parentName:"li"},"nil")),(0,a.kt)("li",{parentName:"ol"},"Committing the updated ",(0,a.kt)("inlineCode",{parentName:"li"},"alice")," record to the database")),(0,a.kt)("h3",{id:"21-source-code"},"2.1) Source Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "strconv"\n)\n\nfunc main() {\n    bcdb, err := createConnection()\n    // if err is not nil, print and return\n\n    session, err := openSession(bcdb, "admin")\n    // if err is not nil, print and return\n\n    tx, err := session.UsersTx()\n    // if err is not nil, print and return\n\n    alice, err := tx.GetUser("alice")\n    // if err is not nil, print and return\n\n    alice.Privilege = nil\n    err = tx.PutUser(alice, nil)\n    // if err is not nil, print and return\n\n    txID, receipt, err := tx.Commit(true)\n    // if err is not nil, print and return\n\n    fmt.Println("transaction with txID " + txID + " got committed in the block " + strconv.Itoa(int(receipt.GetHeader().GetBaseHeader().GetNumber())))\n}\n')),(0,a.kt)("h3",{id:"22-source-code-commentary"},"2.2) Source Code Commentary"),(0,a.kt)("p",null,"For the sake of simplicity, not all errors are handled in this code. Further, the implementation of ",(0,a.kt)("inlineCode",{parentName:"p"},"createConnection()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"openSession()")," can be found\n",(0,a.kt)("a",{parentName:"p",href:"../../pre-requisite/gosdk"},"here"),"."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"session.UsersTx()")," starts a new user administration transaction and returns the user administration transaction context. We can then perform\nall user administrative activities using this transaction context."),(0,a.kt)("p",null,"In order to update the ",(0,a.kt)("inlineCode",{parentName:"p"},"Privilege")," detail of the user ",(0,a.kt)("inlineCode",{parentName:"p"},"alice"),", first we fetch the ",(0,a.kt)("inlineCode",{parentName:"p"},"alice")," record from the database. This is done by calling\n",(0,a.kt)("inlineCode",{parentName:"p"},'tx.GetUser("alice")'),". Second, to remove all privileges assigned to the user ",(0,a.kt)("inlineCode",{parentName:"p"},"alice"),", we set ",(0,a.kt)("inlineCode",{parentName:"p"},"Privilege")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"nil")," in the fetched record. Third, we\nstore the updated ",(0,a.kt)("inlineCode",{parentName:"p"},"alice")," to the database by calling ",(0,a.kt)("inlineCode",{parentName:"p"},"tx.PutUser(alice, nil)"),"."),(0,a.kt)("p",null,"Finally, the transaction is committed by calling ",(0,a.kt)("inlineCode",{parentName:"p"},"dbtx.Commit(true)"),". The argument true denotes that this is a synchronous submission. As a result,\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"Commit()")," returns the transaction receipt if this transaction gets committed before the ",(0,a.kt)("inlineCode",{parentName:"p"},"TxTimeout")," configured in the ",(0,a.kt)("inlineCode",{parentName:"p"},"openSession()"),"."),(0,a.kt)("h2",{id:"3-deletion-of-a-user"},"3) Deletion of a User"),(0,a.kt)("p",null,"Let's delete the user ",(0,a.kt)("inlineCode",{parentName:"p"},"bob"),". To do that, we need to execute the following steps:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Fetch the user ",(0,a.kt)("inlineCode",{parentName:"li"},"alice"),". This records the read version in the transaction."),(0,a.kt)("li",{parentName:"ol"},"Delete the user ",(0,a.kt)("inlineCode",{parentName:"li"},"alice"),"."),(0,a.kt)("li",{parentName:"ol"},"Commit the transaction.")),(0,a.kt)("p",null,"Note that if we do not fetch the user ",(0,a.kt)("inlineCode",{parentName:"p"},"alice")," and instead delete the user directly, it results in a blind delete."),(0,a.kt)("h3",{id:"31-source-code"},"3.1) Source Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "strconv"\n)\n\nfunc main() {\n    bcdb, err := createConnection()\n    // if err is not nil, print and return\n\n    session, err := openSession(bcdb, "admin")\n    // if err is not nil, print and return\n\n    tx, err := session.UsersTx()\n    // if err is not nil, print and return\n\n    _, err = tx.GetUser("alice")\n    // if err is not nil, print and return\n\n    err = tx.RemoveUser("alice")\n    // if err is not nil, print and return\n\n    txID, receipt, err := tx.Commit(true)\n    // if err is not nil, print and return\n\n    fmt.Println("transaction with txID " + txID + " got committed in the block " + strconv.Itoa(int(receipt.GetHeader().GetBaseHeader().GetNumber())))\n}\n')),(0,a.kt)("h3",{id:"32-source-code-commentary"},"3.2) Source Code Commentary"),(0,a.kt)("p",null,"For simplicity, not all errors are handled in this code. Further, the implementation of ",(0,a.kt)("inlineCode",{parentName:"p"},"createConnection()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"openSession()")," can be found\n",(0,a.kt)("a",{parentName:"p",href:"../../pre-requisite/gosdk"},"here"),"."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"session.UsersTx()")," starts a new user administration transaction and returns the user administration transaction context. We can then perform\nall user administrative activities using this transaction context."),(0,a.kt)("p",null,"To delete the user ",(0,a.kt)("inlineCode",{parentName:"p"},"alice"),", first we fetch the user by calling ",(0,a.kt)("inlineCode",{parentName:"p"},'tx.GetUser("alice")'),". This is just to record the version so that multi-version concurrency\ncontrol can be executed. Second, the user is deleted by calling ",(0,a.kt)("inlineCode",{parentName:"p"},'tx.RemoveUser("alice")'),". Finally, the transaction is committed by calling ",(0,a.kt)("inlineCode",{parentName:"p"},"dbtx.Commit(true)"),'.\nThe argument "true" denotes that this is a synchronous submission. As a result, the ',(0,a.kt)("inlineCode",{parentName:"p"},"Commit()")," returns the transaction receipt if this transaction gets\ncommitted before the ",(0,a.kt)("inlineCode",{parentName:"p"},"TxTimeout")," configured in the ",(0,a.kt)("inlineCode",{parentName:"p"},"openSession()"),"."),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Additional Examples")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"In addition to this example, you can download and use user administration transaction example from the gosdk examples folder: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/hyperledger-labs/orion-sdk-go/blob/main/examples/api/user_tx/user_tx.go"},"orion-sdk-go/examples/api/user_tx/user_tx.go")))))}m.isMDXComponent=!0}}]);