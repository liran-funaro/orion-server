// Copyright IBM Corp. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.15.8
// source: configuration.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Privilege_Access int32

const (
	Privilege_Read      Privilege_Access = 0
	Privilege_ReadWrite Privilege_Access = 1
)

// Enum value maps for Privilege_Access.
var (
	Privilege_Access_name = map[int32]string{
		0: "Read",
		1: "ReadWrite",
	}
	Privilege_Access_value = map[string]int32{
		"Read":      0,
		"ReadWrite": 1,
	}
)

func (x Privilege_Access) Enum() *Privilege_Access {
	p := new(Privilege_Access)
	*p = x
	return p
}

func (x Privilege_Access) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Privilege_Access) Descriptor() protoreflect.EnumDescriptor {
	return file_configuration_proto_enumTypes[0].Descriptor()
}

func (Privilege_Access) Type() protoreflect.EnumType {
	return &file_configuration_proto_enumTypes[0]
}

func (x Privilege_Access) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Privilege_Access.Descriptor instead.
func (Privilege_Access) EnumDescriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{10, 0}
}

// ClusterConfig holds the shared configuration of a blockchain database cluster.
// This includes:
// - a set of nodes that server client requests,
// - a set of admins,
// - the certificate authority configuration, including root and intermediate certificates, and
// - the consensus configuration.
//
// This part of the configuration is replicated and is common to all nodes.
// After the initial bootstrap, this part of the configuration can change only through configuration transactions.
type ClusterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of nodes that serve client requests, as they are known to clients.
	Nodes []*NodeConfig `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// The set of database administrators.
	Admins []*Admin `protobuf:"bytes,2,rep,name=admins,proto3" json:"admins,omitempty"`
	// The x509 certificates of the root and intermediate certificate authorities that issued all the certificates used
	// for client facing communication, including the client certificates and the server certificates for signing
	// transactions and blocks.
	CertAuthConfig *CAConfig `protobuf:"bytes,3,opt,name=cert_auth_config,json=certAuthConfig,proto3" json:"cert_auth_config,omitempty"`
	// The consensus configuration.
	ConsensusConfig *ConsensusConfig `protobuf:"bytes,4,opt,name=consensus_config,json=consensusConfig,proto3" json:"consensus_config,omitempty"`
	LedgerConfig    *LedgerConfig    `protobuf:"bytes,5,opt,name=ledger_config,json=ledgerConfig,proto3" json:"ledger_config,omitempty"`
}

func (x *ClusterConfig) Reset() {
	*x = ClusterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig) ProtoMessage() {}

func (x *ClusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig.ProtoReflect.Descriptor instead.
func (*ClusterConfig) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{0}
}

func (x *ClusterConfig) GetNodes() []*NodeConfig {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ClusterConfig) GetAdmins() []*Admin {
	if x != nil {
		return x.Admins
	}
	return nil
}

func (x *ClusterConfig) GetCertAuthConfig() *CAConfig {
	if x != nil {
		return x.CertAuthConfig
	}
	return nil
}

func (x *ClusterConfig) GetConsensusConfig() *ConsensusConfig {
	if x != nil {
		return x.ConsensusConfig
	}
	return nil
}

func (x *ClusterConfig) GetLedgerConfig() *LedgerConfig {
	if x != nil {
		return x.LedgerConfig
	}
	return nil
}

// NodeConfig holds the information about a database node in the cluster.
// This information is exposed to the clients.
// The address and port (see below) define the HTTP/REST endpoint that clients connect to,
// and must be reachable by clients that submit requests to the database.
type NodeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier for the node within the cluster.
	// TODO define and enforce the characters that can be used for this field. Should be something that complies with file names.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The host name or IP address of the HTTP/REST endpoint served by this node.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// The port of the HTTP/REST endpoint served by this node.
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// The x509 certificate used by this node to authenticate its communication with clients.
	// This certificate corresponds to the private key the server uses to sign blocks and transaction responses.
	Certificate []byte `protobuf:"bytes,4,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *NodeConfig) Reset() {
	*x = NodeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeConfig) ProtoMessage() {}

func (x *NodeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeConfig.ProtoReflect.Descriptor instead.
func (*NodeConfig) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{1}
}

func (x *NodeConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NodeConfig) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *NodeConfig) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *NodeConfig) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

// Admin holds the id and certificate of a cluster administrator.
type Admin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Certificate []byte `protobuf:"bytes,2,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *Admin) Reset() {
	*x = Admin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Admin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Admin) ProtoMessage() {}

func (x *Admin) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Admin.ProtoReflect.Descriptor instead.
func (*Admin) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{2}
}

func (x *Admin) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Admin) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type CAConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roots         [][]byte `protobuf:"bytes,1,rep,name=roots,proto3" json:"roots,omitempty"`
	Intermediates [][]byte `protobuf:"bytes,2,rep,name=intermediates,proto3" json:"intermediates,omitempty"`
}

func (x *CAConfig) Reset() {
	*x = CAConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAConfig) ProtoMessage() {}

func (x *CAConfig) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAConfig.ProtoReflect.Descriptor instead.
func (*CAConfig) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{3}
}

func (x *CAConfig) GetRoots() [][]byte {
	if x != nil {
		return x.Roots
	}
	return nil
}

func (x *CAConfig) GetIntermediates() [][]byte {
	if x != nil {
		return x.Intermediates
	}
	return nil
}

// The definitions of the clustered consensus algorithm, members, and parameters.
type ConsensusConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The consensus algorithm, currently only "raft" is supported.
	Algorithm string `protobuf:"bytes,1,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	// Peers that take part in consensus.
	Members []*PeerConfig `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
	// Peers that are allowed to connect and fetch the ledger from members, but do not take part in consensus.
	Observers []*PeerConfig `protobuf:"bytes,3,rep,name=observers,proto3" json:"observers,omitempty"`
	// Raft protocol parameters.
	RaftConfig *RaftConfig `protobuf:"bytes,4,opt,name=raft_config,json=raftConfig,proto3" json:"raft_config,omitempty"`
}

func (x *ConsensusConfig) Reset() {
	*x = ConsensusConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusConfig) ProtoMessage() {}

func (x *ConsensusConfig) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusConfig.ProtoReflect.Descriptor instead.
func (*ConsensusConfig) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{4}
}

func (x *ConsensusConfig) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *ConsensusConfig) GetMembers() []*PeerConfig {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *ConsensusConfig) GetObservers() []*PeerConfig {
	if x != nil {
		return x.Observers
	}
	return nil
}

func (x *ConsensusConfig) GetRaftConfig() *RaftConfig {
	if x != nil {
		return x.RaftConfig
	}
	return nil
}

// Configuration parameters on the distributed ledger capabilities and algorithms that must be defined uniformly across
// all servers.
type LedgerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Disables the state Merkle-Patricia-Trie construction. With MP-Trie construction disabled, the block's
	// BlockHeadr.state_merkle_tree_root_hash field will be nil.
	// This flag takes effect on deployment (bootstrap) only, from the first (genesis) block.
	// The value of this flag cannot be changed during run-time.
	StateMerklePatriciaTrieDisabled bool `protobuf:"varint,1,opt,name=state_merkle_patricia_trie_disabled,json=stateMerklePatriciaTrieDisabled,proto3" json:"state_merkle_patricia_trie_disabled,omitempty"`
}

func (x *LedgerConfig) Reset() {
	*x = LedgerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedgerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerConfig) ProtoMessage() {}

func (x *LedgerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerConfig.ProtoReflect.Descriptor instead.
func (*LedgerConfig) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{5}
}

func (x *LedgerConfig) GetStateMerklePatriciaTrieDisabled() bool {
	if x != nil {
		return x.StateMerklePatriciaTrieDisabled
	}
	return false
}

// PeerConfig defines a server that takes part in consensus, or an observer.
type PeerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The node ID correlates the peer definition here with the NodeConfig.ID field.
	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Raft ID must be >0 for members, or =0 for observers.
	RaftId uint64 `protobuf:"varint,2,opt,name=raft_id,json=raftId,proto3" json:"raft_id,omitempty"`
	// The host name or IP address that is used by other peers to connect to this peer.
	PeerHost string `protobuf:"bytes,3,opt,name=peer_host,json=peerHost,proto3" json:"peer_host,omitempty"`
	// The port that is used by other peers to connect to this peer.
	PeerPort uint32 `protobuf:"varint,4,opt,name=peer_port,json=peerPort,proto3" json:"peer_port,omitempty"`
}

func (x *PeerConfig) Reset() {
	*x = PeerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerConfig) ProtoMessage() {}

func (x *PeerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerConfig.ProtoReflect.Descriptor instead.
func (*PeerConfig) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{6}
}

func (x *PeerConfig) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PeerConfig) GetRaftId() uint64 {
	if x != nil {
		return x.RaftId
	}
	return 0
}

func (x *PeerConfig) GetPeerHost() string {
	if x != nil {
		return x.PeerHost
	}
	return ""
}

func (x *PeerConfig) GetPeerPort() uint32 {
	if x != nil {
		return x.PeerPort
	}
	return 0
}

type RaftConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time interval between two Node.Tick invocations, e.g. 100ms.
	// Any duration string parsable by ParseDuration():
	// https://golang.org/pkg/time/#ParseDuration
	TickInterval string `protobuf:"bytes,1,opt,name=tick_interval,json=tickInterval,proto3" json:"tick_interval,omitempty"`
	// The number of Node.Tick invocations that must pass  between elections.
	// That is, if a follower does not receive any
	// message from the leader of current term before ElectionTick has
	// elapsed, it will become candidate and start an election.
	// electionTicks must be greater than heartbeatTicks.
	ElectionTicks uint32 `protobuf:"varint,2,opt,name=election_ticks,json=electionTicks,proto3" json:"election_ticks,omitempty"`
	// The number of Node.Tick invocations that must
	// pass between heartbeats. That is, a leader sends heartbeat
	// messages to maintain its leadership every HeartbeatTick ticks.
	HeartbeatTicks uint32 `protobuf:"varint,3,opt,name=heartbeat_ticks,json=heartbeatTicks,proto3" json:"heartbeat_ticks,omitempty"`
	// Limits the max number of in-flight blocks (i.e. Raft messages).
	MaxInflightBlocks uint32 `protobuf:"varint,4,opt,name=max_inflight_blocks,json=maxInflightBlocks,proto3" json:"max_inflight_blocks,omitempty"`
	// Take a snapshot when cumulative data since last snapshot exceeds a certain size in bytes.
	SnapshotIntervalSize uint64 `protobuf:"varint,5,opt,name=snapshot_interval_size,json=snapshotIntervalSize,proto3" json:"snapshot_interval_size,omitempty"`
	// The maximal Raft ID in the cluster, during the entire lifetime of the cluster.
	// This is internally computed by the server when a config transaction commits and is read-only for clients (admins).
	// Raft IDs must be unique for all time, and may never be reused even for deleted peers. To enforce this Raft
	// requirement, we require that the Raft ID of a new peer added to the cluster must be higher than 'max_raft_id'.
	// We recommend to start a cluster with low ID numbers, e.g. (1,2,3) => 'max_raft_id'=3,
	// and then set the Raft ID of a new peer added to the cluster to 'max_raft_id'+1.
	MaxRaftId uint64 `protobuf:"varint,6,opt,name=max_raft_id,json=maxRaftId,proto3" json:"max_raft_id,omitempty"`
}

func (x *RaftConfig) Reset() {
	*x = RaftConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftConfig) ProtoMessage() {}

func (x *RaftConfig) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftConfig.ProtoReflect.Descriptor instead.
func (*RaftConfig) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{7}
}

func (x *RaftConfig) GetTickInterval() string {
	if x != nil {
		return x.TickInterval
	}
	return ""
}

func (x *RaftConfig) GetElectionTicks() uint32 {
	if x != nil {
		return x.ElectionTicks
	}
	return 0
}

func (x *RaftConfig) GetHeartbeatTicks() uint32 {
	if x != nil {
		return x.HeartbeatTicks
	}
	return 0
}

func (x *RaftConfig) GetMaxInflightBlocks() uint32 {
	if x != nil {
		return x.MaxInflightBlocks
	}
	return 0
}

func (x *RaftConfig) GetSnapshotIntervalSize() uint64 {
	if x != nil {
		return x.SnapshotIntervalSize
	}
	return 0
}

func (x *RaftConfig) GetMaxRaftId() uint64 {
	if x != nil {
		return x.MaxRaftId
	}
	return 0
}

// Database configuration. Stores default read/write ACLs
// Stored as value in _dbs system database under key 'name'
type DatabaseConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReadAccessUsers  []string `protobuf:"bytes,2,rep,name=read_access_users,json=readAccessUsers,proto3" json:"read_access_users,omitempty"`
	WriteAccessUsers []string `protobuf:"bytes,3,rep,name=write_access_users,json=writeAccessUsers,proto3" json:"write_access_users,omitempty"`
}

func (x *DatabaseConfig) Reset() {
	*x = DatabaseConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseConfig) ProtoMessage() {}

func (x *DatabaseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseConfig.ProtoReflect.Descriptor instead.
func (*DatabaseConfig) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{8}
}

func (x *DatabaseConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatabaseConfig) GetReadAccessUsers() []string {
	if x != nil {
		return x.ReadAccessUsers
	}
	return nil
}

func (x *DatabaseConfig) GetWriteAccessUsers() []string {
	if x != nil {
		return x.WriteAccessUsers
	}
	return nil
}

// User holds userID, certificate, privilege the user has,
// and groups the user belong to.
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Certificate []byte     `protobuf:"bytes,2,opt,name=certificate,proto3" json:"certificate,omitempty"`
	Privilege   *Privilege `protobuf:"bytes,3,opt,name=privilege,proto3" json:"privilege,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{9}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *User) GetPrivilege() *Privilege {
	if x != nil {
		return x.Privilege
	}
	return nil
}

// Privilege holds user/group privilege information such as
// a list of databases to which the read is allowed, a list of
// databases to which the write is allowed, bools to indicate
// where the db manipulation such as DB creation/deletion and
// user manipulation such as add/update/delete are allowed.
type Privilege struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbPermission map[string]Privilege_Access `protobuf:"bytes,1,rep,name=db_permission,json=dbPermission,proto3" json:"db_permission,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=types.Privilege_Access"`
	// admin has privileges to submit a user administration transaction,
	// cluster configuration transaction, and database administration
	// transaction. Further, admin has permission to read-write states
	// from any database provided that the state has no ACL defined. If
	// a state has a read and write ACL, the admin can read or write to
	// the state only if the admin is listed in the read or write ACL list.
	Admin bool `protobuf:"varint,2,opt,name=admin,proto3" json:"admin,omitempty"`
}

func (x *Privilege) Reset() {
	*x = Privilege{}
	if protoimpl.UnsafeEnabled {
		mi := &file_configuration_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Privilege) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Privilege) ProtoMessage() {}

func (x *Privilege) ProtoReflect() protoreflect.Message {
	mi := &file_configuration_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Privilege.ProtoReflect.Descriptor instead.
func (*Privilege) Descriptor() ([]byte, []int) {
	return file_configuration_proto_rawDescGZIP(), []int{10}
}

func (x *Privilege) GetDbPermission() map[string]Privilege_Access {
	if x != nil {
		return x.DbPermission
	}
	return nil
}

func (x *Privilege) GetAdmin() bool {
	if x != nil {
		return x.Admin
	}
	return false
}

var File_configuration_proto protoreflect.FileDescriptor

var file_configuration_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x96, 0x02, 0x0a,
	0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27,
	0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x06, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x12, 0x39, 0x0a,
	0x10, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x43, 0x41, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x0d, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x6c, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x22, 0x39, 0x0a, 0x05, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x46,
	0x0a, 0x08, 0x43, 0x41, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f,
	0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x6f, 0x6f, 0x74, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x65, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a,
	0x72, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x5c, 0x0a, 0x0c, 0x4c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4c, 0x0a, 0x23, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x72, 0x69,
	0x63, 0x69, 0x61, 0x5f, 0x74, 0x72, 0x69, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x72, 0x69, 0x63, 0x69, 0x61, 0x54, 0x72, 0x69, 0x65,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x78, 0x0a, 0x0a, 0x50, 0x65, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x72, 0x61, 0x66, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65,
	0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x50, 0x6f,
	0x72, 0x74, 0x22, 0x87, 0x02, 0x0a, 0x0a, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0b,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x66, 0x74, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x0e,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x61, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0x68, 0x0a, 0x04,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c,
	0x65, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x52, 0x09, 0x70, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x22, 0xe7, 0x01, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x2e, 0x44, 0x62,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x64, 0x62, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x1a, 0x58, 0x0a, 0x11, 0x44, 0x62, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x21, 0x0a,
	0x06, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x10, 0x01,
	0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f,
	0x6f, 0x72, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_configuration_proto_rawDescOnce sync.Once
	file_configuration_proto_rawDescData = file_configuration_proto_rawDesc
)

func file_configuration_proto_rawDescGZIP() []byte {
	file_configuration_proto_rawDescOnce.Do(func() {
		file_configuration_proto_rawDescData = protoimpl.X.CompressGZIP(file_configuration_proto_rawDescData)
	})
	return file_configuration_proto_rawDescData
}

var file_configuration_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_configuration_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_configuration_proto_goTypes = []interface{}{
	(Privilege_Access)(0),   // 0: types.Privilege.Access
	(*ClusterConfig)(nil),   // 1: types.ClusterConfig
	(*NodeConfig)(nil),      // 2: types.NodeConfig
	(*Admin)(nil),           // 3: types.Admin
	(*CAConfig)(nil),        // 4: types.CAConfig
	(*ConsensusConfig)(nil), // 5: types.ConsensusConfig
	(*LedgerConfig)(nil),    // 6: types.LedgerConfig
	(*PeerConfig)(nil),      // 7: types.PeerConfig
	(*RaftConfig)(nil),      // 8: types.RaftConfig
	(*DatabaseConfig)(nil),  // 9: types.DatabaseConfig
	(*User)(nil),            // 10: types.User
	(*Privilege)(nil),       // 11: types.Privilege
	nil,                     // 12: types.Privilege.DbPermissionEntry
}
var file_configuration_proto_depIdxs = []int32{
	2,  // 0: types.ClusterConfig.nodes:type_name -> types.NodeConfig
	3,  // 1: types.ClusterConfig.admins:type_name -> types.Admin
	4,  // 2: types.ClusterConfig.cert_auth_config:type_name -> types.CAConfig
	5,  // 3: types.ClusterConfig.consensus_config:type_name -> types.ConsensusConfig
	6,  // 4: types.ClusterConfig.ledger_config:type_name -> types.LedgerConfig
	7,  // 5: types.ConsensusConfig.members:type_name -> types.PeerConfig
	7,  // 6: types.ConsensusConfig.observers:type_name -> types.PeerConfig
	8,  // 7: types.ConsensusConfig.raft_config:type_name -> types.RaftConfig
	11, // 8: types.User.privilege:type_name -> types.Privilege
	12, // 9: types.Privilege.db_permission:type_name -> types.Privilege.DbPermissionEntry
	0,  // 10: types.Privilege.DbPermissionEntry.value:type_name -> types.Privilege.Access
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_configuration_proto_init() }
func file_configuration_proto_init() {
	if File_configuration_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_configuration_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Admin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedgerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_configuration_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Privilege); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_configuration_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_configuration_proto_goTypes,
		DependencyIndexes: file_configuration_proto_depIdxs,
		EnumInfos:         file_configuration_proto_enumTypes,
		MessageInfos:      file_configuration_proto_msgTypes,
	}.Build()
	File_configuration_proto = out.File
	file_configuration_proto_rawDesc = nil
	file_configuration_proto_goTypes = nil
	file_configuration_proto_depIdxs = nil
}
