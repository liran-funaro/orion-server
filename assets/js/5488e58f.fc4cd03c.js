"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[880],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return k}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),u=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=u(e.components);return a.createElement(o.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(t),k=r,m=d["".concat(o,".").concat(k)]||d[k]||c[k]||l;return t?a.createElement(m,s(s({ref:n},p),{},{components:t})):a.createElement(m,s({ref:n},p))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,s=new Array(l);s[0]=d;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var u=2;u<l;u++)s[u]=t[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1e3:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return o},metadata:function(){return u},toc:function(){return p},default:function(){return d}});var a=t(7462),r=t(3366),l=(t(7294),t(3905)),s=["components"],i={id:"provenance",title:"Provenance Queries on Historical Data"},o="Provenance queries",u={unversionedId:"getting-started/queries/curl/provenance",id:"getting-started/queries/curl/provenance",isDocsHomePage:!1,title:"Provenance Queries on Historical Data",description:"The provenance API gives the user access to the following Orion data:",source:"@site/docs/getting-started/queries/curl/provenance.md",sourceDirName:"getting-started/queries/curl",slug:"/getting-started/queries/curl/provenance",permalink:"/orion-server/docs/getting-started/queries/curl/provenance",tags:[],version:"current",frontMatter:{id:"provenance",title:"Provenance Queries on Historical Data"},sidebar:"Documentation",previous:{title:"Query Data using JSON fields",permalink:"/orion-server/docs/getting-started/queries/curl/complex-data-query"},next:{title:"Query a Block Header",permalink:"/orion-server/docs/getting-started/queries/curl/block-header"}},p=[{value:"Prepare data",id:"prepare-data",children:[{value:"Second data tx, with both data reads and writes",id:"second-data-tx-with-both-data-reads-and-writes",children:[],level:4}],level:2},{value:"History query",id:"history-query",children:[{value:"History query for the specific version",id:"history-query-for-the-specific-version",children:[],level:3},{value:"Transactions submitted by user",id:"transactions-submitted-by-user",children:[],level:3},{value:"User-related queries",id:"user-related-queries",children:[],level:3},{value:"Query for users reads",id:"query-for-users-reads",children:[],level:3},{value:"Query for users writes",id:"query-for-users-writes",children:[],level:3},{value:"Key access queries",id:"key-access-queries",children:[],level:3},{value:"Query for key readers",id:"query-for-key-readers",children:[],level:3},{value:"Query for key writers",id:"query-for-key-writers",children:[],level:3}],level:2}],c={toc:p};function d(e){var n=e.components,t=(0,r.Z)(e,s);return(0,l.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"provenance-queries"},"Provenance queries"),(0,l.kt)("p",null,"The provenance API gives the user access to the following Orion data:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The history of values for a given key, in different views and directions"),(0,l.kt)("li",{parentName:"ul"},"Information about which users accessed or modified a specific piece of data"),(0,l.kt)("li",{parentName:"ul"},"Information, including history, about the data items accessed by a given user"),(0,l.kt)("li",{parentName:"ul"},"A history of user transactions")),(0,l.kt)("p",null,"Usually, provenance queries are used to investigate changes of some values over the time. For example, by sending ",(0,l.kt)("inlineCode",{parentName:"p"},"GET /provenance/data/history/{dbname}/{key}"),", we can follow changes of ",(0,l.kt)("inlineCode",{parentName:"p"},"key")," over time.\nAs mentioned above, Orion supports multiple types of provenance queries. Here is a base list of them:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A query to get changes of values for a given key over time -  supports multiple options, like directions, etc. Examples of this query, including input and output format, can be found ","[here]",", ","[here]",", and ","[here]",".")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http",metastring:"request",request:!0},"GET /provenance/data/history/{dbname}/{key}\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Two queries that provide information about users who accessed or modified a specific piece of data. The example of the data readers query is ","[here]"," and the example of the data writers query is ","[here]",".")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http",metastring:"request",request:!0},"GET /provenance/data/readers/{dbname}/{key}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http",metastring:"request",request:!0},"GET /provenance/data/writers/{dbname}/{key}\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Three queries for data items accessed by a given user. Examples are ","[here]"," and ","[here]",".")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http",metastring:"request",request:!0},"GET /provenance/data/read/{userId}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http",metastring:"request",request:!0},"GET /provenance/data/written/{userId}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http",metastring:"request",request:!0},"GET /provenance/data/deleted/{userId}\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A query for all transactions submitted by a given user. An example, with the input and output format, etc., can be found ","[here]",".")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-http",metastring:"request",request:!0},"GET /provenance/data/tx/{userId}\n")),(0,l.kt)("h2",{id:"prepare-data"},"Prepare data"),(0,l.kt)("p",null,"To make this example more realistic and to see meaningful outputs from these queries' execution, multiple transactions should be submitted to BDCD, and the ledger should contain multiple blocks. Next, we will submit multiple data transactions to Orion."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"As a prerequisite, we need users ",(0,l.kt)("inlineCode",{parentName:"p"},"alice")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"bob")," and database ",(0,l.kt)("inlineCode",{parentName:"p"},"db2")," to exist in Orion, and at least one data transaction to have been submitted.\nFirst, we need to create the ",(0,l.kt)("inlineCode",{parentName:"p"},"db2")," database, as described ","[here]",".\nSecond, we need to create ",(0,l.kt)("inlineCode",{parentName:"p"},"alice")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"bob"),". See ","[here]"," for more information about user creation.\nIn addition, some data should exist in ",(0,l.kt)("inlineCode",{parentName:"p"},"db2"),". See ","[here]"," for an example of running a data transaction."),(0,l.kt)("h3",{parentName:"blockquote",id:"first-data-tx-only-writes"},"First data tx, only writes"),(0,l.kt)("p",{parentName:"blockquote"},"The first transaction contains writes to multiple keys: ",(0,l.kt)("inlineCode",{parentName:"p"},"key1"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"key2"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"key3"),", and we send it using the ",(0,l.kt)("inlineCode",{parentName:"p"},"/data/tx")," POST request. ")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Please note that the explanation about the data transaction structure and its result is out of the scope of this document. For more information, ","[see]",".\n",(0,l.kt)("strong",{parentName:"p"},"Sign marshalled transaction content")),(0,l.kt)("pre",{parentName:"blockquote"},(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'bin/signer -data \'{"must_sign_user_ids":["alice"],"tx_id":"Tx000","db_operations":[{"db_name":"db2","data_writes":[{"key":"key1","value":"dGhpcyBpcyBhIGZpcnN0IHZhbHVl","acl":{"read_users":{"alice":true},"read_write_users":{"alice":true}}},{"key":"key2","value":"dGhpcyBpcyBhIHNlY29uZCB2YWx1ZQ==","acl":{"read_users":{"alice":true},"read_write_users":{"alice":true}}},{"key":"key3","value":"dGhpcyBpcyBhIHRoaXJkIHZhbHVl","acl":{"read_users":{"alice":true},"read_write_users":{"alice":true}}}]}]}\' -privatekey=deployment/sample/crypto/alice/alice.key\n'))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Output")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"MEQCIBRWwsZHShtRGQkKlD81oicATj7+R6LDgG6RUFNGnUhVAiALVm6AdOE3+jC0LtyuPrYPDa7OAb3qDryv1nRNbig+rg==\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Submit transaction")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'curl \\\n-H "Content-Type: application/json" \\\n-H "TxTimeout: 2s" \\\n-X POST http://127.0.0.1:6001/data/tx \\\n--data \'{\n  "payload": {\n    "must_sign_user_ids": [\n      "alice"\n    ],\n    "tx_id": "Tx000",\n    "db_operations": [\n      {\n        "db_name": "db2",\n        "data_writes": [\n          {\n            "key": "key1",\n            "value": "dGhpcyBpcyBhIGZpcnN0IHZhbHVl",\n            "acl": {\n              "read_users": {\n                "alice": true\n              },\n              "read_write_users": {\n                "alice": true\n              }\n            }\n          },\n          {\n            "key": "key2",\n            "value": "dGhpcyBpcyBhIHNlY29uZCB2YWx1ZQ==",\n            "acl": {\n              "read_users": {\n                "alice": true\n              },\n              "read_write_users": {\n                "alice": true\n              }\n            }\n          },\n          {\n            "key": "key3",\n            "value": "dGhpcyBpcyBhIHRoaXJkIHZhbHVl",\n            "acl": {\n              "read_users": {\n                "alice": true\n              },\n              "read_write_users": {\n                "alice": true\n              }\n            }\n          }\n        ]\n      }\n    ]\n  },\n  "signatures": {\n    "alice": "MEQCIBRWwsZHShtRGQkKlD81oicATj7+R6LDgG6RUFNGnUhVAiALVm6AdOE3+jC0LtyuPrYPDa7OAb3qDryv1nRNbig+rg=="\n  }\n}\' | jq .\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Output")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "receipt": {\n      "header": {\n        "base_header": {\n          "number": 5,\n          "previous_base_header_hash": "NqyVWNBl/XmWLM7PkK8NbI0qrwFmYvGHSTc03vj/zus=",\n          "last_committed_block_hash": "nDNWHZPrlG3JVq6eLcuHPaS1iEZkBkemV7IleIVx6Jc=",\n          "last_committed_block_num": 4\n        },\n        "skipchain_hashes": [\n          "nDNWHZPrlG3JVq6eLcuHPaS1iEZkBkemV7IleIVx6Jc=",\n          "wZmtCr8rJp/NGsEDjySSfHhi7Omr2Yw/d8rUaetrzLE=",\n          "tl3PgPL/E52yhCWG1vLGk/bJXRqhw3rDxSXZzvMcuWo="\n        ],\n        "tx_merkel_tree_root_hash": "UXXqKu/I2Vr0Ma5cV9Hfun4Xo5285ZwdV9jcKspTnJo=",\n        "state_merkel_tree_root_hash": "ksPp+NOrYLi909AYgrmrmGN1DKuez8ItpRJeLFpWy9g=",\n        "validation_info": [\n          {}\n        ]\n      }\n    }\n  },\n  "signature": "MEYCIQDiau+kEkY6bpmtW7t5iN2F3+bwBzQ41AlNvGML9Z8eGAIhAKKdqa4xeuMYsHwUmMhwzSSMwPyTwwv6L1TRUgD6zBAF"\n}\n')),(0,l.kt)("h4",{id:"second-data-tx-with-both-data-reads-and-writes"},"Second data tx, with both data reads and writes"),(0,l.kt)("p",null,"The second transaction contains reads for multiple keys: ",(0,l.kt)("inlineCode",{parentName:"p"},"key1")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"key2"),"; writes to multiple keys: ",(0,l.kt)("inlineCode",{parentName:"p"},"key1")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"key2"),"; and a delete for ",(0,l.kt)("inlineCode",{parentName:"p"},"key3"),".\n",(0,l.kt)("strong",{parentName:"p"},"Sign marshalled transaction content")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'bin/signer -data \'{"must_sign_user_ids":["alice"],"tx_id":"Tx001","db_operations":[{"db_name":"db2","data_reads":[{"key":"key1","version":{"block_num":5}},{"key":"key2","version":{"block_num":5}}],"data_writes":[{"key":"key2","value":"dGhpcyBpcyBhIHNlY29uZCB2YWx1ZSB1cGRhdGVk","acl":{"read_users":{"alice":true},"read_write_users":{"alice":true}}},{"key":"key1","value":"dGhpcyBpcyBhIGZpcnN0IHZhbHVlIHVwZGF0ZWQ=","acl":{"read_users":{"alice":true},"read_write_users":{"alice":true}}}],"data_deletes":[{"key":"key3"}]}]}\' -privatekey=deployment/sample/crypto/alice/alice.key\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Output")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"MEUCIQC8Zd3NihB/TveLmhk/BAlvuIjSo76fnsywvyyh3JudOgIgbujXo5cMSyBa5i/I9vM3h0HWb/3Waop56hPSRB4Jw5k=\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Submit transaction")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'curl \\\n-H "Content-Type: application/json" \\\n-H "TxTimeout: 2s" \\\n-X POST http://127.0.0.1:6001/data/tx \\\n--data \'{\n  "payload": {\n    "must_sign_user_ids": [\n      "alice"\n    ],\n    "tx_id": "Tx001",\n    "db_operations": [\n      {\n        "db_name": "db2",\n        "data_reads": [\n          {\n            "key": "key1",\n            "version": {\n              "block_num": 5\n            }\n          },\n          {\n            "key": "key2",\n            "version": {\n              "block_num": 5\n            }\n          }\n        ],\n        "data_writes": [\n          {\n            "key": "key2",\n            "value": "dGhpcyBpcyBhIHNlY29uZCB2YWx1ZSB1cGRhdGVk",\n            "acl": {\n              "read_users": {\n                "alice": true\n              },\n              "read_write_users": {\n                "alice": true\n              }\n            }\n          },\n          {\n            "key": "key1",\n            "value": "dGhpcyBpcyBhIGZpcnN0IHZhbHVlIHVwZGF0ZWQ=",\n            "acl": {\n              "read_users": {\n                "alice": true\n              },\n              "read_write_users": {\n                "alice": true\n              }\n            }\n          }\n        ],\n        "data_deletes": [\n          {\n            "key": "key3"\n          }\n        ]\n      }\n    ]\n  },\n  "signatures": {\n    "alice": "MEUCIQC8Zd3NihB/TveLmhk/BAlvuIjSo76fnsywvyyh3JudOgIgbujXo5cMSyBa5i/I9vM3h0HWb/3Waop56hPSRB4Jw5k="\n  }\n}\' | jq . \n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Output")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "receipt": {\n      "header": {\n        "base_header": {\n          "number": 6,\n          "previous_base_header_hash": "TJYT7zr95D3ghtU/M+j8OStU6r8Y+XRC5xfb90jshbI=",\n          "last_committed_block_hash": "r57EtiB2XO1XlVAxBwFtn7cHP7YsfUBFi69y0UY0tw0=",\n          "last_committed_block_num": 5\n        },\n        "skipchain_hashes": [\n          "r57EtiB2XO1XlVAxBwFtn7cHP7YsfUBFi69y0UY0tw0="\n        ],\n        "tx_merkel_tree_root_hash": "dSc42JVp36bfORFO8QehzQFypEtBQfUzluT6ixhjeo4=",\n        "state_merkel_tree_root_hash": "YRsFw5PcG1XzYO5o5nJa3lVfknijRqu6cCaDF1zpPA8=",\n        "validation_info": [\n          {}\n        ]\n      }\n    }\n  },\n  "signature": "MEUCIHGNm7923sl7r3o/UBPi6IA4LhmV7vjISxB2aRTIJI8uAiEA4EKMhVJIwKMv1Nzy7zDaftEkal2wFl3pQN9heKw6tCY="\n}\n')),(0,l.kt)("p",null,"At the end of the preparation step, the ledger contains six blocks, with the last three blocks containing data transactions. Let's summarize here the state of the database and the ledger."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Block 4")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},'key: "key1", version: {block_num: 4, tx_num: 0}, value: "eXl5"')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Block 5")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},'key: "key1", version: {block_num: 5, tx_num: 0}, value: "dGhpcyBpcyBhIGZpcnN0IHZhbHVl"'),(0,l.kt)("li",{parentName:"ul"},'key: "key2", version: {block_num: 5, tx_num: 0}, value: "dGhpcyBpcyBhIHNlY29uZCB2YWx1ZQ=="'),(0,l.kt)("li",{parentName:"ul"},'key: "key3", version: {block_num: 5, tx_num: 0}, value: "dGhpcyBpcyBhIHRoaXJkIHZhbHVl"')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Block 6")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},'key: "key1", version: {block_num: 6, tx_num: 0}, value: "dGhpcyBpcyBhIGZpcnN0IHZhbHVlIHVwZGF0ZWQ="'),(0,l.kt)("li",{parentName:"ul"},'key: "key2", version: {block_num: 6, tx_num: 0}, value: "dGhpcyBpcyBhIHNlY29uZCB2YWx1ZSB1cGRhdGVk"'),(0,l.kt)("li",{parentName:"ul"},'key: "key3", version: {block_num: 6, tx_num: 0}, value: deleted')),(0,l.kt)("h2",{id:"history-query"},"History query"),(0,l.kt)("p",null,"As the first provenance query example, we will query for the full history of the changes in the value of ",(0,l.kt)("inlineCode",{parentName:"p"},"key1")," in ",(0,l.kt)("inlineCode",{parentName:"p"},"bd2"),". To do this, we use the ",(0,l.kt)("inlineCode",{parentName:"p"},"/provenance/data/history/{dbname}/{key}")," GET query and the user ",(0,l.kt)("inlineCode",{parentName:"p"},"alice")," will submit it."),(0,l.kt)("p",null,"As a first step to submitting a query, the user should sign the query parameters, represented as a JSON object. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Sign query")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'bin/signer -data \'{"user_id":"alice","db_name":"db2","key":"key1"}\' -privatekey=deployment/sample/crypto/alice/alice.key\n')),(0,l.kt)("p",null,"Spaces, new lines, and field order in JSON are important to make it possible for the server to validate a user's signature. The string we sign on is the result of the JSON serialization of the protobuf history query object."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-protobuf"},"message GetHistoricalDataQuery {\n  string user_id = 1;\n  string db_name = 2;\n  string key = 3;\n  Version version = 4;\n  string direction = 5;\n  bool only_deletes = 6;\n  bool most_recent = 7;\n}\n")),(0,l.kt)("p",null,"Because the ",(0,l.kt)("inlineCode",{parentName:"p"},"version"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"direction"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"only_deletes"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"most_recent")," fields are not set in this type of query, a JSON serialization ignores them, and instead creates fields that contains empty values. We will see this multiple times later, while the ",(0,l.kt)("inlineCode",{parentName:"p"},"tx_num")," field equals to zero of the protobuf ",(0,l.kt)("inlineCode",{parentName:"p"},"Version")," object. Usually, a block contains more than one transaction, and for all transactions, except the first one, ",(0,l.kt)("inlineCode",{parentName:"p"},"tx_num")," will appear in JSON. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"MEUCIHTGSy8lJFlfRxJXEGq2gTi9czP81jwQ7vF2KdRxiigRAiEAjjCn9WSQPx6H99+EGYHyDQTNAr4O+1uhvY5eYI0ZT20=\n")),(0,l.kt)("p",null,"The user signature should be copied to the query ",(0,l.kt)("inlineCode",{parentName:"p"},"Signature")," header."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Submit query")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'curl \\\n     -H "Content-Type: application/json" \\\n     -H "UserID: alice" \\\n     -H "Signature: MEUCIHTGSy8lJFlfRxJXEGq2gTi9czP81jwQ7vF2KdRxiigRAiEAjjCn9WSQPx6H99+EGYHyDQTNAr4O+1uhvY5eYI0ZT20=" \\\n     -X GET http://127.0.0.1:6001/provenance/data/history/db2/key1 | jq .\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Output")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "values": [\n      {\n        "value": "eXl5",\n        "metadata": {\n          "version": {\n            "block_num": 4\n          },\n          "access_control": {\n            "read_users": {\n              "alice": true,\n              "bob": true\n            },\n            "read_write_users": {\n              "alice": true\n            }\n          }\n        }\n      },\n      {\n        "value": "dGhpcyBpcyBhIGZpcnN0IHZhbHVl",\n        "metadata": {\n          "version": {\n            "block_num": 5\n          },\n          "access_control": {\n            "read_users": {\n              "alice": true\n            },\n            "read_write_users": {\n              "alice": true\n            }\n          }\n        }\n      },\n      {\n        "value": "dGhpcyBpcyBhIGZpcnN0IHZhbHVlIHVwZGF0ZWQ=",\n        "metadata": {\n          "version": {\n            "block_num": 6\n          },\n          "access_control": {\n            "read_users": {\n              "alice": true\n            },\n            "read_write_users": {\n              "alice": true\n            }\n          }\n        }\n      }\n    ]\n  },\n  "signature": "MEYCIQDoFCEmCAirIJHGcIi3/gz6Bd2a+iJdFvzIVRhXYg9RswIhANpSU319PofKI98lydpsjvz5IpIfvUJhKto8ISsrWfeR"\n}\n')),(0,l.kt)("p",null,"As we can see here, ",(0,l.kt)("inlineCode",{parentName:"p"},"key1")," changed its value three times, in blocks 4, 5, and 6."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Please note that the ",(0,l.kt)("inlineCode",{parentName:"p"},"version")," JSON object in the result contains only ",(0,l.kt)("inlineCode",{parentName:"p"},"block_num"),", but no ",(0,l.kt)("inlineCode",{parentName:"p"},"tx_num"),". This is because ",(0,l.kt)("inlineCode",{parentName:"p"},"tx_num")," in our example equals to zero and is therefore omitted as an empty field during serializing a protobuf object to JSON.\nNow let's query the history of ",(0,l.kt)("inlineCode",{parentName:"p"},"key3"),", using the same GET query, but replacing ",(0,l.kt)("inlineCode",{parentName:"p"},"key1")," with ",(0,l.kt)("inlineCode",{parentName:"p"},"key3")," as the parameter.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Sign query")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'bin/signer -data \'{"user_id":"alice","db_name":"db2","key":"key3"}\' -privatekey=deployment/sample/crypto/alice/alice.key\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"MEYCIQDwogJW4wuIBGO5MYVLt1F0nFq+6BsULpKpmCcyGrcx/QIhAMj1uhj6LLW14pF6zZGToP5rdd0tgx9fvwUDHLXLbDO+\n")),(0,l.kt)("p",null,"Don't forget to copy the signature to a query header."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Submit query")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'curl \\\n     -H "Content-Type: application/json" \\\n     -H "UserID: alice" \\\n     -H "Signature: MEYCIQDwogJW4wuIBGO5MYVLt1F0nFq+6BsULpKpmCcyGrcx/QIhAMj1uhj6LLW14pF6zZGToP5rdd0tgx9fvwUDHLXLbDO+" \\\n     -X GET http://127.0.0.1:6001/provenance/data/history/db2/key3 | jq .\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Output")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "values": [\n      {\n        "value": "dGhpcyBpcyBhIHRoaXJkIHZhbHVl",\n        "metadata": {\n          "version": {\n            "block_num": 5\n          },\n          "access_control": {\n            "read_users": {\n              "alice": true\n            },\n            "read_write_users": {\n              "alice": true\n            }\n          }\n        }\n      }\n    ]\n  },\n  "signature": "MEQCIFE2JIa9MkaGtBEZUqx8MIsYsSSiJS0Atz+TkI6Yl73HAiBRU98GTF+FlQoVXvSuqZArwd5UxjK5aMXBJLEdRCQKTA=="\n}\n')),(0,l.kt)("p",null,"Key ",(0,l.kt)("inlineCode",{parentName:"p"},"key3")," changed only once, in block 5."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Please note: once again, the ",(0,l.kt)("inlineCode",{parentName:"p"},"version")," JSON object contains only ",(0,l.kt)("inlineCode",{parentName:"p"},"block_num")," field, without ",(0,l.kt)("inlineCode",{parentName:"p"},"tx_num"),"."),(0,l.kt)("h3",{parentName:"blockquote",id:"history-query-with-only_deletes-option"},"History query with ",(0,l.kt)("em",{parentName:"h3"},"only_deletes")," option"),(0,l.kt)("p",{parentName:"blockquote"},"As you can see, the last query returned a value for ",(0,l.kt)("inlineCode",{parentName:"p"},"<db2, key3>"),". Now we want to query to see if the key was deleted at some time, and to see its last value before delete. We can run the same query, but with the query parameter ",(0,l.kt)("inlineCode",{parentName:"p"},"only_deletes")," changed to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Sign json query data")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'bin/signer -data \'{"user_id":"alice","db_name":"db2","key":"key3","only_deletes":true}\' -privatekey=deployment/sample/crypto/alice/alice.key\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Output")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"MEUCIQCPTVwKrosS6+2WnOUJ4qBU8Ru7ubJYkTOljCXOkFPAtgIgcFftqCm7bOZLxLkfzWloIznqpOkoTegyYtX+xgfHd6s=\n")),(0,l.kt)("p",null,"Submit query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'curl \\\n     -H "Content-Type: application/json" \\\n     -H "UserID: alice" \\\n     -H "Signature: MEUCIQCPTVwKrosS6+2WnOUJ4qBU8Ru7ubJYkTOljCXOkFPAtgIgcFftqCm7bOZLxLkfzWloIznqpOkoTegyYtX+xgfHd6s=" \\\n     -X GET http://127.0.0.1:6001/provenance/data/history/db2/key3?onlydeletes=true | jq .\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Output")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "values": [\n      {\n        "value": "dGhpcyBpcyBhIHRoaXJkIHZhbHVl",\n        "metadata": {\n          "version": {\n            "block_num": 5\n          },\n          "access_control": {\n            "read_users": {\n              "alice": true\n            },\n            "read_write_users": {\n              "alice": true\n            }\n          }\n        }\n      }\n    ]\n  },\n  "signature": "MEUCIEk90HGFa90Yr/dBDONE+GVD4GaowdQFRL25+S0ECY7tAiEA7+gJSZD8pt0v+KC318xxyLTmLrzcBPnhEMIb/xUmJtI="\n}\n')),(0,l.kt)("p",null,"As we can see here, the value returned by the query is the last value before the key was deleted. If we run the same query for ",(0,l.kt)("inlineCode",{parentName:"p"},"key2"),", we'd get an empty list."),(0,l.kt)("h3",{id:"history-query-for-the-specific-version"},"History query for the specific version"),(0,l.kt)("p",null,"Let's check what the value of ",(0,l.kt)("inlineCode",{parentName:"p"},"key1")," was at the time when the tx with the version ",(0,l.kt)("inlineCode",{parentName:"p"},'{"block_num": 6, "tx_num": 0}')," was committed."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"As we mentioned several times already, this version will be marshalled to ",(0,l.kt)("inlineCode",{parentName:"p"},'{"block_num":6}'),", because the ",(0,l.kt)("inlineCode",{parentName:"p"},"tx_num")," field equals to zero, so we can use its value at block 6.\nTo do that, we send a ",(0,l.kt)("inlineCode",{parentName:"p"},"/provenance/data/history/{dbname}/{key}?blocknumber={blknum:[0-9]+}&transactionnumber={txnum:[0-9]+}")," GET query. This query expected to return a value and metadata for the key at the time point associated with the version parameter.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Sign JSON query data")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'bin/signer -data \'{"user_id":"alice","db_name":"db2","key":"key1","version":{"block_num":6}}\' -privatekey=deployment/sample/crypto/alice/alice.key\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"MEQCIFBH19/vOMSK1Q66djyS6u/G1YSppl24S00VpmsjodYbAiAxzejpgkHRFSKM/lXIw9hC19Tf5JbdSKsJW/SGXPmrdQ==\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Submit query")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'curl \\\n     -H "Content-Type: application/json" \\\n     -H "UserID: alice" \\\n     -H "Signature: MEQCIFBH19/vOMSK1Q66djyS6u/G1YSppl24S00VpmsjodYbAiAxzejpgkHRFSKM/lXIw9hC19Tf5JbdSKsJW/SGXPmrdQ==" \\\n     -X GET -G "http://127.0.0.1:6001/provenance/data/history/db2/key1" -d blocknumber=6 -d transactionnumber=0 | jq .\n')),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Please note, as mentioned earlier, that the transaction number is eliminated from the query used for the sign, because it equals to 0, but still exists as part of GET url. If the transaction index in block is not equal to 0, ",(0,l.kt)("inlineCode",{parentName:"p"},"tx_num")," will be part of the serialized query to sign.\n",(0,l.kt)("strong",{parentName:"p"},"Output")),(0,l.kt)("pre",{parentName:"blockquote"},(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "values": [\n      {\n        "value": "dGhpcyBpcyBhIGZpcnN0IHZhbHVlIHVwZGF0ZWQ=",\n        "metadata": {\n          "version": {\n            "block_num": 6\n          },\n          "access_control": {\n            "read_users": {\n              "alice": true\n            },\n            "read_write_users": {\n              "alice": true\n            }\n          }\n        }\n      }\n    ]\n  },\n  "signature": "MEYCIQC6SFao6V8C3ETjp1AZ6FPZjUVhA8/DG+Vn9gLDTXjsGgIhAKaA3szWlfEZ4D2SDmBLs6KWxlH5t5byplqp6A8gAl4i"\n}\n')),(0,l.kt)("p",{parentName:"blockquote"},"Because ",(0,l.kt)("inlineCode",{parentName:"p"},"key1")," was changed in block 6, the version in the query result contains ",(0,l.kt)("inlineCode",{parentName:"p"},"block_num")," as 6. But if, for example, the last time the value of ",(0,l.kt)("inlineCode",{parentName:"p"},"key1")," was changed was in block 4, the returned version ",(0,l.kt)("inlineCode",{parentName:"p"},"block_num")," will be 4.")),(0,l.kt)("h3",{id:"transactions-submitted-by-user"},"Transactions submitted by user"),(0,l.kt)("p",null,"To query for all the transactions submitted by a specific user, we use the ",(0,l.kt)("inlineCode",{parentName:"p"},"/provenance/data/tx/{user}")," GET query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Sign JSON marshaled query")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'bin/signer -data \'{"user_id":"alice","target_user_id":"alice"}\' -privatekey=deployment/sample/crypto/alice/alice.key\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"MEYCIQDNvPHvfb0GpBpbQ5Gedm0LmEQZbijkmf3vNt4JbuSr7gIhAJMp2cVFeckAQbLSMQg7Fn5vCMyTjyS4/Z7740eZalTj\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Submit query")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'curl \\\n     -H "Content-Type: application/json" \\\n     -H "UserID: alice" \\\n     -H "Signature: MEYCIQDNvPHvfb0GpBpbQ5Gedm0LmEQZbijkmf3vNt4JbuSr7gIhAJMp2cVFeckAQbLSMQg7Fn5vCMyTjyS4/Z7740eZalTj" \\\n     -X GET http://127.0.0.1:6001/provenance/data/tx/alice | jq .\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Output")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "txIDs": [\n      "1b6d6414-9b58-45d0-9723-1f31712add81",\n      "Tx000",\n      "Tx001"\n    ]\n  },\n  "signature": "MEUCIQDoeIihFrgwmOk2cQdOUsnlZ7gbDcmuGehkH0y0AYGo/AIgNk+Cy3mTUrGSytj5RIg4jHia/ceAUQ5TW5Q1RmG0FuQ="\n}\n')),(0,l.kt)("p",null,"The query result contains three transaction ids; that means that the user ",(0,l.kt)("inlineCode",{parentName:"p"},"alice")," submitted three transactions - ",(0,l.kt)("inlineCode",{parentName:"p"},'"1b6d6414-9b58-45d0-9723-1f31712add81"'),", ",(0,l.kt)("inlineCode",{parentName:"p"},'"Tx000"'),", and ",(0,l.kt)("inlineCode",{parentName:"p"},'"Tx001"'),"."),(0,l.kt)("h3",{id:"user-related-queries"},"User-related queries"),(0,l.kt)("p",null,"An important type of query addresses user activity, and allows discovering which keys a particular user read, wrote, or deleted. There are different types of queries for that:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"[User reads]"),(0,l.kt)("li",{parentName:"ul"},"[User writes]"),(0,l.kt)("li",{parentName:"ul"},"User deletes follows the same pattern.")),(0,l.kt)("h3",{id:"query-for-users-reads"},"Query for users reads"),(0,l.kt)("p",null,"To query which keys were read by a specific user, including the key versions, use the ",(0,l.kt)("inlineCode",{parentName:"p"},"/provenance/data/read/{user}"),"GET query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Sign json marshalled query")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'bin/signer -data \'{"user_id":"alice","target_user_id":"alice"}\' -privatekey=deployment/sample/crypto/alice/alice.key\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"MEUCIQCzRD+rS8043PgFRfwVFYKkT4FN+2KCPqU8OCciXlTz/QIgSDvMl/q+AiyeoZI3qDs87y4ScJgVW2e/6dXtnlTQaCQ=\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Submit query")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'curl \\\n     -H "Content-Type: application/json" \\\n     -H "UserID: alice" \\\n     -H "Signature: MEUCIQCzRD+rS8043PgFRfwVFYKkT4FN+2KCPqU8OCciXlTz/QIgSDvMl/q+AiyeoZI3qDs87y4ScJgVW2e/6dXtnlTQaCQ=" \\\n     -X GET http://127.0.0.1:6001/provenance/data/read/alice | jq .\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Output")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "KVs": [\n      {\n        "key": "key1",\n        "value": "dGhpcyBpcyBhIGZpcnN0IHZhbHVl",\n        "metadata": {\n          "version": {\n            "block_num": 5\n          },\n          "access_control": {\n            "read_users": {\n              "alice": true\n            },\n            "read_write_users": {\n              "alice": true\n            }\n          }\n        }\n      },\n      {\n        "key": "key2",\n        "value": "dGhpcyBpcyBhIHNlY29uZCB2YWx1ZQ==",\n        "metadata": {\n          "version": {\n            "block_num": 5\n          },\n          "access_control": {\n            "read_users": {\n              "alice": true\n            },\n            "read_write_users": {\n              "alice": true\n            }\n          }\n        }\n      }\n    ]\n  },\n  "signature": "MEUCIAPDXNsnoOCc+PisOiAmvk3giXxNfynW9YjAbcGSvPDaAiEAnKYp2K4WonHofJQ1ag3aYITcdfAXIDwNdggjSwkXS1w="\n}\n')),(0,l.kt)("p",null,"We can see that the user ",(0,l.kt)("inlineCode",{parentName:"p"},"alice")," read two keys, as we already knew, during ",(0,l.kt)("inlineCode",{parentName:"p"},"Tx001"),". Mathematically, the query returns the union of all read sets of all user transactions, in addition to their values."),(0,l.kt)("h3",{id:"query-for-users-writes"},"Query for users writes"),(0,l.kt)("p",null,"To query which keys were written by a specific user, including their new values, original versions, etc., use the ",(0,l.kt)("inlineCode",{parentName:"p"},"/provenance/data/written/{user}"),"GET query."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Sign JSON marshalled query")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'bin/signer -data \'{"user_id":"alice","target_user_id":"alice"}\' -privatekey=deployment/sample/crypto/alice/alice.key\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"MEQCIHd3DkqD3AUXRt/V8cVEG6r0DbflL1j8r+FOdNGzfYJlAiAHVdguS0ezDCjAek+yLGRaHsraZ+R7Dr4XmxzSHE3GLQ==\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Submit query")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'curl \\\n     -H "Content-Type: application/json" \\\n     -H "UserID: alice" \\\n     -H "Signature: MEQCIHd3DkqD3AUXRt/V8cVEG6r0DbflL1j8r+FOdNGzfYJlAiAHVdguS0ezDCjAek+yLGRaHsraZ+R7Dr4XmxzSHE3GLQ==" \\\n     -X GET http://127.0.0.1:6001/provenance/data/written/alice | jq .\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Output")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "KVs": [\n      {\n        "key": "key1",\n        "value": "eXl5",\n        "metadata": {\n          "version": {\n            "block_num": 4\n          },\n          "access_control": {\n            "read_users": {\n              "alice": true,\n              "bob": true\n            },\n            "read_write_users": {\n              "alice": true\n            }\n          }\n        }\n      },\n      {\n        "key": "key1",\n        "value": "dGhpcyBpcyBhIGZpcnN0IHZhbHVl",\n        "metadata": {\n          "version": {\n            "block_num": 5\n          },\n          "access_control": {\n            "read_users": {\n              "alice": true\n            },\n            "read_write_users": {\n              "alice": true\n            }\n          }\n        }\n      },\n      {\n        "key": "key2",\n        "value": "dGhpcyBpcyBhIHNlY29uZCB2YWx1ZQ==",\n        "metadata": {\n          "version": {\n            "block_num": 5\n          },\n          "access_control": {\n            "read_users": {\n              "alice": true\n            },\n            "read_write_users": {\n              "alice": true\n            }\n          }\n        }\n      },\n      {\n        "key": "key3",\n        "value": "dGhpcyBpcyBhIHRoaXJkIHZhbHVl",\n        "metadata": {\n          "version": {\n            "block_num": 5\n          },\n          "access_control": {\n            "read_users": {\n              "alice": true\n            },\n            "read_write_users": {\n              "alice": true\n            }\n          }\n        }\n      },\n      {\n        "key": "key2",\n        "value": "dGhpcyBpcyBhIHNlY29uZCB2YWx1ZSB1cGRhdGVk",\n        "metadata": {\n          "version": {\n            "block_num": 6\n          },\n          "access_control": {\n            "read_users": {\n              "alice": true\n            },\n            "read_write_users": {\n              "alice": true\n            }\n          }\n        }\n      },\n      {\n        "key": "key1",\n        "value": "dGhpcyBpcyBhIGZpcnN0IHZhbHVlIHVwZGF0ZWQ=",\n        "metadata": {\n          "version": {\n            "block_num": 6\n          },\n          "access_control": {\n            "read_users": {\n              "alice": true\n            },\n            "read_write_users": {\n              "alice": true\n            }\n          }\n        }\n      }\n    ]\n  },\n  "signature": "MEUCIQDaMpeJhgVlFOS0AL7AOd2wviQ6c9R/PrOH51grBifRlgIgL4hLscpLE+JNAryd0it+WkuFmiQyUHbg25/Z+T9ty3A="\n}\n')),(0,l.kt)("p",null,"As you can see, the user ",(0,l.kt)("inlineCode",{parentName:"p"},"alice")," wrote three times to key ",(0,l.kt)("inlineCode",{parentName:"p"},"key1")," in blocks 4, 5 and 6; two times to ",(0,l.kt)("inlineCode",{parentName:"p"},"key2")," in blocks 5 and 6; and one time to ",(0,l.kt)("inlineCode",{parentName:"p"},"key3")," in block 5. As we mentioned earlier, the query result is the union of all write sets of all user transactions, in addition to the version."),(0,l.kt)("h3",{id:"key-access-queries"},"Key access queries"),(0,l.kt)("p",null,"Another important view on data history is to know which users accessed a specific key over time. The following two  queries provide us with this information."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"[Query for key readers]"),(0,l.kt)("li",{parentName:"ul"},"[Query for key writers]")),(0,l.kt)("h3",{id:"query-for-key-readers"},"Query for key readers"),(0,l.kt)("p",null,"To query for all the users that ever read a specific key, use the ",(0,l.kt)("inlineCode",{parentName:"p"},"/provenance/data/readers/{dbname}/{key}")," GET query. The query results in a list of all users who ever read the key and how many times users read the key."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Sign JSON marshalled query")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'bin/signer -data \'{"user_id":"alice","db_name":"db2","key":"key1"}\' -privatekey=deployment/sample/crypto/alice/alice.key\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"MEUCIQDAO/58FDUjaKx+aAN6D5GCsp87hQ0CePeBwxa3FKzPpQIgASJwGGk8rHtZPgKUEMJ7U4H5L8ttQwnXq7XrSCcL/B4=\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Submit query")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'curl \\\n     -H "Content-Type: application/json" \\\n     -H "UserID: alice" \\\n     -H "Signature: MEUCIQDAO/58FDUjaKx+aAN6D5GCsp87hQ0CePeBwxa3FKzPpQIgASJwGGk8rHtZPgKUEMJ7U4H5L8ttQwnXq7XrSCcL/B4=" \\\n     -X GET http://127.0.0.1:6001/provenance/data/readers/db2/key1 | jq .\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Output")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "read_by": {\n      "alice": 1\n    }\n  },\n  "signature": "MEQCIDI6cs21gAUfE/4l+/ha9ih9wPQ8YnnogpzMRt5XrDR9AiAfOsKf9FhUpeYPmMCvM9gIF0YQO6IFtdZUC8khOGTIcA=="\n}\n')),(0,l.kt)("p",null,"The user ",(0,l.kt)("inlineCode",{parentName:"p"},"alice")," read the ",(0,l.kt)("inlineCode",{parentName:"p"},"key1")," value one time."),(0,l.kt)("h3",{id:"query-for-key-writers"},"Query for key writers"),(0,l.kt)("p",null,"To query for all the users that ever wrote to a specific key, use the ",(0,l.kt)("inlineCode",{parentName:"p"},"/provenance/data/writers/{dbname}/{key}")," GET query. This will return a list of all the users who ever wrote to the key and how many times the users wrote to the key."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Sign JSON marshalled query")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'bin/signer -data \'{"user_id":"alice","db_name":"db2","key":"key2"}\' -privatekey=deployment/sample/crypto/alice/alice.key\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"MEUCIQDFX8SgtDFMGf2bXpaP7wyGzhR+s/18A6VWzjFmxwawCwIgJOD5N5GtsH2A0XsMGCVKjEWbaRWJ6s7GGsuN24IlIyQ=\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Submit query")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'curl \\\n     -H "Content-Type: application/json" \\\n     -H "UserID: alice" \\\n     -H "Signature: MEUCIQDFX8SgtDFMGf2bXpaP7wyGzhR+s/18A6VWzjFmxwawCwIgJOD5N5GtsH2A0XsMGCVKjEWbaRWJ6s7GGsuN24IlIyQ=" \\\n     -X GET http://127.0.0.1:6001/provenance/data/writers/db2/key2 | jq .\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Output")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "written_by": {\n      "alice": 2\n    }\n  },\n  "signature": "MEQCICKkAFCF/0BCXWBwfXaJfV+dnde6XxpwpiT7Z6I28GlyAiA8zKTtHacZZrx1erv7VSyLZD9sNKzf8JNMYmH6XZu8lw=="\n}\n')),(0,l.kt)("p",null,"The user ",(0,l.kt)("inlineCode",{parentName:"p"},"alice")," wrote twice to ",(0,l.kt)("inlineCode",{parentName:"p"},"key2"),"."))}d.isMDXComponent=!0}}]);