// Copyright IBM Corp. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.15.8
// source: block_and_transaction.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Flag int32

const (
	Flag_VALID                                      Flag = 0
	Flag_INVALID_MVCC_CONFLICT_WITHIN_BLOCK         Flag = 1
	Flag_INVALID_MVCC_CONFLICT_WITH_COMMITTED_STATE Flag = 2
	Flag_INVALID_DATABASE_DOES_NOT_EXIST            Flag = 3
	Flag_INVALID_NO_PERMISSION                      Flag = 4
	Flag_INVALID_INCORRECT_ENTRIES                  Flag = 5
	Flag_INVALID_UNAUTHORISED                       Flag = 6
	Flag_INVALID_MISSING_SIGNATURE                  Flag = 7
)

// Enum value maps for Flag.
var (
	Flag_name = map[int32]string{
		0: "VALID",
		1: "INVALID_MVCC_CONFLICT_WITHIN_BLOCK",
		2: "INVALID_MVCC_CONFLICT_WITH_COMMITTED_STATE",
		3: "INVALID_DATABASE_DOES_NOT_EXIST",
		4: "INVALID_NO_PERMISSION",
		5: "INVALID_INCORRECT_ENTRIES",
		6: "INVALID_UNAUTHORISED",
		7: "INVALID_MISSING_SIGNATURE",
	}
	Flag_value = map[string]int32{
		"VALID":                              0,
		"INVALID_MVCC_CONFLICT_WITHIN_BLOCK": 1,
		"INVALID_MVCC_CONFLICT_WITH_COMMITTED_STATE": 2,
		"INVALID_DATABASE_DOES_NOT_EXIST":            3,
		"INVALID_NO_PERMISSION":                      4,
		"INVALID_INCORRECT_ENTRIES":                  5,
		"INVALID_UNAUTHORISED":                       6,
		"INVALID_MISSING_SIGNATURE":                  7,
	}
)

func (x Flag) Enum() *Flag {
	p := new(Flag)
	*p = x
	return p
}

func (x Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_block_and_transaction_proto_enumTypes[0].Descriptor()
}

func (Flag) Type() protoreflect.EnumType {
	return &file_block_and_transaction_proto_enumTypes[0]
}

func (x Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Flag.Descriptor instead.
func (Flag) EnumDescriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{0}
}

type IndexAttributeType int32

const (
	IndexAttributeType_NUMBER  IndexAttributeType = 0
	IndexAttributeType_STRING  IndexAttributeType = 1
	IndexAttributeType_BOOLEAN IndexAttributeType = 2
)

// Enum value maps for IndexAttributeType.
var (
	IndexAttributeType_name = map[int32]string{
		0: "NUMBER",
		1: "STRING",
		2: "BOOLEAN",
	}
	IndexAttributeType_value = map[string]int32{
		"NUMBER":  0,
		"STRING":  1,
		"BOOLEAN": 2,
	}
)

func (x IndexAttributeType) Enum() *IndexAttributeType {
	p := new(IndexAttributeType)
	*p = x
	return p
}

func (x IndexAttributeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexAttributeType) Descriptor() protoreflect.EnumDescriptor {
	return file_block_and_transaction_proto_enumTypes[1].Descriptor()
}

func (IndexAttributeType) Type() protoreflect.EnumType {
	return &file_block_and_transaction_proto_enumTypes[1]
}

func (x IndexAttributeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndexAttributeType.Descriptor instead.
func (IndexAttributeType) EnumDescriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{1}
}

type AccessControlWritePolicy int32

const (
	AccessControl_ANY AccessControlWritePolicy = 0
	AccessControl_ALL AccessControlWritePolicy = 1
)

// Enum value maps for AccessControlWritePolicy.
var (
	AccessControlWritePolicy_name = map[int32]string{
		0: "ANY",
		1: "ALL",
	}
	AccessControlWritePolicy_value = map[string]int32{
		"ANY": 0,
		"ALL": 1,
	}
)

func (x AccessControlWritePolicy) Enum() *AccessControlWritePolicy {
	p := new(AccessControlWritePolicy)
	*p = x
	return p
}

func (x AccessControlWritePolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessControlWritePolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_block_and_transaction_proto_enumTypes[2].Descriptor()
}

func (AccessControlWritePolicy) Type() protoreflect.EnumType {
	return &file_block_and_transaction_proto_enumTypes[2]
}

func (x AccessControlWritePolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessControlWritePolicy.Descriptor instead.
func (AccessControlWritePolicy) EnumDescriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{22, 0}
}

// Block holds the chain information and transactions
type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *BlockHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*Block_DataTxEnvelopes
	//	*Block_ConfigTxEnvelope
	//	*Block_DbAdministrationTxEnvelope
	//	*Block_UserAdministrationTxEnvelope
	Payload isBlock_Payload `protobuf_oneof:"Payload"`
	// Consensus protocol metadata
	ConsensusMetadata *ConsensusMetadata `protobuf:"bytes,6,opt,name=consensus_metadata,json=consensusMetadata,proto3" json:"consensus_metadata,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{0}
}

func (x *Block) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (m *Block) GetPayload() isBlock_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Block) GetDataTxEnvelopes() *DataTxEnvelopes {
	if x, ok := x.GetPayload().(*Block_DataTxEnvelopes); ok {
		return x.DataTxEnvelopes
	}
	return nil
}

func (x *Block) GetConfigTxEnvelope() *ConfigTxEnvelope {
	if x, ok := x.GetPayload().(*Block_ConfigTxEnvelope); ok {
		return x.ConfigTxEnvelope
	}
	return nil
}

func (x *Block) GetDbAdministrationTxEnvelope() *DBAdministrationTxEnvelope {
	if x, ok := x.GetPayload().(*Block_DbAdministrationTxEnvelope); ok {
		return x.DbAdministrationTxEnvelope
	}
	return nil
}

func (x *Block) GetUserAdministrationTxEnvelope() *UserAdministrationTxEnvelope {
	if x, ok := x.GetPayload().(*Block_UserAdministrationTxEnvelope); ok {
		return x.UserAdministrationTxEnvelope
	}
	return nil
}

func (x *Block) GetConsensusMetadata() *ConsensusMetadata {
	if x != nil {
		return x.ConsensusMetadata
	}
	return nil
}

type isBlock_Payload interface {
	isBlock_Payload()
}

type Block_DataTxEnvelopes struct {
	DataTxEnvelopes *DataTxEnvelopes `protobuf:"bytes,2,opt,name=data_tx_envelopes,json=dataTxEnvelopes,proto3,oneof"`
}

type Block_ConfigTxEnvelope struct {
	ConfigTxEnvelope *ConfigTxEnvelope `protobuf:"bytes,3,opt,name=config_tx_envelope,json=configTxEnvelope,proto3,oneof"`
}

type Block_DbAdministrationTxEnvelope struct {
	DbAdministrationTxEnvelope *DBAdministrationTxEnvelope `protobuf:"bytes,4,opt,name=db_administration_tx_envelope,json=dbAdministrationTxEnvelope,proto3,oneof"`
}

type Block_UserAdministrationTxEnvelope struct {
	UserAdministrationTxEnvelope *UserAdministrationTxEnvelope `protobuf:"bytes,5,opt,name=user_administration_tx_envelope,json=userAdministrationTxEnvelope,proto3,oneof"`
}

func (*Block_DataTxEnvelopes) isBlock_Payload() {}

func (*Block_ConfigTxEnvelope) isBlock_Payload() {}

func (*Block_DbAdministrationTxEnvelope) isBlock_Payload() {}

func (*Block_UserAdministrationTxEnvelope) isBlock_Payload() {}

// BlockHeaderBase holds the block metadata and the chain information
// that computed before transaction validation
type BlockHeaderBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number uint64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// Hash of (number - 1) BlockHeaderBase
	PreviousBaseHeaderHash []byte `protobuf:"bytes,2,opt,name=previous_base_header_hash,json=previousBaseHeaderHash,proto3" json:"previous_base_header_hash,omitempty"`
	// Hash of BlockHeader of last block already committed to ledger
	LastCommittedBlockHash []byte `protobuf:"bytes,3,opt,name=last_committed_block_hash,json=lastCommittedBlockHash,proto3" json:"last_committed_block_hash,omitempty"`
	// Number of last block already committed to ledger
	LastCommittedBlockNum uint64 `protobuf:"varint,4,opt,name=last_committed_block_num,json=lastCommittedBlockNum,proto3" json:"last_committed_block_num,omitempty"`
}

func (x *BlockHeaderBase) Reset() {
	*x = BlockHeaderBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeaderBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeaderBase) ProtoMessage() {}

func (x *BlockHeaderBase) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeaderBase.ProtoReflect.Descriptor instead.
func (*BlockHeaderBase) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{1}
}

func (x *BlockHeaderBase) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *BlockHeaderBase) GetPreviousBaseHeaderHash() []byte {
	if x != nil {
		return x.PreviousBaseHeaderHash
	}
	return nil
}

func (x *BlockHeaderBase) GetLastCommittedBlockHash() []byte {
	if x != nil {
		return x.LastCommittedBlockHash
	}
	return nil
}

func (x *BlockHeaderBase) GetLastCommittedBlockNum() uint64 {
	if x != nil {
		return x.LastCommittedBlockNum
	}
	return 0
}

// BlockHeader holds, in addition to base header, additional chain integrity information that is computed after transactions validation,
// including the state and transaction Merkle trees roots, skip-chain hashes, and transaction validation information.
type BlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseHeader *BlockHeaderBase `protobuf:"bytes,1,opt,name=base_header,json=baseHeader,proto3" json:"base_header,omitempty"`
	// Skip chain hashed, based of BlockHeader hashed of blocks connected in blocks skip list
	SkipchainHashes [][]byte `protobuf:"bytes,2,rep,name=skipchain_hashes,json=skipchainHashes,proto3" json:"skipchain_hashes,omitempty"`
	// Root of Merkle tree that contains all transactions, including validation data
	TxMerkleTreeRootHash []byte `protobuf:"bytes,3,opt,name=tx_merkle_tree_root_hash,json=txMerkleTreeRootHash,proto3" json:"tx_merkle_tree_root_hash,omitempty"`
	// Root hash of system wide state merkle-particia tree
	StateMerkleTreeRootHash []byte `protobuf:"bytes,4,opt,name=state_merkle_tree_root_hash,json=stateMerkleTreeRootHash,proto3" json:"state_merkle_tree_root_hash,omitempty"`
	// Validation info for transactions in block.
	ValidationInfo []*ValidationInfo `protobuf:"bytes,5,rep,name=validation_info,json=validationInfo,proto3" json:"validation_info,omitempty"`
}

func (x *BlockHeader) Reset() {
	*x = BlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeader) ProtoMessage() {}

func (x *BlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeader.ProtoReflect.Descriptor instead.
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{2}
}

func (x *BlockHeader) GetBaseHeader() *BlockHeaderBase {
	if x != nil {
		return x.BaseHeader
	}
	return nil
}

func (x *BlockHeader) GetSkipchainHashes() [][]byte {
	if x != nil {
		return x.SkipchainHashes
	}
	return nil
}

func (x *BlockHeader) GetTxMerkleTreeRootHash() []byte {
	if x != nil {
		return x.TxMerkleTreeRootHash
	}
	return nil
}

func (x *BlockHeader) GetStateMerkleTreeRootHash() []byte {
	if x != nil {
		return x.StateMerkleTreeRootHash
	}
	return nil
}

func (x *BlockHeader) GetValidationInfo() []*ValidationInfo {
	if x != nil {
		return x.ValidationInfo
	}
	return nil
}

type DataTxEnvelopes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Envelopes []*DataTxEnvelope `protobuf:"bytes,1,rep,name=envelopes,proto3" json:"envelopes,omitempty"`
}

func (x *DataTxEnvelopes) Reset() {
	*x = DataTxEnvelopes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTxEnvelopes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTxEnvelopes) ProtoMessage() {}

func (x *DataTxEnvelopes) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTxEnvelopes.ProtoReflect.Descriptor instead.
func (*DataTxEnvelopes) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{3}
}

func (x *DataTxEnvelopes) GetEnvelopes() []*DataTxEnvelope {
	if x != nil {
		return x.Envelopes
	}
	return nil
}

type DataTxEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload    *DataTx           `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Signatures map[string][]byte `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DataTxEnvelope) Reset() {
	*x = DataTxEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTxEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTxEnvelope) ProtoMessage() {}

func (x *DataTxEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTxEnvelope.ProtoReflect.Descriptor instead.
func (*DataTxEnvelope) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{4}
}

func (x *DataTxEnvelope) GetPayload() *DataTx {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *DataTxEnvelope) GetSignatures() map[string][]byte {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type ConfigTxEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload   *ConfigTx `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature []byte    `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ConfigTxEnvelope) Reset() {
	*x = ConfigTxEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigTxEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigTxEnvelope) ProtoMessage() {}

func (x *ConfigTxEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigTxEnvelope.ProtoReflect.Descriptor instead.
func (*ConfigTxEnvelope) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{5}
}

func (x *ConfigTxEnvelope) GetPayload() *ConfigTx {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ConfigTxEnvelope) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type DBAdministrationTxEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload   *DBAdministrationTx `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature []byte              `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *DBAdministrationTxEnvelope) Reset() {
	*x = DBAdministrationTxEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBAdministrationTxEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBAdministrationTxEnvelope) ProtoMessage() {}

func (x *DBAdministrationTxEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBAdministrationTxEnvelope.ProtoReflect.Descriptor instead.
func (*DBAdministrationTxEnvelope) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{6}
}

func (x *DBAdministrationTxEnvelope) GetPayload() *DBAdministrationTx {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *DBAdministrationTxEnvelope) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type UserAdministrationTxEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload   *UserAdministrationTx `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature []byte                `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *UserAdministrationTxEnvelope) Reset() {
	*x = UserAdministrationTxEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAdministrationTxEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAdministrationTxEnvelope) ProtoMessage() {}

func (x *UserAdministrationTxEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAdministrationTxEnvelope.ProtoReflect.Descriptor instead.
func (*UserAdministrationTxEnvelope) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{7}
}

func (x *UserAdministrationTxEnvelope) GetPayload() *UserAdministrationTx {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *UserAdministrationTxEnvelope) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type DataTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MustSignUserIds []string       `protobuf:"bytes,1,rep,name=must_sign_user_ids,json=mustSignUserIds,proto3" json:"must_sign_user_ids,omitempty"`
	TxId            string         `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	DbOperations    []*DBOperation `protobuf:"bytes,3,rep,name=db_operations,json=dbOperations,proto3" json:"db_operations,omitempty"`
}

func (x *DataTx) Reset() {
	*x = DataTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTx) ProtoMessage() {}

func (x *DataTx) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTx.ProtoReflect.Descriptor instead.
func (*DataTx) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{8}
}

func (x *DataTx) GetMustSignUserIds() []string {
	if x != nil {
		return x.MustSignUserIds
	}
	return nil
}

func (x *DataTx) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *DataTx) GetDbOperations() []*DBOperation {
	if x != nil {
		return x.DbOperations
	}
	return nil
}

type DBOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbName      string        `protobuf:"bytes,3,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	DataReads   []*DataRead   `protobuf:"bytes,4,rep,name=data_reads,json=dataReads,proto3" json:"data_reads,omitempty"`
	DataWrites  []*DataWrite  `protobuf:"bytes,5,rep,name=data_writes,json=dataWrites,proto3" json:"data_writes,omitempty"`
	DataDeletes []*DataDelete `protobuf:"bytes,6,rep,name=data_deletes,json=dataDeletes,proto3" json:"data_deletes,omitempty"`
}

func (x *DBOperation) Reset() {
	*x = DBOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBOperation) ProtoMessage() {}

func (x *DBOperation) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBOperation.ProtoReflect.Descriptor instead.
func (*DBOperation) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{9}
}

func (x *DBOperation) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *DBOperation) GetDataReads() []*DataRead {
	if x != nil {
		return x.DataReads
	}
	return nil
}

func (x *DBOperation) GetDataWrites() []*DataWrite {
	if x != nil {
		return x.DataWrites
	}
	return nil
}

func (x *DBOperation) GetDataDeletes() []*DataDelete {
	if x != nil {
		return x.DataDeletes
	}
	return nil
}

// DataRead hold a read key and its version
type DataRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Version *Version `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DataRead) Reset() {
	*x = DataRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRead) ProtoMessage() {}

func (x *DataRead) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRead.ProtoReflect.Descriptor instead.
func (*DataRead) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{10}
}

func (x *DataRead) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DataRead) GetVersion() *Version {
	if x != nil {
		return x.Version
	}
	return nil
}

// DataWrite hold a write including a delete
type DataWrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string         `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte         `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Acl   *AccessControl `protobuf:"bytes,3,opt,name=acl,proto3" json:"acl,omitempty"`
}

func (x *DataWrite) Reset() {
	*x = DataWrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataWrite) ProtoMessage() {}

func (x *DataWrite) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataWrite.ProtoReflect.Descriptor instead.
func (*DataWrite) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{11}
}

func (x *DataWrite) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DataWrite) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DataWrite) GetAcl() *AccessControl {
	if x != nil {
		return x.Acl
	}
	return nil
}

type DataDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DataDelete) Reset() {
	*x = DataDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataDelete) ProtoMessage() {}

func (x *DataDelete) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataDelete.ProtoReflect.Descriptor instead.
func (*DataDelete) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{12}
}

func (x *DataDelete) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ConfigTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId               string         `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TxId                 string         `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	ReadOldConfigVersion *Version       `protobuf:"bytes,3,opt,name=read_old_config_version,json=readOldConfigVersion,proto3" json:"read_old_config_version,omitempty"`
	NewConfig            *ClusterConfig `protobuf:"bytes,4,opt,name=new_config,json=newConfig,proto3" json:"new_config,omitempty"`
}

func (x *ConfigTx) Reset() {
	*x = ConfigTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigTx) ProtoMessage() {}

func (x *ConfigTx) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigTx.ProtoReflect.Descriptor instead.
func (*ConfigTx) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{13}
}

func (x *ConfigTx) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ConfigTx) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *ConfigTx) GetReadOldConfigVersion() *Version {
	if x != nil {
		return x.ReadOldConfigVersion
	}
	return nil
}

func (x *ConfigTx) GetNewConfig() *ClusterConfig {
	if x != nil {
		return x.NewConfig
	}
	return nil
}

type DBAdministrationTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string              `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TxId      string              `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	CreateDbs []string            `protobuf:"bytes,3,rep,name=create_dbs,json=createDbs,proto3" json:"create_dbs,omitempty"`
	DeleteDbs []string            `protobuf:"bytes,4,rep,name=delete_dbs,json=deleteDbs,proto3" json:"delete_dbs,omitempty"`
	DbsIndex  map[string]*DBIndex `protobuf:"bytes,5,rep,name=dbs_index,json=dbsIndex,proto3" json:"dbs_index,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DBAdministrationTx) Reset() {
	*x = DBAdministrationTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBAdministrationTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBAdministrationTx) ProtoMessage() {}

func (x *DBAdministrationTx) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBAdministrationTx.ProtoReflect.Descriptor instead.
func (*DBAdministrationTx) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{14}
}

func (x *DBAdministrationTx) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DBAdministrationTx) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *DBAdministrationTx) GetCreateDbs() []string {
	if x != nil {
		return x.CreateDbs
	}
	return nil
}

func (x *DBAdministrationTx) GetDeleteDbs() []string {
	if x != nil {
		return x.DeleteDbs
	}
	return nil
}

func (x *DBAdministrationTx) GetDbsIndex() map[string]*DBIndex {
	if x != nil {
		return x.DbsIndex
	}
	return nil
}

type DBIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeAndType map[string]IndexAttributeType `protobuf:"bytes,1,rep,name=attribute_and_type,json=attributeAndType,proto3" json:"attribute_and_type,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=types.IndexAttributeType"`
}

func (x *DBIndex) Reset() {
	*x = DBIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBIndex) ProtoMessage() {}

func (x *DBIndex) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBIndex.ProtoReflect.Descriptor instead.
func (*DBIndex) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{15}
}

func (x *DBIndex) GetAttributeAndType() map[string]IndexAttributeType {
	if x != nil {
		return x.AttributeAndType
	}
	return nil
}

type UserAdministrationTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string        `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TxId        string        `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	UserReads   []*UserRead   `protobuf:"bytes,3,rep,name=user_reads,json=userReads,proto3" json:"user_reads,omitempty"`
	UserWrites  []*UserWrite  `protobuf:"bytes,4,rep,name=user_writes,json=userWrites,proto3" json:"user_writes,omitempty"`
	UserDeletes []*UserDelete `protobuf:"bytes,5,rep,name=user_deletes,json=userDeletes,proto3" json:"user_deletes,omitempty"`
}

func (x *UserAdministrationTx) Reset() {
	*x = UserAdministrationTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAdministrationTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAdministrationTx) ProtoMessage() {}

func (x *UserAdministrationTx) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAdministrationTx.ProtoReflect.Descriptor instead.
func (*UserAdministrationTx) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{16}
}

func (x *UserAdministrationTx) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserAdministrationTx) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *UserAdministrationTx) GetUserReads() []*UserRead {
	if x != nil {
		return x.UserReads
	}
	return nil
}

func (x *UserAdministrationTx) GetUserWrites() []*UserWrite {
	if x != nil {
		return x.UserWrites
	}
	return nil
}

func (x *UserAdministrationTx) GetUserDeletes() []*UserDelete {
	if x != nil {
		return x.UserDeletes
	}
	return nil
}

type UserRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Version *Version `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *UserRead) Reset() {
	*x = UserRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRead) ProtoMessage() {}

func (x *UserRead) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRead.ProtoReflect.Descriptor instead.
func (*UserRead) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{17}
}

func (x *UserRead) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserRead) GetVersion() *Version {
	if x != nil {
		return x.Version
	}
	return nil
}

type UserWrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User          `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Acl  *AccessControl `protobuf:"bytes,2,opt,name=acl,proto3" json:"acl,omitempty"`
}

func (x *UserWrite) Reset() {
	*x = UserWrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWrite) ProtoMessage() {}

func (x *UserWrite) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWrite.ProtoReflect.Descriptor instead.
func (*UserWrite) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{18}
}

func (x *UserWrite) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserWrite) GetAcl() *AccessControl {
	if x != nil {
		return x.Acl
	}
	return nil
}

type UserDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *UserDelete) Reset() {
	*x = UserDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDelete) ProtoMessage() {}

func (x *UserDelete) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDelete.ProtoReflect.Descriptor instead.
func (*UserDelete) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{19}
}

func (x *UserDelete) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version       *Version       `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	AccessControl *AccessControl `protobuf:"bytes,2,opt,name=access_control,json=accessControl,proto3" json:"access_control,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{20}
}

func (x *Metadata) GetVersion() *Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *Metadata) GetAccessControl() *AccessControl {
	if x != nil {
		return x.AccessControl
	}
	return nil
}

type Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNum uint64 `protobuf:"varint,1,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
	TxNum    uint64 `protobuf:"varint,2,opt,name=tx_num,json=txNum,proto3" json:"tx_num,omitempty"`
}

func (x *Version) Reset() {
	*x = Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{21}
}

func (x *Version) GetBlockNum() uint64 {
	if x != nil {
		return x.BlockNum
	}
	return 0
}

func (x *Version) GetTxNum() uint64 {
	if x != nil {
		return x.TxNum
	}
	return 0
}

type AccessControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadUsers          map[string]bool          `protobuf:"bytes,1,rep,name=read_users,json=readUsers,proto3" json:"read_users,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ReadWriteUsers     map[string]bool          `protobuf:"bytes,2,rep,name=read_write_users,json=readWriteUsers,proto3" json:"read_write_users,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	SignPolicyForWrite AccessControlWritePolicy `protobuf:"varint,3,opt,name=sign_policy_for_write,json=signPolicyForWrite,proto3,enum=types.AccessControlWritePolicy" json:"sign_policy_for_write,omitempty"`
}

func (x *AccessControl) Reset() {
	*x = AccessControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessControl) ProtoMessage() {}

func (x *AccessControl) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessControl.ProtoReflect.Descriptor instead.
func (*AccessControl) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{22}
}

func (x *AccessControl) GetReadUsers() map[string]bool {
	if x != nil {
		return x.ReadUsers
	}
	return nil
}

func (x *AccessControl) GetReadWriteUsers() map[string]bool {
	if x != nil {
		return x.ReadWriteUsers
	}
	return nil
}

func (x *AccessControl) GetSignPolicyForWrite() AccessControlWritePolicy {
	if x != nil {
		return x.SignPolicyForWrite
	}
	return AccessControl_ANY
}

type KVWithMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      string    `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value    []byte    `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Metadata *Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *KVWithMetadata) Reset() {
	*x = KVWithMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVWithMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVWithMetadata) ProtoMessage() {}

func (x *KVWithMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVWithMetadata.ProtoReflect.Descriptor instead.
func (*KVWithMetadata) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{23}
}

func (x *KVWithMetadata) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KVWithMetadata) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *KVWithMetadata) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ValueWithMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    []byte    `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Metadata *Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ValueWithMetadata) Reset() {
	*x = ValueWithMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueWithMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueWithMetadata) ProtoMessage() {}

func (x *ValueWithMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueWithMetadata.ProtoReflect.Descriptor instead.
func (*ValueWithMetadata) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{24}
}

func (x *ValueWithMetadata) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ValueWithMetadata) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Digest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ledger merkle tree root
	RootHash []byte `protobuf:"bytes,1,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
	// Ledger height
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *Digest) Reset() {
	*x = Digest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Digest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Digest) ProtoMessage() {}

func (x *Digest) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Digest.ProtoReflect.Descriptor instead.
func (*Digest) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{25}
}

func (x *Digest) GetRootHash() []byte {
	if x != nil {
		return x.RootHash
	}
	return nil
}

func (x *Digest) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type ValidationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag            Flag   `protobuf:"varint,1,opt,name=flag,proto3,enum=types.Flag" json:"flag,omitempty"`
	ReasonIfInvalid string `protobuf:"bytes,2,opt,name=reason_if_invalid,json=reasonIfInvalid,proto3" json:"reason_if_invalid,omitempty"`
}

func (x *ValidationInfo) Reset() {
	*x = ValidationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationInfo) ProtoMessage() {}

func (x *ValidationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationInfo.ProtoReflect.Descriptor instead.
func (*ValidationInfo) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{26}
}

func (x *ValidationInfo) GetFlag() Flag {
	if x != nil {
		return x.Flag
	}
	return Flag_VALID
}

func (x *ValidationInfo) GetReasonIfInvalid() string {
	if x != nil {
		return x.ReasonIfInvalid
	}
	return ""
}

type TxProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *BlockHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Path   [][]byte     `protobuf:"bytes,2,rep,name=path,proto3" json:"path,omitempty"`
}

func (x *TxProof) Reset() {
	*x = TxProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxProof) ProtoMessage() {}

func (x *TxProof) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxProof.ProtoReflect.Descriptor instead.
func (*TxProof) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{27}
}

func (x *TxProof) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TxProof) GetPath() [][]byte {
	if x != nil {
		return x.Path
	}
	return nil
}

type BlockProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNumber uint64         `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Path        []*BlockHeader `protobuf:"bytes,2,rep,name=path,proto3" json:"path,omitempty"`
}

func (x *BlockProof) Reset() {
	*x = BlockProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockProof) ProtoMessage() {}

func (x *BlockProof) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockProof.ProtoReflect.Descriptor instead.
func (*BlockProof) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{28}
}

func (x *BlockProof) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *BlockProof) GetPath() []*BlockHeader {
	if x != nil {
		return x.Path
	}
	return nil
}

type TxReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *BlockHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	TxIndex uint64       `protobuf:"varint,2,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
}

func (x *TxReceipt) Reset() {
	*x = TxReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxReceipt) ProtoMessage() {}

func (x *TxReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxReceipt.ProtoReflect.Descriptor instead.
func (*TxReceipt) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{29}
}

func (x *TxReceipt) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TxReceipt) GetTxIndex() uint64 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

// ConsensusMetadata holds data specific to the consensus protocol ordering the block.
// The field prefix indicated the protocil used, e.g. "raft_*".
type ConsensusMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Raft term associated with the block
	RaftTerm uint64 `protobuf:"varint,1,opt,name=raft_term,json=raftTerm,proto3" json:"raft_term,omitempty"`
	// The Raft index associated with the block
	RaftIndex uint64 `protobuf:"varint,2,opt,name=raft_index,json=raftIndex,proto3" json:"raft_index,omitempty"`
}

func (x *ConsensusMetadata) Reset() {
	*x = ConsensusMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusMetadata) ProtoMessage() {}

func (x *ConsensusMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusMetadata.ProtoReflect.Descriptor instead.
func (*ConsensusMetadata) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{30}
}

func (x *ConsensusMetadata) GetRaftTerm() uint64 {
	if x != nil {
		return x.RaftTerm
	}
	return 0
}

func (x *ConsensusMetadata) GetRaftIndex() uint64 {
	if x != nil {
		return x.RaftIndex
	}
	return 0
}

// AugmentedBlockHeader contains in addition to the block header, an array of transaction IDs (TxID). This array
// corresponds to the validation info array in the block header and is keyed by the transaction index.
type AugmentedBlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The block header.
	Header *BlockHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// An array of transaction IDs (TxID).
	TxIds []string `protobuf:"bytes,2,rep,name=tx_ids,json=txIds,proto3" json:"tx_ids,omitempty"`
}

func (x *AugmentedBlockHeader) Reset() {
	*x = AugmentedBlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_block_and_transaction_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AugmentedBlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AugmentedBlockHeader) ProtoMessage() {}

func (x *AugmentedBlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_block_and_transaction_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AugmentedBlockHeader.ProtoReflect.Descriptor instead.
func (*AugmentedBlockHeader) Descriptor() ([]byte, []int) {
	return file_block_and_transaction_proto_rawDescGZIP(), []int{31}
}

func (x *AugmentedBlockHeader) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AugmentedBlockHeader) GetTxIds() []string {
	if x != nil {
		return x.TxIds
	}
	return nil
}

var File_block_and_transaction_proto protoreflect.FileDescriptor

var file_block_and_transaction_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x1a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xec, 0x03, 0x0a, 0x05, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x44, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x78, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x78, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x54, 0x78, 0x45, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x74, 0x78, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x54, 0x78, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x54, 0x78, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x66,
	0x0a, 0x1d, 0x64, 0x62, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x78, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x42,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x78,
	0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x64, 0x62, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x78, 0x45, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x6c, 0x0a, 0x1f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x78,
	0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x78, 0x45, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x78, 0x45, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x09, 0x0a,
	0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xd8, 0x01, 0x0a, 0x0f, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x42, 0x61, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x39, 0x0a, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x37, 0x0a, 0x18, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6c, 0x61,
	0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x22, 0xa7, 0x02, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x6b, 0x69, 0x70, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x18, 0x74, 0x78, 0x5f, 0x6d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x74, 0x78, 0x4d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x3c, 0x0a, 0x1b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f,
	0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a,
	0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x46, 0x0a,
	0x0f, 0x44, 0x61, 0x74, 0x61, 0x54, 0x78, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73,
	0x12, 0x33, 0x0a, 0x09, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x78, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x78,
	0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x78, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x45, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x78, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5b, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x54, 0x78, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x78, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0x6f, 0x0a, 0x1a, 0x44, 0x42, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x78, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x42, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x78, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x73, 0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x78, 0x45, 0x6e, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x78, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x06, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x78, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x6d, 0x75, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0d, 0x64, 0x62, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x42, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x62, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xbf, 0x01, 0x0a, 0x0b, 0x44, 0x42, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x61, 0x64, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x61, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x73, 0x22, 0x46, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x61, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x28, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x09, 0x44, 0x61,
	0x74, 0x61, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x26, 0x0a, 0x03, 0x61, 0x63, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x52, 0x03, 0x61, 0x63, 0x6c, 0x22, 0x1e, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xb4, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x54, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x13, 0x0a,
	0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78,
	0x49, 0x64, 0x12, 0x45, 0x0a, 0x17, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6c, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x14, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x6e, 0x65, 0x77,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x93,
	0x02, 0x0a, 0x12, 0x44, 0x42, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x13,
	0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x78, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x62,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x62, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x64, 0x62, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x62,
	0x73, 0x12, 0x44, 0x0a, 0x09, 0x64, 0x62, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x42, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x78, 0x2e,
	0x44, 0x62, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x64,
	0x62, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x4b, 0x0a, 0x0d, 0x44, 0x62, 0x73, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x44, 0x42, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xbd, 0x01, 0x0a, 0x07, 0x44, 0x42, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x52, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x42, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x10, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x1a, 0x5e, 0x0a, 0x15, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xdd, 0x01, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x78, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x34,
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x12, 0x1f, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x26, 0x0a, 0x03, 0x61, 0x63, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x52, 0x03, 0x61, 0x63, 0x6c, 0x22, 0x25, 0x0a, 0x0a, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x71, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x22, 0x3d, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x74,
	0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x78, 0x4e,
	0x75, 0x6d, 0x22, 0xa0, 0x03, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x12, 0x42, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72,
	0x65, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x72, 0x65,
	0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x54, 0x0a, 0x15,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x12,
	0x73, 0x69, 0x67, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x6f, 0x72, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x1a, 0x3c, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x41, 0x0a, 0x13, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x20, 0x0a, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x4c, 0x4c, 0x10, 0x01, 0x22, 0x65, 0x0a, 0x0e, 0x4b, 0x56, 0x57, 0x69, 0x74, 0x68, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x56, 0x0a, 0x11,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x3d, 0x0a, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x5d, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x61, 0x67,
	0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x69, 0x66, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x66, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x22, 0x49, 0x0a, 0x07, 0x54, 0x78, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x2a, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x57, 0x0a,
	0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x52, 0x0a, 0x09, 0x54, 0x78, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x4f, 0x0a, 0x11, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x72, 0x61, 0x66, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x61, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x72, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x59, 0x0a, 0x14, 0x41,
	0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x78, 0x49, 0x64, 0x73, 0x2a, 0x81, 0x02, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x09, 0x0a, 0x05, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x56, 0x43, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c,
	0x49, 0x43, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x49, 0x4e, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x10, 0x01, 0x12, 0x2e, 0x0a, 0x2a, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x56,
	0x43, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x4e,
	0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x49, 0x45, 0x53, 0x10,
	0x05, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x41,
	0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x53, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x07, 0x2a, 0x39, 0x0a, 0x12, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c,
	0x45, 0x41, 0x4e, 0x10, 0x02, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2d,
	0x6c, 0x61, 0x62, 0x73, 0x2f, 0x6f, 0x72, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_block_and_transaction_proto_rawDescOnce sync.Once
	file_block_and_transaction_proto_rawDescData = file_block_and_transaction_proto_rawDesc
)

func file_block_and_transaction_proto_rawDescGZIP() []byte {
	file_block_and_transaction_proto_rawDescOnce.Do(func() {
		file_block_and_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_block_and_transaction_proto_rawDescData)
	})
	return file_block_and_transaction_proto_rawDescData
}

var file_block_and_transaction_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_block_and_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_block_and_transaction_proto_goTypes = []interface{}{
	(Flag)(0),                            // 0: types.Flag
	(IndexAttributeType)(0),              // 1: types.IndexAttributeType
	(AccessControlWritePolicy)(0),        // 2: types.AccessControl.write_policy
	(*Block)(nil),                        // 3: types.Block
	(*BlockHeaderBase)(nil),              // 4: types.BlockHeaderBase
	(*BlockHeader)(nil),                  // 5: types.BlockHeader
	(*DataTxEnvelopes)(nil),              // 6: types.DataTxEnvelopes
	(*DataTxEnvelope)(nil),               // 7: types.DataTxEnvelope
	(*ConfigTxEnvelope)(nil),             // 8: types.ConfigTxEnvelope
	(*DBAdministrationTxEnvelope)(nil),   // 9: types.DBAdministrationTxEnvelope
	(*UserAdministrationTxEnvelope)(nil), // 10: types.UserAdministrationTxEnvelope
	(*DataTx)(nil),                       // 11: types.DataTx
	(*DBOperation)(nil),                  // 12: types.DBOperation
	(*DataRead)(nil),                     // 13: types.DataRead
	(*DataWrite)(nil),                    // 14: types.DataWrite
	(*DataDelete)(nil),                   // 15: types.DataDelete
	(*ConfigTx)(nil),                     // 16: types.ConfigTx
	(*DBAdministrationTx)(nil),           // 17: types.DBAdministrationTx
	(*DBIndex)(nil),                      // 18: types.DBIndex
	(*UserAdministrationTx)(nil),         // 19: types.UserAdministrationTx
	(*UserRead)(nil),                     // 20: types.UserRead
	(*UserWrite)(nil),                    // 21: types.UserWrite
	(*UserDelete)(nil),                   // 22: types.UserDelete
	(*Metadata)(nil),                     // 23: types.Metadata
	(*Version)(nil),                      // 24: types.Version
	(*AccessControl)(nil),                // 25: types.AccessControl
	(*KVWithMetadata)(nil),               // 26: types.KVWithMetadata
	(*ValueWithMetadata)(nil),            // 27: types.ValueWithMetadata
	(*Digest)(nil),                       // 28: types.Digest
	(*ValidationInfo)(nil),               // 29: types.ValidationInfo
	(*TxProof)(nil),                      // 30: types.TxProof
	(*BlockProof)(nil),                   // 31: types.BlockProof
	(*TxReceipt)(nil),                    // 32: types.TxReceipt
	(*ConsensusMetadata)(nil),            // 33: types.ConsensusMetadata
	(*AugmentedBlockHeader)(nil),         // 34: types.AugmentedBlockHeader
	nil,                                  // 35: types.DataTxEnvelope.SignaturesEntry
	nil,                                  // 36: types.DBAdministrationTx.DbsIndexEntry
	nil,                                  // 37: types.DBIndex.AttributeAndTypeEntry
	nil,                                  // 38: types.AccessControl.ReadUsersEntry
	nil,                                  // 39: types.AccessControl.ReadWriteUsersEntry
	(*ClusterConfig)(nil),                // 40: types.ClusterConfig
	(*User)(nil),                         // 41: types.User
}
var file_block_and_transaction_proto_depIdxs = []int32{
	5,  // 0: types.Block.header:type_name -> types.BlockHeader
	6,  // 1: types.Block.data_tx_envelopes:type_name -> types.DataTxEnvelopes
	8,  // 2: types.Block.config_tx_envelope:type_name -> types.ConfigTxEnvelope
	9,  // 3: types.Block.db_administration_tx_envelope:type_name -> types.DBAdministrationTxEnvelope
	10, // 4: types.Block.user_administration_tx_envelope:type_name -> types.UserAdministrationTxEnvelope
	33, // 5: types.Block.consensus_metadata:type_name -> types.ConsensusMetadata
	4,  // 6: types.BlockHeader.base_header:type_name -> types.BlockHeaderBase
	29, // 7: types.BlockHeader.validation_info:type_name -> types.ValidationInfo
	7,  // 8: types.DataTxEnvelopes.envelopes:type_name -> types.DataTxEnvelope
	11, // 9: types.DataTxEnvelope.payload:type_name -> types.DataTx
	35, // 10: types.DataTxEnvelope.signatures:type_name -> types.DataTxEnvelope.SignaturesEntry
	16, // 11: types.ConfigTxEnvelope.payload:type_name -> types.ConfigTx
	17, // 12: types.DBAdministrationTxEnvelope.payload:type_name -> types.DBAdministrationTx
	19, // 13: types.UserAdministrationTxEnvelope.payload:type_name -> types.UserAdministrationTx
	12, // 14: types.DataTx.db_operations:type_name -> types.DBOperation
	13, // 15: types.DBOperation.data_reads:type_name -> types.DataRead
	14, // 16: types.DBOperation.data_writes:type_name -> types.DataWrite
	15, // 17: types.DBOperation.data_deletes:type_name -> types.DataDelete
	24, // 18: types.DataRead.version:type_name -> types.Version
	25, // 19: types.DataWrite.acl:type_name -> types.AccessControl
	24, // 20: types.ConfigTx.read_old_config_version:type_name -> types.Version
	40, // 21: types.ConfigTx.new_config:type_name -> types.ClusterConfig
	36, // 22: types.DBAdministrationTx.dbs_index:type_name -> types.DBAdministrationTx.DbsIndexEntry
	37, // 23: types.DBIndex.attribute_and_type:type_name -> types.DBIndex.AttributeAndTypeEntry
	20, // 24: types.UserAdministrationTx.user_reads:type_name -> types.UserRead
	21, // 25: types.UserAdministrationTx.user_writes:type_name -> types.UserWrite
	22, // 26: types.UserAdministrationTx.user_deletes:type_name -> types.UserDelete
	24, // 27: types.UserRead.version:type_name -> types.Version
	41, // 28: types.UserWrite.user:type_name -> types.User
	25, // 29: types.UserWrite.acl:type_name -> types.AccessControl
	24, // 30: types.Metadata.version:type_name -> types.Version
	25, // 31: types.Metadata.access_control:type_name -> types.AccessControl
	38, // 32: types.AccessControl.read_users:type_name -> types.AccessControl.ReadUsersEntry
	39, // 33: types.AccessControl.read_write_users:type_name -> types.AccessControl.ReadWriteUsersEntry
	2,  // 34: types.AccessControl.sign_policy_for_write:type_name -> types.AccessControl.write_policy
	23, // 35: types.KVWithMetadata.metadata:type_name -> types.Metadata
	23, // 36: types.ValueWithMetadata.metadata:type_name -> types.Metadata
	0,  // 37: types.ValidationInfo.flag:type_name -> types.Flag
	5,  // 38: types.TxProof.header:type_name -> types.BlockHeader
	5,  // 39: types.BlockProof.path:type_name -> types.BlockHeader
	5,  // 40: types.TxReceipt.header:type_name -> types.BlockHeader
	5,  // 41: types.AugmentedBlockHeader.header:type_name -> types.BlockHeader
	18, // 42: types.DBAdministrationTx.DbsIndexEntry.value:type_name -> types.DBIndex
	1,  // 43: types.DBIndex.AttributeAndTypeEntry.value:type_name -> types.IndexAttributeType
	44, // [44:44] is the sub-list for method output_type
	44, // [44:44] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_block_and_transaction_proto_init() }
func file_block_and_transaction_proto_init() {
	if File_block_and_transaction_proto != nil {
		return
	}
	file_configuration_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_block_and_transaction_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHeaderBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTxEnvelopes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTxEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigTxEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBAdministrationTxEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAdministrationTxEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataWrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBAdministrationTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAdministrationTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVWithMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueWithMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Digest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_block_and_transaction_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AugmentedBlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_block_and_transaction_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Block_DataTxEnvelopes)(nil),
		(*Block_ConfigTxEnvelope)(nil),
		(*Block_DbAdministrationTxEnvelope)(nil),
		(*Block_UserAdministrationTxEnvelope)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_block_and_transaction_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_block_and_transaction_proto_goTypes,
		DependencyIndexes: file_block_and_transaction_proto_depIdxs,
		EnumInfos:         file_block_and_transaction_proto_enumTypes,
		MessageInfos:      file_block_and_transaction_proto_msgTypes,
	}.Build()
	File_block_and_transaction_proto = out.File
	file_block_and_transaction_proto_rawDesc = nil
	file_block_and_transaction_proto_goTypes = nil
	file_block_and_transaction_proto_depIdxs = nil
}
