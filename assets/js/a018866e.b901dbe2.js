"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1440],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function d(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},d=Object.keys(e);for(a=0;a<d.length;a++)n=d[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(a=0;a<d.length;a++)n=d[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),l=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,d=e.originalType,o=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),u=l(n),m=i,b=u["".concat(o,".").concat(m)]||u[m]||c[m]||d;return n?a.createElement(b,s(s({ref:t},p),{},{components:n})):a.createElement(b,s({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var d=n.length,s=new Array(d);s[0]=u;var r={};for(var o in t)hasOwnProperty.call(t,o)&&(r[o]=t[o]);r.originalType=e,r.mdxType="string"==typeof e?e:i,s[1]=r;for(var l=2;l<d;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6735:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return r},contentTitle:function(){return o},metadata:function(){return l},toc:function(){return p},default:function(){return u}});var a=n(7462),i=n(3366),d=(n(7294),n(3905)),s=["components"],r={id:"dbtx",title:"Database Administration Transaction"},o="Database Administration Transaction",l={unversionedId:"getting-started/transactions/curl/dbtx",id:"getting-started/transactions/curl/dbtx",isDocsHomePage:!1,title:"Database Administration Transaction",description:"To create or delete user databases, we need to issue a POST /db/tx , where txPayload",source:"@site/docs/getting-started/transactions/curl/dbtx.md",sourceDirName:"getting-started/transactions/curl",slug:"/getting-started/transactions/curl/dbtx",permalink:"/orion-server/docs/getting-started/transactions/curl/dbtx",tags:[],version:"current",frontMatter:{id:"dbtx",title:"Database Administration Transaction"},sidebar:"Documentation",previous:{title:"Data Transaction",permalink:"/orion-server/docs/getting-started/transactions/gosdk/datatx"},next:{title:"User Administration Transaction",permalink:"/orion-server/docs/getting-started/transactions/curl/usertx"}},p=[{value:"1) Create Databases",id:"1-create-databases",children:[{value:"1.1) Create databases named db1 and db2",id:"11-create-databases-named-db1-and-db2",children:[],level:3},{value:"1.2) Check the existence of db1",id:"12-check-the-existence-of-db1",children:[],level:3},{value:"1.3) Check the existence of db2",id:"13-check-the-existence-of-db2",children:[],level:3}],level:2},{value:"2) Create a Database with Index Definition",id:"2-create-a-database-with-index-definition",children:[],level:2},{value:"3) Delete Databases",id:"3-delete-databases",children:[{value:"3.1) Delete databases named db1 and db2",id:"31-delete-databases-named-db1-and-db2",children:[],level:3},{value:"3.2) Check the existence of db1",id:"32-check-the-existence-of-db1",children:[],level:3},{value:"3.3) Check the existence of db2",id:"33-check-the-existence-of-db2",children:[],level:3}],level:2},{value:"4) Create and Delete Databases in a Single Transaction",id:"4-create-and-delete-databases-in-a-single-transaction",children:[],level:2},{value:"5) Invalid Database Administration Transaction",id:"5-invalid-database-administration-transaction",children:[{value:"5.1) Database to be created already exists",id:"51-database-to-be-created-already-exists",children:[],level:3},{value:"5.2) Database to be deleted does not exist",id:"52-database-to-be-deleted-does-not-exist",children:[],level:3},{value:"5.3) Database to be deleted is a system database",id:"53-database-to-be-deleted-is-a-system-database",children:[],level:3}],level:2}],c={toc:p};function u(e){var t=e.components,n=(0,i.Z)(e,s);return(0,d.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,d.kt)("h1",{id:"database-administration-transaction"},"Database Administration Transaction"),(0,d.kt)("p",null,"To create or delete user databases, we need to issue a ",(0,d.kt)("inlineCode",{parentName:"p"},"POST /db/tx {txPayload}"),", where ",(0,d.kt)("inlineCode",{parentName:"p"},"txPayload"),"\ncontains information about the database to be created and/or deleted."),(0,d.kt)("p",null,"Let's cover the following topics:"),(0,d.kt)("ol",null,(0,d.kt)("li",{parentName:"ol"},(0,d.kt)("a",{parentName:"li",href:"#1-create-databases"},"Create new databases without index")),(0,d.kt)("li",{parentName:"ol"},(0,d.kt)("a",{parentName:"li",href:"#2-create-a-database-with-index-definition"},"Create a new database with index definition")),(0,d.kt)("li",{parentName:"ol"},(0,d.kt)("a",{parentName:"li",href:"#3-delete-databases"},"Delete existing databases")),(0,d.kt)("li",{parentName:"ol"},(0,d.kt)("a",{parentName:"li",href:"#4-create-and-delete-databases-in-a-single-transaction"},"Create and delete databases within a single transaction")),(0,d.kt)("li",{parentName:"ol"},(0,d.kt)("a",{parentName:"li",href:"#5-invalid-database-administration-transaction"},"Invalid database administration transactions"))),(0,d.kt)("p",null,"Note that all database administration transactions must be submitted by the admin."),(0,d.kt)("h2",{id:"1-create-databases"},"1) Create Databases"),(0,d.kt)("h3",{id:"11-create-databases-named-db1-and-db2"},"1.1) Create databases named db1 and db2"),(0,d.kt)("p",null,"The following ",(0,d.kt)("inlineCode",{parentName:"p"},"cURL")," command submits a database administration transaction to create two new databases\nnamed ",(0,d.kt)("inlineCode",{parentName:"p"},"db1")," and ",(0,d.kt)("inlineCode",{parentName:"p"},"db2"),":"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-shell"},' curl \\\n   -H "Content-Type: application/json" \\\n   -H "TxTimeout: 2s" \\\n   -X POST http://127.0.0.1:6001/db/tx \\\n   --data \'{\n    "payload": {\n        "user_id": "admin",\n        "tx_id": "1b6d6414-9b58-45d0-9723-1f31712add71",\n        "create_dbs": [\n            "db1",\n            "db2"\n        ]\n    },\n  "signature": "MEUCIQDidxd5ScjpfYTIfVmSfC874zO0iosSyQUzRprs8j7VXgIgR7QxISwdjgXX58TktYXobJHwbCC3F/14rxCg0F8Ma1w="\n}\' | jq .\n')),(0,d.kt)("p",null,"The ",(0,d.kt)("inlineCode",{parentName:"p"},"payload")," of the database administration transaction must contain a ",(0,d.kt)("inlineCode",{parentName:"p"},'"user_id"')," that submits the transaction, a ",(0,d.kt)("inlineCode",{parentName:"p"},'"tx_id"')," to uniquely identify this transaction, and a list of dbs to be created in a ",(0,d.kt)("inlineCode",{parentName:"p"},'"create_dbs"')," list as shown in the above cURL command."),(0,d.kt)("p",null,"As all administrative transactions must be submitted only by the admin, the ",(0,d.kt)("inlineCode",{parentName:"p"},'"user_id"')," is set to ",(0,d.kt)("inlineCode",{parentName:"p"},'"admin"'),". As we are creating two dbs named ",(0,d.kt)("inlineCode",{parentName:"p"},"db1")," and ",(0,d.kt)("inlineCode",{parentName:"p"},"db2"),", the ",(0,d.kt)("inlineCode",{parentName:"p"},'"create_dbs"')," is set to ",(0,d.kt)("inlineCode",{parentName:"p"},'["db1","db2"]'),". Finally, the signature field contains the admin's signature on the payload and is computed using the ",(0,d.kt)("inlineCode",{parentName:"p"},"signer")," utility as shown below:"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-shell"},'./bin/signer -privatekey=deployment/sample/crypto/admin/admin.key \\\n    -data=\'{"user_id":"admin","tx_id":"1b6d6414-9b58-45d0-9723-1f31712add71","create_dbs":["db1","db2"]}\'\n')),(0,d.kt)("p",null,"The output of the above command is set to the ",(0,d.kt)("inlineCode",{parentName:"p"},"signature")," field in the data."),(0,d.kt)("p",null,"Once the db creation transaction gets validated and committed, it returns a receipt to the transaction submitter.\nNote that only if the ",(0,d.kt)("inlineCode",{parentName:"p"},"TxTimeout")," header is set, the submitting user receives the transaction receipt. This is\nbecause if the ",(0,d.kt)("inlineCode",{parentName:"p"},"TxTimeout")," is not set, the transaction is submitted asynchronously and the database node\nreturns as soon as it accepts the transaction into the queue. If the ",(0,d.kt)("inlineCode",{parentName:"p"},"TxTimeout")," is set, the database node waits\nfor the specified time. If the transaction is committed by the specified time, the receipt is returned.\nThe receipt for the above transaction looks something like the following:"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-webmanifest"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "receipt": {\n      "header": {\n        "base_header": {\n          "number": 2,\n          "previous_base_header_hash": "YRMz96IjKSwQsNM9wPTGC13ueHxwPvjLCnpp/k/HnV4=",\n          "last_committed_block_hash": "WgR2lRdea8rt6O8UBzSdhtu/LXcAFDAPyYRVGfasHeI=",\n          "last_committed_block_num": 1\n        },\n        "skipchain_hashes": [\n          "WgR2lRdea8rt6O8UBzSdhtu/LXcAFDAPyYRVGfasHeI="\n        ],\n        "tx_merkel_tree_root_hash": "CzIEbygWXNneRauTgFvxjSa5JvX1FWC3KN51jJDLxT0=",\n        "state_merkel_tree_root_hash": "QPUvUPUpCL/P31VtV0CuRs5OWhDJZeh2psL1XHOyID8=",\n        "validation_info": [\n          {}\n        ]\n      }\n    }\n  },\n  "signature": "MEYCIQDi91QtSpLRKfX2MiIT2KqH9OXZYrULPQZE13EpVfk4QIhAJr960MOF/TgrkX02hDus5z23G1I8DAQtApg2xGaza5Q"\n}\n')),(0,d.kt)("p",null,"Once the above transaction gets validated and committed, we can check the existence of ",(0,d.kt)("inlineCode",{parentName:"p"},"db1")," and ",(0,d.kt)("inlineCode",{parentName:"p"},"db2"),"."),(0,d.kt)("h3",{id:"12-check-the-existence-of-db1"},"1.2) Check the existence of db1"),(0,d.kt)("p",null,"In queries, we have to set the ",(0,d.kt)("inlineCode",{parentName:"p"},"UserID")," and ",(0,d.kt)("inlineCode",{parentName:"p"},"Signature")," headers, as opposed to in the transaction, where we need to pass both the ",(0,d.kt)("inlineCode",{parentName:"p"},"UserID")," and ",(0,d.kt)("inlineCode",{parentName:"p"},"Signature")," as part of the ",(0,d.kt)("inlineCode",{parentName:"p"},"txPayload")," itself."),(0,d.kt)("p",null,"First, compute the digital signature on the request payload. ",(0,d.kt)("inlineCode",{parentName:"p"},'\'{"user_id":"admin","db_name":"db1"}\'')),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-shell"},'./bin/signer -privatekey=deployment/sample/crypto/admin/admin.key \\\n    -data=\'{"user_id":"admin","db_name":"db1"}\'\n')),(0,d.kt)("p",null,"The above command outputs the digital signature that needs to be set in the ",(0,d.kt)("inlineCode",{parentName:"p"},"Signature")," header."),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre"},"MEYCIQCeZXLrqrMYodbbgR7UjHR2yq42H2wbNHbj6KEDwW8a1QIhAIv1udmHjwSssKnJjS5iY1LDfez1/RDv9ZEue4TDfcJZ\n")),(0,d.kt)("p",null,"Next, submit the query by setting the ",(0,d.kt)("inlineCode",{parentName:"p"},"UserID")," and ",(0,d.kt)("inlineCode",{parentName:"p"},"Signature")," headers."),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-shell"},'curl \\\n    -H "Content-Type: application/json" \\\n    -H "UserID: admin" \\\n    -H "Signature: MEYCIQCeZXLrqrMYodbbgR7UjHR2yq42H2wbNHbj6KEDwW8a1QIhAIv1udmHjwSssKnJjS5iY1LDfez1/RDv9ZEue4TDfcJZ" \\\n    -X GET http://127.0.0.1:6001/db/db1 | jq .\n')),(0,d.kt)("p",null,(0,d.kt)("strong",{parentName:"p"},"Output:")),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-webmanifest"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "exist": true\n  },\n  "signature": "MEYCIQCtwYwdWo12alntzm1ZHkseOj5flLe8f8Hb8uGdQpjNwAIhAIHX7ddkikKAc+znEPCBE30iUemXpEC/Av8xdYQ5Rzxr"\n}\n')),(0,d.kt)("h3",{id:"13-check-the-existence-of-db2"},"1.3) Check the existence of db2"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-shell"},'./bin/signer -privatekey=deployment/sample/crypto/admin/admin.key\n    -data=\'{"user_id":"admin","db_name":"db1"}\'\n')),(0,d.kt)("p",null,"The above command outputs the digital signature that needs to be set in the ",(0,d.kt)("inlineCode",{parentName:"p"},"Signature")," header."),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-shell"},"MEYCIQCcd9pucHSiyrP/wTIfSxer1M1qhyuYZ954WyuNO6NNuAIhALXfLg9NdwIDY2xDoLO9GxY5k/5hPqOz6i7fxvurd/v3\n")),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-shell"},'curl \\\n    -H "Content-Type: application/json" \\\n    -H "UserID: admin" \\\n    -H "Signature: MEYCIQCcd9pucHSiyrP/wTIfSxer1M1qhyuYZ954WyuNO6NNuAIhALXfLg9NdwIDY2xDoLO9GxY5k/5hPqOz6i7fxvurd/v3" \\\n    -X GET http://127.0.0.1:6001/db/db2 | jq .\n')),(0,d.kt)("p",null,(0,d.kt)("strong",{parentName:"p"},"Output:")),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-webmanifest"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "exist": true\n  },\n  "signature": "MEUCIQC1SHGOWpV53UJ39VGfrrm0sbRGE1NUi0yQtAcTggvhhQIgdzuw6vTkgC8i8v/RnnvYbmHJurCmdsjtNUikgvO4HQE="\n}\n')),(0,d.kt)("h2",{id:"2-create-a-database-with-index-definition"},"2) Create a Database with Index Definition"),(0,d.kt)("p",null,"The following ",(0,d.kt)("inlineCode",{parentName:"p"},"cURL")," command submits a database administration transaction to create a database named ",(0,d.kt)("inlineCode",{parentName:"p"},"db8")," with an index definition such that complex queries on fields in the JSON value can be executed."),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-shell"},' curl \\\n   -H "Content-Type: application/json" \\\n   -H "TxTimeout: 2s" \\\n   -X POST http://127.0.0.1:6001/db/tx \\\n   --data \'{\n    "payload": {\n        "user_id": "admin",\n        "tx_id": "1b6d6414-9b58-45d0-6723-1e31712add71",\n        "create_dbs": [\n            "db8"\n        ],\n        "dbs_index":{\n            "db8":{\n                "attribute_and_type":{\n                    "attr1":2,\n                    "attr2":0,\n                    "attr3":1\n                }\n            }\n        }\n    },\n  "signature": "MEYCIQCQiIsgErny1j+bpAew+WeJu/uWTWEvJzmQT9HUFEwsYAIhAMZqUW2mUhg+MDa3a03TVd4fvWtSRS0U4ZJHnJzLzaiC"\n}\' | jq .\n')),(0,d.kt)("p",null,"The signature field contains the admin's signature on the payload. It's computed using the ",(0,d.kt)("inlineCode",{parentName:"p"},"signer")," utility as shown below:"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-shell"},'./bin/signer -privatekey=deployment/sample/crypto/admin/admin.key \\\n    -data=\'{"user_id":"admin","tx_id":"1b6d6414-9b58-45d0-6723-1e31712add71","create_dbs":["db8"],"dbs_index":{"db8":{"attribute_and_type":{"attr1":2,"attr2":0,"attr3":1}}}}\'\n')),(0,d.kt)("p",null,"The ",(0,d.kt)("inlineCode",{parentName:"p"},"payload")," of the database administration transaction must contain a ",(0,d.kt)("inlineCode",{parentName:"p"},'"user_id"')," that submits the transaction, a ",(0,d.kt)("inlineCode",{parentName:"p"},'"tx_id"')," to uniquely identify this transaction, a list of dbs to be created in ",(0,d.kt)("inlineCode",{parentName:"p"},'"create_dbs"'),", and an index definition for the database ",(0,d.kt)("inlineCode",{parentName:"p"},"db8")," as shown in the above cURL command."),(0,d.kt)("p",null,"Only indexed fields in a JSON document can be queried using a JSON query. In the above transaction, the field named ",(0,d.kt)("inlineCode",{parentName:"p"},"attr1"),", ",(0,d.kt)("inlineCode",{parentName:"p"},"attr2"),", and ",(0,d.kt)("inlineCode",{parentName:"p"},"attr3")," are asked to be indexed for JSON values stored in the database ",(0,d.kt)("inlineCode",{parentName:"p"},"db8"),". This enables JSON queries using these indexed fields. For more details, refer to the query ","[examples]","."),(0,d.kt)("h2",{id:"3-delete-databases"},"3) Delete Databases"),(0,d.kt)("p",null,"We can delete an existing database by issuing a database administration transaction. Note that the database to be deleted should exist in the node. Otherwise, the transaction would be marked invalid."),(0,d.kt)("h3",{id:"31-delete-databases-named-db1-and-db2"},"3.1) Delete databases named db1 and db2"),(0,d.kt)("p",null,"The following curl command can be used to delete two existing databases named ",(0,d.kt)("inlineCode",{parentName:"p"},"db1")," and ",(0,d.kt)("inlineCode",{parentName:"p"},"db2"),":"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-webmanifest"},'curl \\\n   -H "Content-Type: application/json" \\\n   -H "TxTimeout: 2s" \\\n   -X POST http://127.0.0.1:6001/db/tx \\\n   --data \'{\n    "payload": {\n        "user_id": "admin",\n        "tx_id": "5c6d6414-3258-45d0-6923-2g31712add82",\n        "delete_dbs": [\n            "db1",\n            "db2"\n        ]\n    },\n  "signature": "MEYCIQDC3t4gX4rAXmzqM8359u751vueqaSmYvBEXpCXdafeKAIhAKitFv8r89rRRuAlABhjcgeJPIPTEpkcc3tOZ77YmypV"\n}\' | jq .\n')),(0,d.kt)("p",null,"The ",(0,d.kt)("inlineCode",{parentName:"p"},"payload")," of the database administration transaction must contain a ",(0,d.kt)("inlineCode",{parentName:"p"},'"user_id"')," that submits the transaction, a ",(0,d.kt)("inlineCode",{parentName:"p"},'"tx_id"')," to uniquely identify this transaction, and a list of dbs to be deleted in a ",(0,d.kt)("inlineCode",{parentName:"p"},'"delete_dbs"')," list as shown in the above ",(0,d.kt)("inlineCode",{parentName:"p"},"cURL")," command."),(0,d.kt)("p",null,"As all administrative transactions must be submitted only by the admin, the ",(0,d.kt)("inlineCode",{parentName:"p"},'"user_id"')," is set to ",(0,d.kt)("inlineCode",{parentName:"p"},'"admin"'),". As we are deleting two existing dbs named ",(0,d.kt)("inlineCode",{parentName:"p"},"db1")," and ",(0,d.kt)("inlineCode",{parentName:"p"},"db2"),", the ",(0,d.kt)("inlineCode",{parentName:"p"},'"delete_dbs"')," is set to ",(0,d.kt)("inlineCode",{parentName:"p"},'["db1","db2"]'),". Finally, the signature field contains the admin's signature on the payload and is computed using the following command:"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-shell"},'./bin/signer -privatekey=deployment/sample/crypto/admin/admin.key \\\n    -data=\'{"user_id":"admin","tx_id":"5c6d6414-3258-45d0-6923-2g31712add82","delete_dbs":["db1","db2"]}\'\n')),(0,d.kt)("p",null,"The output of the above command is set to the ",(0,d.kt)("inlineCode",{parentName:"p"},"signature")," field in the data."),(0,d.kt)("p",null,"Once the db deletion transaction gets validated and committed, it returns a receipt to the transaction submitter. Note that only if the ",(0,d.kt)("inlineCode",{parentName:"p"},"TxTimeout")," header is set, the submitting user receives the transaction receipt. This is because if ",(0,d.kt)("inlineCode",{parentName:"p"},"TxTimeout")," is not set, the transaction is submitted asynchronously and the database node\nreturns as soon as it accepts the transaction into the queue. If the ",(0,d.kt)("inlineCode",{parentName:"p"},"TxTimeout")," is set, the database node waits\nfor the specified time. If the transaction is committed by the specified time, the receipt is returned.\nThe receipt for the above transaction looks something like the following:"),(0,d.kt)("p",null,"Once the above transaction gets validated and committed, we can check that ",(0,d.kt)("inlineCode",{parentName:"p"},"db1")," and ",(0,d.kt)("inlineCode",{parentName:"p"},"db2")," do not exist anymore."),(0,d.kt)("h3",{id:"32-check-the-existence-of-db1"},"3.2) Check the existence of db1"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-shell"},'curl \\\n    -H "Content-Type: application/json" \\\n    -H "UserID: admin" \\\n    -H "Signature: MEYCIQCeZXLrqrMYodbbgR7UjHR2yq42H2wbNHbj6KEDwW8a1QIhAIv1udmHjwSssKnJjS5iY1LDfez1/RDv9ZEue4TDfcJZ" \\\n    -X GET http://127.0.0.1:6001/db/db1 | jq .\n')),(0,d.kt)("p",null,(0,d.kt)("strong",{parentName:"p"},"Output:")),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-webmanifest"},'{\n  "payload": {\n    "header": {\n      "nodeID": "bdb-node-1"\n    },\n  }\n}\n')),(0,d.kt)("p",null,"The default values are omitted and hence, the ",(0,d.kt)("inlineCode",{parentName:"p"},"exist = false")," is not printed. "),(0,d.kt)("h3",{id:"33-check-the-existence-of-db2"},"3.3) Check the existence of db2"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-shell"},'curl \\\n    -H "Content-Type: application/json" \\\n    -H "UserID: admin" \\\n    -H "Signature: MEYCIQCcd9pucHSiyrP/wTIfSxer1M1qhyuYZ954WyuNO6NNuAIhALXfLg9NdwIDY2xDoLO9GxY5k/5hPqOz6i7fxvurd/v3" \\\n    -X GET http://127.0.0.1:6001/db/db2 | jq .\n')),(0,d.kt)("p",null,(0,d.kt)("strong",{parentName:"p"},"Output:")),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-webmanifest"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    }\n  },\n  "signature": "MEYCIQCvzD85Rm/Xd1L6B6AvcZWlfhMeho0zj4WcBE66DY3wswIhALaugTByfBvY1O1BFjw7KuHDQUYOM4sDpsudd/6Hy7bt"\n}\n')),(0,d.kt)("p",null,"The default values are omitted and hence, the ",(0,d.kt)("inlineCode",{parentName:"p"},"exist = false")," is not printed."),(0,d.kt)("h2",{id:"4-create-and-delete-databases-in-a-single-transaction"},"4) Create and Delete Databases in a Single Transaction"),(0,d.kt)("p",null,"Within a single transaction, we can create and delete as many number of databases as we want. Note that we can only delete databases if they exist. Otherwise, the transaction would be invalidated. Hence, first create two databases using this ",(0,d.kt)("a",{parentName:"p",href:"#creation-of-databases"},"example"),".\nIf this example was already executed on the database instance, change the ",(0,d.kt)("inlineCode",{parentName:"p"},"tx_id")," used in that example and regenerate the signature. Also, do not forgot to update the ",(0,d.kt)("inlineCode",{parentName:"p"},"tx_id")," and ",(0,d.kt)("inlineCode",{parentName:"p"},"signature")," set in the payload passed to ",(0,d.kt)("inlineCode",{parentName:"p"},"cURL"),"."),(0,d.kt)("p",null,"The following command submits a transaction that creates and deletes databases within a single transaction.\nThis transactions will be valid only if ",(0,d.kt)("inlineCode",{parentName:"p"},"db3")," & ",(0,d.kt)("inlineCode",{parentName:"p"},"db4")," do not exist and ",(0,d.kt)("inlineCode",{parentName:"p"},"db1")," & ",(0,d.kt)("inlineCode",{parentName:"p"},"db2")," exist in the cluster."),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-shell"},' curl \\\n   -H "Content-Type: application/json" \\\n   -H "TxTimeout: 2s" \\\n   -X POST http://127.0.0.1:6001/db/tx \\\n   --data \'{\n    "payload": {\n        "user_id": "admin",\n        "tx_id": "1b6d6414-9b58-12d5-3733-1f31712add88",\n        "create_dbs": [\n            "db3",\n            "db4"\n        ],\n        "delete_dbs": [\n            "db1",\n            "db2"\n        ]\n    },\n  "signature": "MEUCIAjEtDZ2Q6n6cteisp94ggFXk3JUOXCjhfUlftc80gf6AiEA6IPtezn06SaPWQLfGhbx8BrFL4BI4iEIu/TDGtcaCKI="\n}\' | jq .\n')),(0,d.kt)("p",null,"The signature is computed using the following command:"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre"},'./bin/signer -privatekey=deployment/sample/crypto/admin/admin.key \\\n    -data=\'{"user_id":"admin","tx_id":"1b6d6414-9b58-12d5-3733-1f31712add88","create_dbs":["db3","db4"],"delete_dbs":["db1","db2"]}\'\n')),(0,d.kt)("h2",{id:"5-invalid-database-administration-transaction"},"5) Invalid Database Administration Transaction"),(0,d.kt)("p",null,"We cover the incorrect usage of administration transactions that can lead to the invalidation of a submitted database administration transaction."),(0,d.kt)("h3",{id:"51-database-to-be-created-already-exists"},"5.1) Database to be created already exists"),(0,d.kt)("p",null,"Let's create a new database ",(0,d.kt)("inlineCode",{parentName:"p"},"db5")),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-shell"},'./bin/signer -privatekey=deployment/sample/crypto/admin/admin.key \\\n    -data=\'{"user_id":"admin","tx_id":"1b6d6414-9b58-45d0-9723-1f31712add73","create_dbs":["db5"]}\'\n')),(0,d.kt)("p",null,"The above command outputs the digital signature on the transaction payload."),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre"},"MEUCIQCqYEdJOwf6JXAOCmAaub745uTEb2jyCFs10zZOhDIvUAIgN/ody6R9q3u5Q26Tabn3lPY1zz8NCUHCo6ymSu15jI4=\n")),(0,d.kt)("p",null,"Include the above signature and submit the transaction to create the database ",(0,d.kt)("inlineCode",{parentName:"p"},"db5"),"."),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-webmanifest"},' curl \\\n   -H "Content-Type: application/json" \\\n   -H "TxTimeout: 2s" \\\n   -X POST http://127.0.0.1:6001/db/tx \\\n   --data \'{\n    "payload": {\n        "user_id": "admin",\n        "tx_id": "1b6d6414-9b58-45d0-9723-1f31712add73",\n        "create_dbs": [\n            "db5"\n        ]\n    },\n  "signature": "MEUCIQCqYEdJOwf6JXAOCmAaub745uTEb2jyCFs10zZOhDIvUAIgN/ody6R9q3u5Q26Tabn3lPY1zz8NCUHCo6ymSu15jI4="\n}\' | jq .\n')),(0,d.kt)("p",null,"Let's try to create ",(0,d.kt)("inlineCode",{parentName:"p"},"db5")," again."),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-shell"},'./bin/signer -privatekey=deployment/sample/crypto/admin/admin.key \\\n    -data=\'{"user_id":"admin","tx_id":"1b6d6414-9b58-45d0-9723-1f31712add74","create_dbs":["db5"]}\'\n')),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-shell"},"MEQCIBySAJhI5DCshQ/KWagquxtV8S6gRSiqG/qYrcwxhmyTAiAZG8wpcQx33uTlItROQN5B5izTZhntxhqWRTfv8t84uw==\n")),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-shell"},' curl \\\n   -H "Content-Type: application/json" \\\n   -H "TxTimeout: 2s" \\\n   -X POST http://127.0.0.1:6001/db/tx \\\n   --data \'{\n    "payload": {\n        "user_id": "admin",\n        "tx_id": "1b6d6414-9b58-45d0-9723-1f31712add74",\n        "create_dbs": [\n            "db5"\n        ]\n    },\n  "signature": "MEQCIBySAJhI5DCshQ/KWagquxtV8S6gRSiqG/qYrcwxhmyTAiAZG8wpcQx33uTlItROQN5B5izTZhntxhqWRTfv8t84uw=="\n}\' | jq .\n')),(0,d.kt)("p",null,"The above transaction would be invalidated with the following reason: ",(0,d.kt)("inlineCode",{parentName:"p"},"the database [db5] already exists in the cluster and hence, it cannot be created"),"\nThe exact output would be"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-webmanifest"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "receipt": {\n      "header": {\n        "base_header": {\n          "number": 7,\n          "previous_base_header_hash": "buuy+aLzGABHKoVS7XemlQFyynryMwtXHZ5Oq8SHewE=",\n          "last_committed_block_hash": "4Km4QTQDIZ+u7GmFJOqG8HXgmWEMkedJRcczp6xweo4=",\n          "last_committed_block_num": 6\n        },\n        "skipchain_hashes": [\n          "4Km4QTQDIZ+u7GmFJOqG8HXgmWEMkedJRcczp6xweo4=",\n          "JAS8SOSIZqBQMQs9PUkgrCjAF4I//lzjcYshgAtMvzs="\n        ],\n        "tx_merkel_tree_root_hash": "tgsHvDvjWbO8P/BIvtvRHuIBZUnptfpiHN9RyBSu9Lw=",\n        "state_merkel_tree_root_hash": "qmolWEmx9D8BtWPRUEE0tz4/bvzhxLpZUJR1gA7AT4Q=",\n        "validation_info": [\n          {\n            "flag": 5,\n            "reason_if_invalid": "the database [db5] already exists in the cluster and hence, it cannot be created"\n          }\n        ]\n      }\n    }\n  },\n  "signature": "MEUCIFfdEaH9himxa0544ibi318+sVQ9BH3wst3a3dLngQklAiEA1FE42WXpQyqGx71stLp0NoRqhKi9LTQnTT6e3Erebvk="\n}l\n')),(0,d.kt)("p",null,"In the transaction receipt, we can see that the following:"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre"},'        "validation_info": [\n          {\n            "flag": 5,\n            "reason_if_invalid": "the database [db5] already exists in the cluster and hence, it cannot be created"\n          }\n        ]\n')),(0,d.kt)("h3",{id:"52-database-to-be-deleted-does-not-exist"},"5.2) Database to be deleted does not exist"),(0,d.kt)("p",null,"Let's try to delete ",(0,d.kt)("inlineCode",{parentName:"p"},"db6")," which does not exist in the cluster."),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-shell"},'./bin/signer -privatekey=deployment/sample/crypto/admin/admin.key \\\n    -data=\'{"user_id":"admin","tx_id":"1b6d6414-9b58-45d0-9723-1f31712add75","delete_dbs":["db6"]}\'\n')),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre"},"MEUCIQCdUyJJEcBXqR1JPnIpaR6rVYXNSzFThhuLils1SWA2lAIgQ6KFClkJtrRRuhJqu3R7q9KUcQN2bBXrdvXJK3n9/Qk=\n")),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-shell"},'curl \\\n     -H "Content-Type: application/json" \\\n     -H "TxTimeout: 2s" \\\n     -X POST http://127.0.0.1:6001/db/tx \\\n     --data \'{\n      "payload": {\n            "user_id": "admin",\n            "tx_id": "1b6d6414-9b58-45d0-9723-1f31712add75",\n            "delete_dbs": [\n                "db6"\n            ]\n      },\n      "signature": "MEUCIQCdUyJJEcBXqR1JPnIpaR6rVYXNSzFThhuLils1SWA2lAIgQ6KFClkJtrRRuhJqu3R7q9KUcQN2bBXrdvXJK3n9/Qk="\n  }\' | jq .\n')),(0,d.kt)("p",null,"The above transaction would be invalidated with the following reason: ",(0,d.kt)("inlineCode",{parentName:"p"},"the database [db6] does not exist in the cluster and hence, it cannot be deleted"),"."),(0,d.kt)("p",null,"The following would be the transaction receipt that holds the reason for the invalidation:"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-webmanifest"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "receipt": {\n      "header": {\n        "base_header": {\n          "number": 8,\n          "previous_base_header_hash": "lLU6v1B2shIuugSC8scHno989kzNrI9j+l3uw51ULt4=",\n          "last_committed_block_hash": "XltNBYrr8XF6L8TSc9QcJmoGYchzqmbeCbpR/BjXTrE=",\n          "last_committed_block_num": 7\n        },\n        "skipchain_hashes": [\n          "XltNBYrr8XF6L8TSc9QcJmoGYchzqmbeCbpR/BjXTrE="\n        ],\n        "tx_merkel_tree_root_hash": "UIG89/PfrT79WGZJHZINST+qSHXGaVSt0CwcuL0V0kQ=",\n        "state_merkel_tree_root_hash": "qmolWEmx9D8BtWPRUEE0tz4/bvzhxLpZUJR1gA7AT4Q=",\n        "validation_info": [\n          {\n            "flag": 5,\n            "reason_if_invalid": "the database [db6] does not exist in the cluster and hence, it cannot be deleted"\n          }\n        ]\n      }\n    }\n  },\n  "signature": "MEQCIEQJItcH5M3wptuNMdOsKmZTARMomqpgcvJigM46sxdUAiB8+3FMNwyU4x5NUdPIi5Prd2jL9KiNuDdNoHINksYB1Q=="\n}\n')),(0,d.kt)("h3",{id:"53-database-to-be-deleted-is-a-system-database"},"5.3) Database to be deleted is a system database"),(0,d.kt)("p",null,"Let's try to delete a system database ",(0,d.kt)("inlineCode",{parentName:"p"},"_config"),"."),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-shell"},'./bin/signer -privatekey=deployment/sample/crypto/admin/admin.key \\\n    -data=\'{"user_id":"admin","tx_id":"1b6d6414-9b58-45d0-9723-1f31712add76","delete_dbs":["_config"]}\'\n')),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-shell"},"MEUCIAiy5DIQvpPk8a1+e1Q5hZww+fm71PUx1kyBF8i5Vr70AiEA5i7Q33t5TbL66k4syAYmitj+fWnf4z6nvIjuS3ilJ9s=\n")),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-shell"},'curl \\\n     -H "Content-Type: application/json" \\\n     -H "TxTimeout: 2s" \\\n     -X POST http://127.0.0.1:6001/db/tx \\\n     --data \'{\n      "payload": {\n            "user_id": "admin",\n            "tx_id": "1b6d6414-9b58-45d0-9723-1f31712add76",\n            "delete_dbs": [\n                "_config"\n            ]\n      },\n      "signature": "MEUCIAiy5DIQvpPk8a1+e1Q5hZww+fm71PUx1kyBF8i5Vr70AiEA5i7Q33t5TbL66k4syAYmitj+fWnf4z6nvIjuS3ilJ9s="\n  }\' | jq .\n')),(0,d.kt)("p",null,"The above transaction would be invalidated with the following reason: ",(0,d.kt)("inlineCode",{parentName:"p"},"the database [_config] is a system database which cannot be deleted"),".\nThe following is the transaction receipt:"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-webmanifest"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "receipt": {\n      "header": {\n        "base_header": {\n          "number": 9,\n          "previous_base_header_hash": "mE6Gr5PTXzJbXsUATl/Fv+Xkg81Cbrtw8MfUJreb9og=",\n          "last_committed_block_hash": "4QleYwwhc+DCYeYaIdrdTpMeOgUa5O8F40vuVuZFsEs=",\n          "last_committed_block_num": 8\n        },\n        "skipchain_hashes": [\n          "4QleYwwhc+DCYeYaIdrdTpMeOgUa5O8F40vuVuZFsEs=",\n          "XltNBYrr8XF6L8TSc9QcJmoGYchzqmbeCbpR/BjXTrE=",\n          "JAS8SOSIZqBQMQs9PUkgrCjAF4I//lzjcYshgAtMvzs=",\n          "fCjyJMJc/xLMdW7uRH22w7ps2QbGeLiLIfIJPMntitI="\n        ],\n        "tx_merkel_tree_root_hash": "xEgj6T0djExEdGvWxwCrgD9nXj26VTyQYgYGTEcLscs=",\n        "state_merkel_tree_root_hash": "qmolWEmx9D8BtWPRUEE0tz4/bvzhxLpZUJR1gA7AT4Q=",\n        "validation_info": [\n          {\n            "flag": 5,\n            "reason_if_invalid": "the database [_config] is a system database which cannot be deleted"\n          }\n        ]\n      }\n    }\n  },\n  "signature": "MEMCHztXBWGjF0X+CJQ01QZyyKftqK7h7kW2VhuTDHx6UoECIGdjkHMkflSGywWnVBAM9zKVhllWS0ApJkvyaYUDFOHQ"\n}\n')))}u.isMDXComponent=!0}}]);