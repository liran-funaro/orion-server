"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[694],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return u}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),f=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=f(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=f(n),u=o,x=d["".concat(s,".").concat(u)]||d[u]||p[u]||a;return n?r.createElement(x,i(i({ref:t},l),{},{components:n})):r.createElement(x,i({ref:t},l))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var f=2;f<a;f++)i[f]=n[f];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8930:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return f},toc:function(){return l},default:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],c={id:"tx",title:"Proof of Existence of a Transaction"},s=void 0,f={unversionedId:"getting-started/proofs-and-verification/gosdk/tx",id:"getting-started/proofs-and-verification/gosdk/tx",isDocsHomePage:!1,title:"Proof of Existence of a Transaction",description:"Transaction proof example",source:"@site/docs/getting-started/proofs-and-verification/gosdk/tx.md",sourceDirName:"getting-started/proofs-and-verification/gosdk",slug:"/getting-started/proofs-and-verification/gosdk/tx",permalink:"/orion-server/docs/getting-started/proofs-and-verification/gosdk/tx",tags:[],version:"current",frontMatter:{id:"tx",title:"Proof of Existence of a Transaction"},sidebar:"Documentation",previous:{title:"Proof of Existence of a State/Data",permalink:"/orion-server/docs/getting-started/proofs-and-verification/gosdk/state"},next:{title:"Proof of Existence of a Block",permalink:"/orion-server/docs/getting-started/proofs-and-verification/gosdk/block"}},l=[{value:"Transaction proof example",id:"transaction-proof-example",children:[],level:3}],p={toc:l};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"transaction-proof-example"},"Transaction proof example"),(0,a.kt)("p",null,"Below is a simple code snippet that shows how to use the ledger API to generate a transaction existence proof:"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Please note: For presentation purposes, all results and error handling, except proofs, were eliminated.\nLedger connectivity proof is eliminated here as well. For details and an example, see ",(0,a.kt)("a",{parentName:"p",href:"../proofs#ledger-connectivity-proof"},"here")," and ",(0,a.kt)("a",{parentName:"p",href:"ledger"},"here"),". ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'    db, err := bcdb.Create(conConf)\n    session, err := db.Session(&c.SessionConfig)\n    ledger, err := session.Ledger()\n    \n    // Load tx content from file \n    txBytes, err := ioutil.ReadFile(txFile)\n    tx := &types.DataTxEnvelope{}\n    err = proto.Unmarshal(txBytes, tx)\n    txId := tx.Payload.TxId\n\n    // Get transaction receipt for txId\n    txReceipt, err := ledger.GetTransactionReceipt(txId)\n\n    // Check if tx is valid\n    if txReceipt.Header.ValidationInfo[txReceipt.TxIndex].Flag != types.Flag_VALID {\n        fmt.Printf("Transaction number %s validation flag is invalid: %s\\n", txId, txReceipt.Header.ValidationInfo[txReceipt.TxIndex].Flag)\n    }\n\n    // Get proof for tx existence and verify it\n    txProof, err := ledger.GetTransactionProof(txReceipt.Header.BaseHeader.Number, txReceipt.TxIndex)\n    // To validate data tx, you need its content, maybe stored somewhere\n    res, err := txProof.Verify(txReceipt, tx)\n    if !res {\n        fmt.Printf("Transaction %s is not part of block %d\\n", tx.Payload.TxId, txReceipt.Header.BaseHeader.Number)\n    }\n    \n')))}d.isMDXComponent=!0}}]);